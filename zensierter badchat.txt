\g<0>

<!-- Schritt 10: Quick‑Sync & Schritt 11: Debug‑Overlay --><style>
  .dbg-toggle{position:fixed;right:16px;bottom:16px;z-index:10000;border-radius:999px;padding:10px 12px}
  .dbg-panel{position:fixed;right:16px;bottom:64px;z-index:10000;width:min(460px,92vw);max-height:60vh;overflow:auto;border:1px solid var(--muted);background:#0b1324;border-radius:14px;box-shadow:0 10px 30px rgba(0,0,0,.35);display:none}
  .dbg-panel header{display:flex;justify-content:space-between;align-items:center;padding:10px 12px;border-bottom:1px solid var(--muted)}
  .dbg-panel pre{margin:0;padding:12px;white-space:pre-wrap}
</style><script>
(function(){
  // Quick‑Sync
  const b64 = (s)=> btoa(unescape(encodeURIComponent(s)));
  const unb64 = (s)=> decodeURIComponent(escape(atob(s)));
  function makeSyncCode(){ try{ const json=JSON.stringify(state); return b64(json) }catch(e){ toast('Sync‑Fehler: '+e.message); return '' } }
  function applySyncCode(code){ try{ const json=unb64(code.trim()); const data=JSON.parse(json); Object.assign(state,data); store.save(state); renderAll(); toast('Sync erfolgreich importiert'); }catch(e){ toast('Ungültiger Sync‑Code') } }

  const genBtn=document.getElementById('genSync');
  const impBtn=document.getElementById('importSync');
  if(genBtn) genBtn.addEventListener('click',()=>{ const code=makeSyncCode(); if(!code) return; navigator.clipboard?.writeText(code).then(()=>toast('Sync‑Code in Zwischenablage')).catch(()=>{}); prompt('Sync‑Code (kopieren):', code); });
  if(impBtn) impBtn.addEventListener('click',()=>{ const code=prompt('Sync‑Code einfügen:'); if(code) applySyncCode(code); });

  // Debug‑Overlay UI
  const btn=document.createElement('button'); btn.className='btn dbg-toggle'; btn.textContent='🧪 Debug';
  const panel=document.createElement('div'); panel.className='dbg-panel';
  panel.innerHTML=<header><strong>Debug</strong><button class="btn" id="dbgClose">Schließen</button></header><pre id="dbgPre">(leer)</pre>;document.addEventListener('DOMContentLoaded', ()=>{ document.body.append(btn,panel); });

const refreshDebug=()=>{ const pre=document.getElementById('dbgPre'); if(!pre) return; const dbg={ version: (window.VERSION||'n/a'), now: new Date().toLocaleTimeString(), phase: state.phase, subphase: state.subphase, subphaseScore: state.subphaseScore, trust: state.trust, interest: state.interest, closeness: state.subphaseScore, char: { name: state.character?.name, maxSensitivity: state.character?.maxSensitivity, traits: state.character?.traits }, lastPhotoAudit: window.__lastPhotoAudit||null, phaseReason: state.phaseReason, subphaseReason: state.subphaseReason, counters: state.counters }; pre.textContent = JSON.stringify(dbg,null,2); };

document.addEventListener('click',(e)=>{ if(e.target===btn){ panel.style.display = panel.style.display==='block'?'none':'block'; refreshDebug(); } if(e.target && e.target.id==='dbgClose'){ panel.style.display='none'; } });

// Hook Fotoauswahl-Audit window.__lastPhotoAudit = []; const _selectPhotos = window.selectPhotosForChat; if(typeof selectPhotos==='function'){ window.selectPhotosForChat = function(queryTags){ const ch=state.character; const pr=PHASE_RULES[state.phase]||{}; const sub=(typeof currentSubphaseProfile==='function'?currentSubphaseProfile():{}); const maxSens=minSensitivity(ch.maxSensitivity, pr.maxSensitivity||'high'); const maxImgs=clamp(Math.min((ch.traits.multiImageLimit||3)+(sub.maxImagesDelta||0), pr.maxImages||3, 4),1,4); const relThresh=clamp(((ch.traits.relevanceThreshold||5)/2)+(sub.relevanceThresholdDelta||0),0,10); const rows = state.photos.map(p=>{ const sens=p.sensitivity||computeSensitivity(p.tags); const score=relevanceScore(p.tags,queryTags); const allowed= allowedBySensitivity(sens,maxSens) && score>=relThresh && state.trust>=(p.trust??0); return {name:p.name,sens,score,allowed,tags:p.tags,trustReq:p.trust??0, reasons:{ sens:!allowedBySensitivity(sens,maxSens), rel:score<relThresh, trust:(state.trust||0)<(p.trust??0) } }; }); // Stats const stats={ allowed:0, blocked:0, reasons:{sens:0, rel:0, trust:0} }; rows.forEach(r=>{ if(r.allowed) stats.allowed++; else { stats.blocked++; if(r.reasons.sens) stats.reasons.sens++; if(r.reasons.rel) stats.reasons.rel++; if(r.reasons.trust) stats.reasons.trust++; } }); window.__lastPhotoAudit = { queryTags, maxSens, maxImgs, relThresh, rows, stats }; policyFeedbackFromAudit(window.__lastPhotoAudit); // Auswahl return rows.filter(r=>r.allowed).sort((a,b)=>b.score-a.score).slice(0,maxImgs).map(r=> state.photos.find(p=>p.name===r.name)); } } // Bild‑Policy Feedback: passt Verhalten an & erklärt freundlich function policyFeedbackFromAudit(a){ try{ if(!a||!a.stats) return; state.counters=state.counters||{}; state.counters.photoBlocks=(state.counters.photoBlocks||0)+a.stats.blocked; const now=Date.now(); // Adaptive Relevanz: wenn mehrfach am Relevanz-Schwellwert gescheitert → etwas anheben if(a.stats.reasons.rel>=2){ const tr=state.character?.traits; if(tr){ tr.relevanceThreshold=Math.min(9, (tr.relevanceThreshold||5)+1); try{ store.save(state) }catch(){ } toast?.('Relevanz‑Schwelle leicht erhöht'); } } // Leichte Vertrauensdelle, wenn wiederholt Bilder wegen Trust blockiert wurden if(a.stats.reasons.trust>=2 && typeof logTrust==='function'){ logTrust(-0.1, 'Geblockte Bilder (Trust‑Anforderung)'); }

// Auto-Korrektur Sensibilität
state._sensBlockCount = (state._sensBlockCount||0) + (a.stats.reasons.sens? 1:0);
if(a.stats.reasons.sens===0) state._sensBlockCount=0; // reset wenn kein Sens-Block
if(state._sensBlockCount>=3 && !state._sensTempRaised && (now-(state._lastSensPromptTs||0)>60000)){
  state._lastSensPromptTs=now;
  state._sensBlockCount=0;
  post?.('ai', 'Mir ist aufgefallen, dass mehrere Bilder an meiner Sensibilitätsgrenze scheitern. Soll ich diese für dieses Gespräch lockern? (ja/nein)');
  state._pendingSensRelaxConsent = true;
}

// Nutzerfreundliche Erklärung nur mit Cooldown
if(a.stats.blocked>0 && a.stats.allowed===0 && (now-(state._lastPolicyMsgTs||0)>30000)){
  state._lastPolicyMsgTs=now;
  const parts=[]; if(a.stats.reasons.sens) parts.push('Sensibilität'); if(a.stats.reasons.rel) parts.push('geringe Relevanz'); if(a.stats.reasons.trust) parts.push('fehlendes Vertrauen');
  const hint = 'Du kannst: Charakter‑Editor öffnen (🧩), vorsichtiger formulieren (#tags), oder wir bauen Vertrauen weiter auf.';
  post?.('ai', Ich habe gerade einige Bilder verworfen (${parts.join(', ')}). Sag mir gern, worauf du Fokus willst – dann versuche ich es erneut. ${hint});
}

}catch(e){ /* silent */ } }

// Consent‑Handler für Sensibilität-Relax (function(){ const host=document.getElementById('messages'); if(!host) return; new MutationObserver(()=>{ const last=[...host.querySelectorAll('.msg.me')].at(-1); if(!last) return; const txt=(last.innerText||'').trim().toLowerCase(); if(state._pendingSensRelaxConsent){ if(txt==='ja' || txt==='yes'){ const ch=state.character; if(ch){ ch.maxSensitivity='very_high'; state.sensTempRaised=true; try{ store.save(state) }catch(){ } toast?.('Sensibilitätsgrenze temporär gelockert'); } post?.('ai','Alles klar – ich werde in diesem Gespräch auch sensiblere Bilder zeigen.'); state._pendingSensRelaxConsent=false; } else if(txt==='nein' || txt==='no'){ post?.('ai','Okay, dann bleibe ich bei meinen aktuellen Grenzen.'); state._pendingSensRelaxConsent=false; } } }).observe(host,{childList:true}); })(); // Leichte Vertrauensdelle, wenn wiederholt Bilder wegen Trust blockiert wurden if(a.stats.reasons.trust>=2 && typeof logTrust==='function'){ logTrust(-0.1, 'Geblockte Bilder (Trust‑Anforderung)'); } // Nutzerfreundliche Erklärung nur mit Cooldown const now=Date.now(); if(a.stats.blocked>0 && a.stats.allowed===0 && (now-(state._lastPolicyMsgTs||0)>30000)){ state._lastPolicyMsgTs=now; const parts=[]; if(a.stats.reasons.sens) parts.push('Sensibilität'); if(a.stats.reasons.rel) parts.push('geringe Relevanz'); if(a.stats.reasons.trust) parts.push('fehlendes Vertrauen'); const hint = 'Du kannst: Charakter‑Editor öffnen (🧩), vorsichtiger formulieren (#tags), oder wir bauen Vertrauen weiter auf.'; post?.('ai', Ich habe gerade einige Bilder verworfen (${parts.join(', ')}). Sag mir gern, worauf du Fokus willst – dann versuche ich es erneut. ${hint}); } }catch(e){ /* silent */ } } }

const target=document.getElementById('messages'); if(target){ new MutationObserver(()=>refreshDebug()).observe(target,{childList:true}); } document.addEventListener('visibilitychange',()=>{ if(!document.hidden) refreshDebug() }); })(); </script>

<style>
  /* Debug & Quick‑Sync (Steps 11 & 10) */
  .dbg-toggle{position:fixed;right:16px;bottom:16px;z-index:10000;border-radius:999px;padding:10px 12px}
  .dbg-panel{position:fixed;right:16px;bottom:64px;z-index:10000;width:min(480px,92vw);max-height:60vh;overflow:auto;border:1px solid var(--muted);background:#0b1324;border-radius:14px;box-shadow:0 10px 30px rgba(0,0,0,.35);display:none}
  .dbg-panel header{display:flex;justify-content:space-between;align-items:center;padding:10px 12px;border-bottom:1px solid var(--muted)}
  .dbg-panel pre{margin:0;padding:12px;white-space:pre-wrap}
  .sync-fab{position:fixed;left:16px;bottom:16px;z-index:10000;display:flex;gap:8px}
  .sync-fab .btn{padding:8px 10px}
</style><script>
// Steps 11 & 10 — Debug‑Overlay + Quick‑Sync (robust, selbstverankernd)
(function(){
  // ============ DEBUG OVERLAY ============
  function ensureDebugUI(){
    if(document.getElementById('dbgPre')) return;
    const btn=document.createElement('button'); btn.className='btn dbg-toggle'; btn.textContent='🧪 Debug'; btn.id='dbgToggle';
    const panel=document.createElement('div'); panel.className='dbg-panel'; panel.id='dbgPanel';
    panel.innerHTML=<header><strong>Debug</strong><button class="btn" id="dbgClose">Schließen</button></header><pre id="dbgPre">(leer)</pre>;document.body.append(btn,panel);

} function debugSnapshot(){ const snap={ version:(window.VERSION||'n/a'), now:new Date().toLocaleTimeString(), phase: state?.phase, subphase: state?.subphase, subphaseScore: state?.subphaseScore, trust: state?.trust, interest: state?.interest, closeness: state?.subphaseScore, char: { name: state?.character?.name, maxSensitivity: state?.character?.maxSensitivity, traits: state?.character?.traits }, phaseReason: state?.phaseReason, subphaseReason: state?.subphaseReason, counters: state?.counters, lastPhotoAudit: window.__lastPhotoAudit||null }; return snap; } function refreshDebug(){ const pre=document.getElementById('dbgPre'); if(pre) pre.textContent=JSON.stringify(debugSnapshot(),null,2); } function hookDebug(){ ensureDebugUI(); document.getElementById('dbgToggle')?.addEventListener('click',()=>{ const p=document.getElementById('dbgPanel'); if(!p) return; p.style.display=p.style.display==='block'?'none':'block'; refreshDebug(); }); document.getElementById('dbgClose')?.addEventListener('click',()=>{ const p=document.getElementById('dbgPanel'); if(p) p.style.display='none'; }); // Refresh on chat mutations const msg=document.getElementById('messages'); if(msg){ new MutationObserver(()=>refreshDebug()).observe(msg,{childList:true}); } document.addEventListener('visibilitychange',()=>{ if(!document.hidden) refreshDebug(); }); } // Fotoauswahl‑Audit (falls Funktion existiert) (function hookPhotoAudit(){ const orig=window.selectPhotosForChat; if(typeof orig!=="function") return; window.selectPhotosForChat=function(queryTags){ const ch=state.character; const pr=(window.PHASE_RULES?PHASE_RULES[state.phase]:{})||{}; const sub=(typeof window.currentSubphaseProfile==='function'?currentSubphaseProfile():{}); const maxSens=minSensitivity(ch.maxSensitivity, pr.maxSensitivity||'high'); const maxImgs=Math.max(1, Math.min((ch.traits?.multiImageLimit||3)+(sub.maxImagesDelta||0), pr.maxImages||3, 4)); const relThresh=Math.max(0, Math.min(((ch.traits?.relevanceThreshold||5)/2)+(sub.relevanceThresholdDelta||0),10)); const rows=(state.photos||[]).map(p=>{ const sens=p.sensitivity||computeSensitivity(p.tags); const score=relevanceScore(p.tags,queryTags); const allowed= allowedBySensitivity(sens,maxSens) && score>=relThresh && state.trust>=(p.trust??0); return {name:p.name,sens,score,allowed,tags:p.tags,trustReq:p.trust??0}; }); window.__lastPhotoAudit={ queryTags, maxSens, maxImgs, relThresh, rows }; const chosen = rows.filter(r=>r.allowed).sort((a,b)=>b.score-a.score).slice(0,maxImgs).map(r=> (state.photos||[]).find(p=>p.name===r.name)); return chosen; } })();

// ============ QUICK‑SYNC (ohne Server) ============ const b64 = (s)=> btoa(unescape(encodeURIComponent(s))); const unb64 = (s)=> decodeURIComponent(escape(atob(s))); function makeSyncCode(){ try{ return b64(JSON.stringify(state)) }catch(e){ toast?.('Sync‑Fehler: '+e.message); return '' } } function applySyncCode(code){ try{ const data=JSON.parse(unb64(String(code||'').trim())); Object.assign(state,data); store?.save?.(state); if(typeof renderAll==='function') renderAll(); toast?.('Sync erfolgreich importiert'); }catch(e){ toast?.('Ungültiger Sync‑Code') } } function bindSyncButtons(){ const gen=document.getElementById('genSync'); const imp=document.getElementById('importSync'); if(gen&&!gen._bound){ gen._bound=true; gen.addEventListener('click',()=>{ const code=makeSyncCode(); if(!code) return; navigator.clipboard?.writeText(code).then(()=>toast?.('Sync‑Code in Zwischenablage')).catch(()=>{}); prompt('Sync‑Code (kopieren):', code); }); } if(imp&&!imp._bound){ imp._bound=true; imp.addEventListener('click',()=>{ const code=prompt('Sync‑Code einfügen:'); if(code) applySyncCode(code); }); } } function ensureSyncUI(){ // Versuche, vorhandene Export‑Sektion zu verwenden bindSyncButtons(); if(document.getElementById('genSync') && document.getElementById('importSync')) return; // Sonst: kleines FAB‑Duo unten links if(document.querySelector('.sync-fab')) return; const wrap=document.createElement('div'); wrap.className='sync-fab'; const b1=document.createElement('button'); b1.className='btn'; b1.id='genSync'; b1.textContent='🔗 Sync‑Code'; const b2=document.createElement('button'); b2.className='btn'; b2.id='importSync'; b2.textContent='⬇️ Einfügen'; wrap.append(b1,b2); document.body.appendChild(wrap); bindSyncButtons(); }

function init(){ hookDebug(); ensureDebugUI(); ensureSyncUI(); refreshDebug(); } if(document.readyState==='loading') document.addEventListener('DOMContentLoaded', init); else init(); })(); </script>

<script>
// Erweiterte Phasen-Definition mit Subphasen-Profilen
const PHASE_RULES = {
  intro: {
    thresholds: { trustMin: 0, trustMax: 3, interestMin: 0, interestMax: 5, closenessMin: 0, closenessMax: 3 },
    hysteresis: 1,
    maxSensitivity: "low",
    maxImages: 1,
    reasonTexts: [
      "Wir lernen uns gerade erst kennen.",
      "Ich möchte dich erstmal einschätzen, bevor ich mehr von mir preisgebe."
    ],
    subphases: [
      { id: "intro_cautious", deltaTrust: 0, maxImagesDelta: 0, relevanceThresholdDelta: 2 },
      { id: "intro_opening", deltaTrust: 1, maxImagesDelta: 1, relevanceThresholdDelta: 0 }
    ]
  },
  friendly: {
    thresholds: { trustMin: 4, trustMax: 6, interestMin: 4, interestMax: 7, closenessMin: 3, closenessMax: 6 },
    hysteresis: 1,
    maxSensitivity: "medium",
    maxImages: 2,
    reasonTexts: [
      "Ich fühle mich inzwischen wohler mit dir.",
      "Unsere Gespräche machen Spaß, deshalb bin ich offener."
    ],
    subphases: [
      { id: "friendly_chatty", deltaTrust: 0, maxImagesDelta: 1, relevanceThresholdDelta: -1 },
      { id: "friendly_shared", deltaTrust: 1, maxImagesDelta: 2, relevanceThresholdDelta: -2 }
    ]
  },
  close: {
    thresholds: { trustMin: 7, trustMax: 10, interestMin: 7, interestMax: 10, closenessMin: 7, closenessMax: 10 },
    hysteresis: 1,
    maxSensitivity: "high",
    maxImages: 3,
    reasonTexts: [
      "Ich habe das Gefühl, wir sind uns sehr nah.",
      "Du bedeutest mir viel, deshalb teile ich auch Persönliches."
    ],
    subphases: [
      { id: "close_intimate", deltaTrust: 0, maxImagesDelta: 1, relevanceThresholdDelta: -3 },
      { id: "close_partner", deltaTrust: 2, maxImagesDelta: 2, relevanceThresholdDelta: -4 }
    ]
  }
};
</script><script>
// === Block 1: Erweiterte Phasen-/Subphasen-Struktur (nur Daten, noch keine Logik) ===
(function(){
  // Vereinheitlichte Skalen:
  //  - trust: 0–10 (state.trust)
  //  - interest: 0–100 (state.interest)
  //  - closeness: 0–100 (state.subphaseScore bzw. computeCloseness())
  // Hysterese verhindert Flackern: Wechsel passiert erst, wenn Werte um 'hyst' über die Grenze gehen.

  const MODEL = {
    phases: {
      'Kennenlernen': {
        key: 'Kennenlernen',
        thresholds: { trustMin: 0, trustMax: 3, interestMin: 0, interestMax: 40, closenessMin: 0, closenessMax: 35 },
        hyst: 0.5,
        maxSensitivity: 'low',
        maxImages: 1,
        reasonTexts: [
          'Wir lernen uns gerade erst kennen und ich schaue noch, wie wir harmonieren.',
          'Ich teile erstmal vorsichtig Inhalte, bis ich dich besser einschätzen kann.'
        ],
        subphases: [
          { id: 'kühl',            proactivityDelta:-2, relevanceThresholdDelta:+2, maxImagesDelta:-1, tone:'zurückhaltend' },
          { id: 'aufwärmen',       proactivityDelta: 0, relevanceThresholdDelta:+1, maxImagesDelta: 0, tone:'neutral' }
        ]
      },
      'Vertrauen aufbauen': {
        key: 'Vertrauen aufbauen',
        thresholds: { trustMin: 3.5, trustMax: 6, interestMin: 35, interestMax: 65, closenessMin: 30, closenessMax: 60 },
        hyst: 0.7,
        maxSensitivity: 'medium',
        maxImages: 2,
        reasonTexts: [
          'Ich fühle mich mit dir zunehmend wohler und werde offener.',
          'Unsere Gespräche laufen gut – ich traue mich, mehr zu zeigen.'
        ],
        subphases: [
          { id: 'aufwärmen',       proactivityDelta: 0, relevanceThresholdDelta:+1, maxImagesDelta: 0, tone:'neutral' },
          { id: 'engagiert',       proactivityDelta:+1, relevanceThresholdDelta: 0, maxImagesDelta:+1, tone:'warm' }
        ]
      },
      'Freundschaft': {
        key: 'Freundschaft',
        thresholds: { trustMin: 5.5, trustMax: 7.5, interestMin: 55, interestMax: 80, closenessMin: 55, closenessMax: 80 },
        hyst: 0.8,
        maxSensitivity: 'medium',
        maxImages: 3,
        reasonTexts: [
          'Wir verstehen uns, und ich teile gerne mehr mit dir.',
          'Ich habe das Gefühl, dass ich dir vertrauen kann.'
        ],
        subphases: [
          { id: 'engagiert',       proactivityDelta:+1, relevanceThresholdDelta: 0, maxImagesDelta:+1, tone:'warm' },
          { id: 'vertraut',        proactivityDelta:+2, relevanceThresholdDelta:-1, maxImagesDelta:+1, tone:'sehr-warm' }
        ]
      },
      'Vertraut': {
        key: 'Vertraut',
        thresholds: { trustMin: 7, trustMax: 9, interestMin: 65, interestMax: 90, closenessMin: 70, closenessMax: 90 },
        hyst: 1.0,
        maxSensitivity: 'medium',
        maxImages: 3,
        reasonTexts: [
          'Ich kenne dich inzwischen gut und fühle mich sicher.',
          'Zwischen uns ist Vertrauen gewachsen – ich berücksichtige deine Grenzen bewusst.'
        ],
        subphases: [
          { id: 'vertraut',        proactivityDelta:+2, relevanceThresholdDelta:-1, maxImagesDelta:+1, tone:'sehr-warm' }
        ]
      },
      'Partnerschaft': {
        key: 'Partnerschaft',
        thresholds: { trustMin: 8.5, trustMax: 10, interestMin: 75, interestMax: 100, closenessMin: 80, closenessMax: 100 },
        hyst: 1.2,
        maxSensitivity: 'high',
        maxImages: 4,
        reasonTexts: [
          'Ich empfinde viel Nähe zu dir – darum bin ich sehr aufmerksam und respektvoll.',
          'Ich achte stärker auf sensible Inhalte und frage vorher nach.'
        ],
        subphases: [
          { id: 'vertraut',        proactivityDelta:+2, relevanceThresholdDelta:-1, maxImagesDelta:+1, tone:'sehr-warm' }
        ]
      }
    }
  };

  // Exponieren, ohne bestehende Objekte zu brechen
  window.PHASE_MODEL = MODEL;
  // Kleines Helper für spätere Logik (Block 2)
  window.getPhaseConfig = function(name){ return MODEL.phases[name] || MODEL.phases['Kennenlernen']; };
})();
</script><script>
// === Block 2: Phasenwechsel mit Hysterese + Gründe (Logik, keine Chat-Ausgabe) ===
(function(){
  if(typeof window.PHASE_MODEL!=='object') return;
  const ORDER=['Kennenlernen','Vertrauen aufbauen','Freundschaft','Vertraut','Partnerschaft'];
  const cfgOf=(ph)=> (window.PHASE_MODEL.phases[ph]||window.PHASE_MODEL.phases['Kennenlernen']);
  const clampNum=(n,min,max)=>Math.max(min,Math.min(max,n));
  function margin(ph){ const h=cfgOf(ph).hyst||0.5; return { t:h, i:h*10, c:h*10 }; }

  function nextPhaseByMetrics(cur){
    const trust=state.trust||0, interest=state.interest||0; const close=(state.subphaseScore!=null?state.subphaseScore:0);
    const idx=Math.max(0,ORDER.indexOf(cur)); const curCfg=cfgOf(cur); const m=margin(cur);
    const hi = (trust>=(curCfg.thresholds.trustMax+m.t)) && (interest>=(curCfg.thresholds.interestMax+m.i)) && (close>=(curCfg.thresholds.closenessMax+m.c));
    const lo = (trust<(curCfg.thresholds.trustMin-m.t)) || (interest<(curCfg.thresholds.interestMin-m.i)) || (close<(curCfg.thresholds.closenessMin-m.c));
    if(hi && idx<ORDER.length-1) return ORDER[idx+1];
    if(lo && idx>0) return ORDER[idx-1];
    // sonst: prüfen, ob eine andere Phase besser „passt“ (Klemmfall)
    let best=cur, bestGap=Infinity;
    for(const name of ORDER){ const cf=cfgOf(name); const gap=
      Math.abs(bandGap(trust, cf.thresholds.trustMin, cf.thresholds.trustMax))+
      Math.abs(bandGap(interest, cf.thresholds.interestMin, cf.thresholds.interestMax))+
      Math.abs(bandGap(close, cf.thresholds.closenessMin, cf.thresholds.closenessMax));
      if(gap<bestGap){ best=name; bestGap=gap }
    }
    return best;
  }
  function bandGap(v,min,max){ if(v<min) return v-min; if(v>max) return v-max; return 0 }

  function chooseSubphase(phase){
    const s = (state.subphaseScore!=null?state.subphaseScore:0);
    const cfg = cfgOf(phase);
    const list = (cfg.subphases&&cfg.subphases.length? cfg.subphases : [{id:'aufwärmen'}]);
    // map über relative Position innerhalb des zulässigen Bereichs
    const min=cfg.thresholds.closenessMin, max=cfg.thresholds.closenessMax;
    const rel = clampNum((s-min)/Math.max(1,(max-min)),0,1);
    let picked=list[0].id; if(list.length>1){ picked = rel<0.5? list[0].id : list[list.length-1].id }
    return picked;
  }

  function reasonFor(phase){ const reasons = cfgOf(phase).reasonTexts||[]; const pickOne=(typeof window.pick==='function')? window.pick(reasons) : reasons[0];
    const details = Trust=${(state.trust||0).toFixed(1)}, Interesse=${state.interest||0}, Nähe=${state.subphaseScore||0};
    return (pickOne||'Phasenwechsel gemäß Werten')+
(${details}); }

  // Öffentliche API: ersetzt die bisherige reevaluatePhase sanft
  const _old=window.reevaluatePhase;
  window.reevaluatePhase=function(){
    // 1) ensure closeness & metrics
    if(typeof window.computeCloseness==='function') window.computeCloseness();
    const before=state.phase||ORDER[0];
    const after=nextPhaseByMetrics(before);
    if(after!==before){
      state.phase=after; document.getElementById('phaseLabel')?.textContent=after;
      state._lastPhaseChange = Date.now();
      state.phaseReason = ${before} → ${after}: ${reasonFor(after)};
      if(typeof toast==='function') toast('Phase ➜ '+after);
    }
    // 2) Subphase wählen & begründen
    const sub=chooseSubphase(state.phase);
    if(sub!==state.subphase){ state.subphase=sub; document.getElementById('subphaseLabel')?.textContent=sub; }
    state.subphaseReason = Subphase = ${sub} (Nähe=${state.subphaseScore||0});
    // 3) Speichern & ggf. Charts
    try{ store.save(state) }catch(_){ }
    if(typeof renderCharts==='function') renderCharts();
    // Fallback: alte Logik am Ende, falls vorhanden
    try{ if(typeof _old==='function') { /* noop – alte Funktion übersprungen, um Loop zu vermeiden */ } }catch(_){ }
  };
})();
</script><script>
// === Block 3: Chat‑Einbindung bei Phasenwechsel (freundliche, begründete Systemnachricht) ===
(function(){
  if(typeof window.reevaluatePhase!=='function') return;
  const orig = window.reevaluatePhase;
  const EMO = { 'kühl':'🧊','aufwärmen':'🙂','engagiert':'🤗','vertraut':'❤️' };
  const safe = (s)=>String(s||'');
  function composePhaseMsg(before, after){
    const sub = safe(state.subphase||'aufwärmen');
    const icon = EMO[sub]||'';
    const cfgP = (typeof getPhaseConfig==='function')? getPhaseConfig(after) : (window.PHASE_RULES?.[after]||{});
    const maxSens = cfgP?.maxSensitivity||state.character?.maxSensitivity||'medium';
    const maxImgs = Math.max(1, Math.min((state.character?.traits?.multiImageLimit||3), cfgP?.maxImages||3));
    const reason = safe(state.phaseReason||'');
    const courtesy = (after==='Kennenlernen')? 'Ich taste mich erstmal vorsichtig voran.'
                   : (after==='Vertrauen aufbauen')? 'Ich fühle mich zunehmend wohler mit dir.'
                   : (after==='Freundschaft')? 'Ich erlebe unsere Gespräche als warm und offen.'
                   : (after==='Vertraut')? 'Ich kenne dich gut und achte bewusst auf Grenzen.'
                   : (after==='Partnerschaft')? 'Ich fühle mich dir sehr nah und frage vor sensiblen Inhalten nach.'
                   : '';
    return ${icon} Ich glaube, wir sind jetzt in der Phase **${after}**.
${courtesy} Darum gelten für Bilder: bis **${maxSens}** sensibel und bis zu **${maxImgs}** pro Nachricht.
Wenn du magst, erkläre ich dir gern, **warum**: Tippe „Warum Phase?“.
${reason};
  }
  window.reevaluatePhase = function(){
    const before = state.phase;
    orig();
    const after = state.phase;
    try{
      const now = Date.now();
      const cool = 15000; // 15s Mindestabstand zwischen Systemansagen
      if(after!==before && (now - (state._lastPhaseAnnounceTs||0) > cool)){
        state._lastPhaseAnnounceTs = now;
        const msg = composePhaseMsg(before, after);
        if(typeof post==='function'){ post('ai', msg); }
        if(typeof logMessage==='function'){ logMessage('ai','phase-announce',[after]); }
        try{ store.save(state) }catch(_){ }
      }
    }catch(_){ }
  };
})();
</script><script>
// === Punkt 3: Tooltips für Bildfreigabe/-blockade (aus Foto-Audit) ===
(function(){
  // Hilfsfunktion: Tooltip-Text aus Audit-Eintrag generieren
  function tooltipFromAudit(row){
    const decision = row.allowed ? '✅ Freigegeben' : '⛔ Blockiert';
    const reasons = [];
    reasons.push(Sensibilität: ${row.sens});
    reasons.push(Vertrauen benötigt: ${row.trustReq}, aktuell: ${state.trust||0});
    reasons.push(Relevanz: ${row.score.toFixed(2)} / benötigt: ${state._lastPhotoAudit?.relThresh});
    if(row.overrideOK){
      // Ablaufzeit für Override anzeigen
      const exp = (state._trustOverrides||{})[row.name];
      if(exp){ const dt=new Date(exp); reasons.push(⚠️ Trust-Override aktiv bis ${dt.toLocaleTimeString()}); }
    }
    if(!row.allowed){
      if(!allowedBySensitivity(row.sens, state._lastPhotoAudit?.maxSens)) reasons.push('❌ zu sensibel für aktuelles Level');
      if(row.score < (state._lastPhotoAudit?.relThresh||0)) reasons.push('❌ zu geringe Relevanz');
      const needTrust = (state.trust||0) < row.trustReq && !row.overrideOK; if(needTrust) reasons.push('❌ Vertrauen zu niedrig');
    }
    return ${decision}
${reasons.join('
')};
  }
    return ${decision}
${reasons.join('
')};
  }

  // Hook für Rendering von Chat-Bildern
  const origRender = window.renderMessage;
  window.renderMessage = function(msg){
    const el = origRender? origRender(msg) : null;
    try{
      if(msg && msg.type==='image' && state._lastPhotoAudit && Array.isArray(state._lastPhotoAudit.rows)){
        const row = state._lastPhotoAudit.rows.find(r => r.name === msg.name);
        if(row && el && el.querySelector){
          const img = el.querySelector('img');
          if(img) img.title = tooltipFromAudit(row);
        }
      }
    }catch(e){ console.error(e); }
    return el;
  };

  // Hook für Galerie-Vorschau (falls vorhanden)
  const gal = document.getElementById('gallery');
  if(gal){
    const obs = new MutationObserver(()=>{
      try{
        if(state._lastPhotoAudit && Array.isArray(state._lastPhotoAudit.rows)){
          gal.querySelectorAll('img[data-name]').forEach(img=>{
            const name = img.getAttribute('data-name');
            const row = state._lastPhotoAudit.rows.find(r=>r.name===name);
            if(row) img.title = tooltipFromAudit(row);
          });
        }
      }catch(e){ console.error(e); }
    });
    obs.observe(gal,{childList:true,subtree:true});
  }
})();
</script><style>
  /* Charakter-Editor (runtime, konfliktfrei) */
  .charfab{position:fixed;right:16px;bottom:96px;z-index:10000}
  .modal{position:fixed;inset:0;background:rgba(0,0,0,.5);display:none;align-items:center;justify-content:center;z-index:10001}
  .modal.open{display:flex}
  .modal .card{width:min(760px,96vw);max-height:90vh;overflow:auto;background:#0b1324;border:1px solid var(--muted);border-radius:16px;box-shadow:0 20px 60px rgba(0,0,0,.45)}
  .modal .card header{display:flex;gap:12px;align-items:center;justify-content:space-between;padding:12px 14px;border-bottom:1px solid var(--muted)}
  .modal .card .grid{display:grid;grid-template-columns:1fr 1fr;gap:12px;padding:12px 14px}
  .modal .card .row{display:flex;gap:10px;align-items:center}
  .modal .card label{font-size:.9rem;opacity:.9}
  .modal .card input[type="text"], .modal .card textarea, .modal .card select{width:100%;padding:8px;border:1px solid var(--muted);background:#0f1a2d;color:var(--text);border-radius:10px}
  .modal .card input[type="range"]{width:100%}
  .badge-pill{display:inline-block;padding:3px 8px;border:1px solid var(--muted);border-radius:999px;font-size:.75rem;opacity:.9}
</style><script>
// Charakter-Editor (erweitert) – fügt einen schwebenden Button + Modal hinzu
(function(){
  function ensureUI(){
    if(document.getElementById('charEditFab')) return;
    const fab=document.createElement('button'); fab.className='btn charfab'; fab.id='charEditFab'; fab.textContent='🧩 Charakter-Editor';
    const modal=document.createElement('div'); modal.className='modal'; modal.id='charModal';
    modal.innerHTML=<div class="card" role="dialog" aria-modal="true" aria-labelledby="charTitle">
      <header>
        <strong id="charTitle">Charakter-Einstellungen</strong>
        <div class="row"><span class="badge-pill" id="phaseMeta">Phase: ?</span><span class="badge-pill" id="subphaseMeta">Subphase: ?</span></div>
        <button class="btn" id="charClose">Schließen</button>
      </header>
      <div class="grid">
        <div>
          <label>Name
            <input type="text" id="chName" placeholder="Name" />
          </label>
        </div>
        <div>
          <label>Max. Sensibilität
            <select id="chMaxSens">
              <option value="low">low</option>
              <option value="medium">medium</option>
              <option value="high">high</option>
            </select>
          </label>
        </div>
        <div class="row" style="grid-column:1/3">
          <label style="width:100%">Persona (kurz, Ich-Perspektive)
            <textarea id="chPersona" rows="2" placeholder="z.B. warmherzig, neugierig, humorvoll"></textarea></label>
    </div>
    <div>
      <label>Interessen (Komma-getrennt)
        <input type="text" id="chInterests" placeholder="natur, reisen, kochen" />
      </label>
    </div>
    <div>
      <label>Bild-Policy: max Bilder/Nachricht
        <input type="range" min="1" max="4" step="1" id="trMulti" />
      </label>
      <small class="help">Aktuell: <span id="trMultiVal">3</span></small>
    </div>
    <div>
      <label>Relevanz-Schwelle (0–10)
        <input type="range" min="0" max="10" step="1" id="trRel" />
      </label>
      <small class="help">Aktuell: <span id="trRelVal">5</span></small>
    </div>
    <div>
      <label>Proaktivität (0–10)
        <input type="range" min="0" max="10" step="1" id="trPro" />
      </label>
      <small class="help">Aktuell: <span id="trProVal">5</span></small>
    </div>
    <div>
      <label>Verbosity (1–3)
        <input type="range" min="1" max="3" step="1" id="trVerb" />
      </label>
      <small class="help">Aktuell: <span id="trVerbVal">2</span></small>
    </div>
    <div>
      <label>Direktheit (0–10)
        <input type="range" min="0" max="10" step="1" id="trDir" />
      </label>
      <small class="help">Aktuell: <span id="trDirVal">5</span></small>
    </div>
    <div>
      <label>Formalität (0–10)
        <input type="range" min="0" max="10" step="1" id="trForm" />
      </label>
      <small class="help">Aktuell: <span id="trFormVal">5</span></small>
    </div>
    <div>
      <label>Verspieltheit (0–10)
        <input type="range" min="0" max="10" step="1" id="trPlay" />
      </label>
      <small class="help">Aktuell: <span id="trPlayVal">5</span></small>
    </div>
    <div>
      <label>Empathie‑Bias (−5..+5)
        <input type="range" min="-5" max="5" step="1" id="trEmp" />
      </label>
      <small class="help">Aktuell: <span id="trEmpVal">0</span></small>
    </div>
    <div>
      <label>Safety‑Bias (−5..+5)
        <input type="range" min="-5" max="5" step="1" id="trSafe" />
      </label>
      <small class="help">Aktuell: <span id="trSafeVal">0</span></small>
    </div>
    <div>
      <label>Neugier (0–10)
        <input type="range" min="0" max="10" step="1" id="trCur" />
      </label>
      <small class="help">Aktuell: <span id="trCurVal">5</span></small>
    </div>
    <div>
      <label>Memory‑Bias (0–10)
        <input type="range" min="0" max="10" step="1" id="trMem" />
      </label>
      <small class="help">Aktuell: <span id="trMemVal">5</span></small>
    </div>
    <div style="grid-column:1/3;display:flex;gap:8px;align-items:center;justify-content:space-between">
      <div class="row" style="gap:6px">
        <small>Presets:</small>
        <button class="btn" data-preset="warm">Warm & verspielt</button>
        <button class="btn" data-preset="pro">Sachlich & professionell</button>
        <button class="btn" data-preset="curious">Neugierig & proaktiv</button>
      </div>
      <div class="row" style="gap:8px">
        <button class="btn" id="charSave">Speichern</button>
        <button class="btn" id="charCancel">Abbrechen</button>
      </div>
    </div>
  </div>
</div>;
document.body.append(fab,modal);

}

function openModal(){ document.getElementById('charModal')?.classList.add('open'); } function closeModal(){ document.getElementById('charModal')?.classList.remove('open'); }

function bind(){ const fab=document.getElementById('charEditFab'); const modal=document.getElementById('charModal'); if(!fab||!modal) return; fab.addEventListener('click', ()=>{ fillFromState(); openModal(); }); modal.querySelector('#charClose')?.addEventListener('click', closeModal); modal.querySelector('#charCancel')?.addEventListener('click', closeModal); modal.addEventListener('click', (e)=>{ if(e.target===modal) closeModal(); }); modal.querySelectorAll('input[type="range"]').forEach(r=>{ const out = modal.querySelector('#'+r.id+'Val'); const sync=()=>{ if(out) out.textContent=r.value }; r.addEventListener('input',sync); r.addEventListener('change',sync); sync(); }); modal.querySelector('#charSave')?.addEventListener('click', saveToState); // Presets modal.querySelectorAll('[data-preset]').forEach(btn=>{ btn.addEventListener('click',()=>{ applyPreset(btn.dataset.preset); }); }); }

function fillFromState(){ const c=state.character||{}; const t=c.traits||{}; const $=id=>document.getElementById(id); $('#phaseMeta').textContent='Phase: '+(state.phase||'?'); $('#subphaseMeta').textContent='Subphase: '+(state.subphase||'?'); $('#chName').value=c.name||''; $('#chPersona').value=c.persona||''; $('#chMaxSens').value=c.maxSensitivity||'medium'; $('#chInterests').value=(state.interests||[]).join(', '); $('#trMulti').value=t.multiImageLimit??3; $('#trMultiVal').textContent=t.multiImageLimit??3; $('#trRel').value=t.relevanceThreshold??5; $('#trRelVal').textContent=t.relevanceThreshold??5; $('#trPro').value=t.proactivity??5; $('#trProVal').textContent=t.proactivity??5; $('#trVerb').value=t.verbosity??2; $('#trVerbVal').textContent=t.verbosity??2; $('#trDir').value=t.directness??5; $('#trDirVal').textContent=t.directness??5; $('#trForm').value=t.formality??5; $('#trFormVal').textContent=t.formality??5; $('#trPlay').value=t.playfulness??5; $('#trPlayVal').textContent=t.playfulness??5; $('#trEmp').value=t.empathyBias??0; $('#trEmpVal').textContent=t.empathyBias??0; $('#trSafe').value=t.safetyBias??0; $('#trSafeVal').textContent=t.safetyBias??0; $('#trCur').value=t.curiosity??5; $('#trCurVal').textContent=t.curiosity??5; $('#trMem').value=t.memoryBias??5; $('#trMemVal').textContent=t.memoryBias??5; }

function saveToState(){ const $=id=>document.getElementById(id); state.character=state.character||{ name:'Aurora', maxSensitivity:'medium', traits:{} }; state.character.name=$('#chName').value||state.character.name; state.character.persona=$('#chPersona').value||''; state.character.maxSensitivity=$('#chMaxSens').value||'medium'; const interests=($('#chInterests').value||'').split(',').map(s=>s.trim()).filter(Boolean); if(interests.length) state.interests=[...new Set(interests.map(x=>normalizeTag(x)))]; const tr=state.character.traits||(state.character.traits={}); tr.multiImageLimit=parseInt($('#trMulti').value,10); tr.relevanceThreshold=parseInt($('#trRel').value,10); tr.proactivity=parseInt($('#trPro').value,10); tr.verbosity=parseInt($('#trVerb').value,10); tr.directness=parseInt($('#trDir').value,10); tr.formality=parseInt($('#trForm').value,10); tr.playfulness=parseInt($('#trPlay').value,10); tr.empathyBias=parseInt($('#trEmp').value,10); tr.safetyBias=parseInt($('#trSafe').value,10); tr.curiosity=parseInt($('#trCur').value,10); tr.memoryBias=parseInt($('#trMem').value,10); try{ store.save(state) }catch(){} try{ renderAll() }catch(){} try{ toast('Charakter aktualisiert') }catch(_){} closeModal(); } function applyPreset(key){ const $=id=>document.getElementById(id); const set=(id,val)=>{ const el=$(id); if(!el) return; el.value=val; const out=$(id+'Val'); if(out) out.textContent=val }; if(key==='warm'){ $('#chPersona').value='Ich bin warmherzig, humorvoll und offen.'; $('#chMaxSens').value='medium'; set('trMulti',3); set('trRel',4); set('trPro',7); set('trVerb',3); set('trDir',4); set('trForm',3); set('trPlay',8); set('trEmp',2); set('trSafe',0); set('trCur',6); set('trMem',6); } else if(key==='pro'){ $('#chPersona').value='Ich bin sachlich, strukturiert und respektvoll-distanziert.'; $('#chMaxSens').value='low'; set('trMulti',2); set('trRel',7); set('trPro',3); set('trVerb',2); set('trDir',7); set('trForm',8); set('trPlay',2); set('trEmp',1); set('trSafe',2); set('trCur',4); set('trMem',7); } else if(key==='curious'){ $('#chPersona').value='Ich bin neugierig, engagiert und frage aktiv nach.'; $('#chMaxSens').value='medium'; set('trMulti',4); set('trRel',3); set('trPro',8); set('trVerb',2); set('trDir',5); set('trForm',4); set('trPlay',5); set('trEmp',1); set('trSafe',0); set('trCur',9); set('trMem',5); } }

function init(){ ensureUI(); bind(); } if(document.readyState==='loading') document.addEventListener('DOMContentLoaded', init); else init(); })(); </script>

<script>
// Erweiterte Einstellungen (Phasen-Presets + Körpermerkmale) – runtime injection
(function(){
  function ensurePhaseBaseline(){ if(!window.PHASE_MODEL_BASE && window.PHASE_MODEL){ try{ window.PHASE_MODEL_BASE = JSON.parse(JSON.stringify(window.PHASE_MODEL)); }catch(_){} } }
  function applyPhasePresetRuntime(key){ ensurePhaseBaseline(); if(!window.PHASE_MODEL||!window.PHASE_MODEL_BASE) return; const cur=window.PHASE_MODEL.phases; const base=window.PHASE_MODEL_BASE.phases; const delta = (k)=>{
      if(key==='fast') return (k.endsWith('Min')? -2 : -1);
      if(key==='conservative') return (k.endsWith('Min')? +2 : +1);
      return 0; // balanced
    };
    for(const name in cur){ const t=cur[name].thresholds; const tb=base[name].thresholds; for(const k in t){ const b=tb[k]; const d=delta(k); t[k]= (typeof b==='number')? (b+d) : b; }
      t.trustMin=Math.max(0,Math.min(10,t.trustMin)); t.trustMax=Math.max(t.trustMin,Math.min(10,t.trustMax));
      t.interestMin=Math.max(0,Math.min(100,t.interestMin)); t.interestMax=Math.max(t.interestMin,Math.min(100,t.interestMax));
      t.closenessMin=Math.max(0,Math.min(100,t.closenessMin)); t.closenessMax=Math.max(t.closenessMin,Math.min(100,t.closenessMax));
    }
    try{ store.save(state) }catch(_){ }
    if(typeof reevaluatePhase==='function') reevaluatePhase();
    toast?.('Phasen-Preset angewendet: '+(key==='fast'?'Schnell aufwärmen':key==='conservative'?'Konservativ':'Ausgewogen'));
  }

  function injectAdvancedUI(){
    const grid = document.querySelector('#charModal .card .grid'); if(!grid) return;
    if(document.getElementById('advSettings')) return; // already
    const wrap=document.createElement('div'); wrap.id='advSettings'; wrap.style.gridColumn='1/3'; wrap.style.marginTop='8px'; wrap.style.paddingTop='8px'; wrap.style.borderTop='1px solid var(--muted)';
    wrap.innerHTML=
      <h4 style="margin:6px 0 8px 0">Erweiterte Einstellungen</h4>
      <div class="row" style="gap:6px;flex-wrap:wrap">
        <small>Phasen-Presets:</small>
        <button class="btn" data-phasepreset="fast">Schnell aufwärmen</button>
        <button class="btn" data-phasepreset="balanced">Ausgewogen</button>
        <button class="btn" data-phasepreset="conservative">Konservativ</button>
        <small class="help">Wirkt auf alle Phasen‑Grenzwerte – live.</small>
      </div>
      <div class="grid" style="grid-template-columns:1fr 1fr;gap:12px;margin-top:10px">
        <div>
          <label>Geschlecht / Identität
            <select id="bioGender">
              <option value="weiblich">weiblich</option>
              <option value="männlich">männlich</option>
              <option value="beides">beides</option>
              <option value="divers">divers</option>
              <option value="keine-angabe">keine Angabe</option>
            </select>
          </label>
        </div>
        <div>
          <label>Pronomen
            <input type="text" id="bioPronouns" placeholder="z. B. sie/ihr, er/ihm, they/them"/>
          </label>
        </div>
        <div>
          <label>Größe (cm)
            <input type="text" id="bioHeight" inputmode="numeric" placeholder="z. B. 170"/>
          </label>
        </div>
        <div>
          <label>Statur
            <input type="text" id="bioBuild" placeholder="z. B. schlank, athletisch"/>
          </label>
        </div>
        <div>
          <label>Haarfarbe
            <input type="text" id="bioHair" placeholder="z. B. dunkelbraun"/>
          </label>
        </div>
        <div>
          <label>Augenfarbe
            <input type="text" id="bioEyes" placeholder="z. B. grün"/>
          </label>
        </div>
        <div style="grid-column:1/3">
          <label>Besondere Merkmale (Komma-getrennt)
            <input type="text" id="bioFeatures" placeholder="z. B. Sommersprossen, Tattoo am Unterarm, Narbe an der Augenbraue"/>
          </label>
          <small class="help">Diese Angaben beeinflussen die Selbstbeschreibung und können (optional) als Tags für KI‑eigene Bilder genutzt werden.</small>
        </div>
      </div>;
    grid.appendChild(wrap);

    // Bind phase preset buttons
    wrap.querySelectorAll('[data-phasepreset]')?.forEach(b=>{
      b.addEventListener('click',()=> applyPhasePresetRuntime(b.dataset.phasepreset));
    });
  }

  function fillAdvancedFromState(){
    const c=state.character||{}; const b=c.bio||{}; const $=id=>document.getElementById(id);
    if(!$('#bioGender')) return; // not injected yet
    $('#bioGender').value=b.gender||'keine-angabe';
    $('#bioPronouns').value=b.pronouns||'';
    $('#bioHeight').value=b.heightCm!=null? String(b.heightCm):'';
    $('#bioBuild').value=b.build||'';
    $('#bioHair').value=b.hair||'';
    $('#bioEyes').value=b.eyes||'';
    $('#bioFeatures').value=(b.features||[]).join(', ');
  }
  function saveAdvancedToState(){
    const $=id=>document.getElementById(id);
    if(!$('#bioGender')) return; // not present
    const bio=(state.character.bio=state.character.bio||{});
    bio.gender=$('#bioGender').value||'keine-angabe';
    bio.pronouns=($('#bioPronouns').value||'').trim();
    const cm=parseInt(($('#bioHeight').value||'').replace(/[^0-9]/g,''),10); bio.heightCm=isFinite(cm)?cm:undefined;
    bio.build=($('#bioBuild').value||'').trim();
    bio.hair=($('#bioHair').value||'').trim();
    bio.eyes=($('#bioEyes').value||'').trim();
    const feats=($('#bioFeatures').value||'').split(',').map(s=>s.trim()).filter(Boolean);
    bio.features=feats;
    try{ TagDB.learn(feats.map(normalizeTag)); }catch(_){ }
  }

  function hookOpenAndSave(){
    const fab=document.getElementById('charEditFab');
    const save=document.querySelector('#charModal #charSave');
    if(fab && !fab._advHooked){ fab._advHooked=true; fab.addEventListener('click', ()=>{ setTimeout(()=>{ injectAdvancedUI(); fillAdvancedFromState(); }, 0); }); }
    if(save && !save._advHooked){ save._advHooked=true; save.addEventListener('click', ()=>{ saveAdvancedToState(); }, true); }
  }

  function init(){ injectAdvancedUI(); hookOpenAndSave(); }
  if(document.readyState==='loading') document.addEventListener('DOMContentLoaded', init); else init();
})();
</script><style>
  /* Ersatzbegriffe-Editor */
  .repl-modal{position:fixed;inset:0;background:rgba(0,0,0,.5);display:none;align-items:center;justify-content:center;z-index:10002}
  .repl-modal.open{display:flex}
  .repl-card{width:min(720px,96vw);max-height:90vh;overflow:auto;background:#0b1324;border:1px solid var(--muted);border-radius:16px;box-shadow:0 20px 60px rgba(0,0,0,.45)}
  .repl-card header{display:flex;justify-content:space-between;align-items:center;padding:12px 14px;border-bottom:1px solid var(--muted)}
  .repl-card .body{display:grid;grid-template-columns:1fr 1fr;gap:12px;padding:12px 14px}
  .repl-card textarea{width:100%;min-height:180px;padding:8px;border:1px solid var(--muted);background:#0f1a2d;color:var(--text);border-radius:10px}
  .repl-card input{width:100%;padding:8px;border:1px solid var(--muted);background:#0f1a2d;color:var(--text);border-radius:10px}
  .repl-card footer{display:flex;gap:8px;justify-content:flex-end;padding:12px 14px;border-top:1px solid var(--muted)}
</style><script>
// Ersatzbegriffe-Filter + Editor mit Live‑Vorschau
(function(){
  // ============ STATE & HELPERS ============
  state.filters = state.filters||{}; state.filters.replacements = state.filters.replacements||{};
  function parseMap(text){
    const map={}; (text||'').split(/
+/).forEach(line=>{ const m=line.split('=>'); if(m.length>=2){ const k=m[0].trim().toLowerCase(); const v=m.slice(1).join('=>').trim(); if(k && v) map[k]=v; } }); return map;
  }
  function serializeMap(map){ return Object.entries(map||{}).map(([k,v])=>${k}=>${v}).join('
'); }
  function applyReplacements(str){ try{ const map=state.filters?.replacements||{}; if(!str||!map||!Object.keys(map).length) return str; let out=str; for(const [k,v] of Object.entries(map)){ const re=new RegExp(\b${k.replace(/[.*+?^${}()|[\]\\]/g,'\$&')}\b,'gi'); out=out.replace(re,(m)=>{ // bewahre Groß/Klein grob
          if(m===m.toUpperCase()) return String(v).toUpperCase(); if(m[0]===m[0].toUpperCase()) return String(v).charAt(0).toUpperCase()+String(v).slice(1); return v; }); } return out; }catch(e){ return str } }
  function applyReplacementsOnTags(arr){ try{ const map=state.filters?.replacements||{}; if(!Array.isArray(arr)||!Object.keys(map).length) return arr; return arr.map(t=>{ const k=String(t||'').toLowerCase(); const repl=map[k]; return repl? repl : t; }); }catch(e){ return arr } }

  // ============ EDITOR UI ============
  function ensureReplUI(){
    if(document.getElementById('replOpen')) return; // Button existiert schon
    // Button in den Charakter‑Editor (Erweiterte Einstellungen) integrieren
    const adv=document.getElementById('advSettings');
    if(adv){
      const row=document.createElement('div'); row.className='row'; row.style.cssText='gap:8px;margin-top:8px;flex-wrap:wrap';
      row.innerHTML='<small>Ersatzbegriffe:</small><button class="btn" id="replOpen">Bearbeiten</button><small class="help">Format: alt=>neu (je Zeile). Greift auf Chat, Tags & Erinnerungen.</small>';
      adv.appendChild(row);
    }
    // Modal
    if(!document.getElementById('replModal')){
      const modal=document.createElement('div'); modal.id='replModal'; modal.className='repl-modal';
      modal.innerHTML=<div class="repl-card" role="dialog" aria-modal="true" aria-labelledby="replTitle">
        <header>
          <strong id="replTitle">Ersatzbegriffe</strong>
          <button class="btn" id="replClose">Schließen</button>
        </header>
        <div class="body">
          <div>
            <label>Mapping (alt=>neu je Zeile)
              <textarea id="replText"></textarea></label>
      </div>
      <div>
        <label>Live‑Vorschau: Eingabe
          <input id="replPreviewIn" type="text" placeholder="z. B. schlechtes wort hier" />
        </label>
        <label>Live‑Vorschau: Ergebnis
          <input id="replPreviewOut" type="text" readonly />
        </label>
      </div>
    </div>
    <footer>
      <button class="btn" id="replReset">Zurücksetzen</button>
      <button class="btn" id="replSave">Speichern</button>
    </footer>
  </div>;
  document.body.appendChild(modal);
}

// Bind
const openBtn=document.getElementById('replOpen'); const modal=document.getElementById('replModal');
const closeBtn=document.getElementById('replClose'); const saveBtn=document.getElementById('replSave'); const resetBtn=document.getElementById('replReset');
const txt=document.getElementById('replText'); const pin=document.getElementById('replPreviewIn'); const pout=document.getElementById('replPreviewOut');
function open(){ txt.value=serializeMap(state.filters.replacements||{}); pin.value=''; pout.value=''; modal.classList.add('open'); }
function close(){ modal.classList.remove('open'); }
function syncPreview(){ try{ const tmp=parseMap(txt.value); const bak=state.filters.replacements; state.filters.replacements=tmp; pout.value=applyReplacements(pin.value||''); state.filters.replacements=bak; }catch(_){ pout.value='' } }
openBtn?.addEventListener('click',open);
closeBtn?.addEventListener('click',close);
saveBtn?.addEventListener('click',()=>{ state.filters.replacements=parseMap(txt.value); try{ store.save(state) }catch(_){}; toast?.('Ersatzbegriffe gespeichert'); close(); });
resetBtn?.addEventListener('click',()=>{ txt.value=''; pin.value=''; pout.value=''; });
txt?.addEventListener('input',syncPreview); pin?.addEventListener('input',syncPreview);

}

// ============ HOOKS (post, addMemory, TagDB.learn, Suchen) ============ // Hook post(): ersetze Text & evtl. Alt‑Texte if(typeof window.post==='function'){ const _post=window.post; window.post=function(role,text,imgDataUrls){ const t=applyReplacements(String(text||'')); return _post(role,t,imgDataUrls); }; } // Hook addMemory(): ersetze Titel/Text/Tags if(typeof window.addMemory==='function'){ const _add=window.addMemory; window.addMemory=function(obj){ if(obj){ obj=Object.assign({},obj); if(obj.title) obj.title=applyReplacements(obj.title); if(obj.text) obj.text=applyReplacements(obj.text); if(obj.tags) obj.tags=applyReplacementsOnTags(obj.tags); } return _add(obj); }; } // Hook TagDB.learn(): ersetze Tags if(typeof window.TagDB==='object' && typeof window.TagDB.learn==='function'){ const _learn=window.TagDB.learn.bind(window.TagDB); window.TagDB.learn=function(tags){ const arr=applyReplacementsOnTags(tags||[]); return _learn(arr); }; } // Hook Eingaben (Chat & Suche) function bindInputs(){ const chat=document.getElementById('text'); if(chat && !chat._replBound){ chat._replBound=true; chat.addEventListener('change',()=>{ chat.value=applyReplacements(chat.value) }); } const q1=document.getElementById('photoSearch'); if(q1 && !q1._replBound){ q1._replBound=true; q1.addEventListener('change',()=>{ q1.value=applyReplacements(q1.value) }); } const q2=document.getElementById('memSearch'); if(q2 && !q2._replBound){ q2._replBound=true; q2.addEventListener('change',()=>{ q2.value=applyReplacements(q2.value) }); } }

function init(){ ensureReplUI(); bindInputs(); } if(document.readyState==='loading') document.addEventListener('DOMContentLoaded', init); else init(); })(); </script>

<script>
// Nächster Punkt: Foto‑Auto‑Tagging (offline Heuristik) – Mini‑Schritt
// Erkennt grob: natur/innen/himmel/wasser/gras/haut/selfie/gruppe/tag/nacht/hell/dunkel/farben
(function(){
  function avg(a){return a.reduce((s,x)=>s+x,0)/(a.length||1)}
  function analyzePixels(ctx,w,h){
    const d=ctx.getImageData(0,0,w,h).data; const n=w*h; let r=0,g=0,b=0,bright=0;
    let greenish=0, blueish=0, skyBlue=0, waterBlue=0, grass=0, skin=0, dark=0, light=0;
    for(let i=0;i<d.length;i+=4){ const R=d[i], G=d[i+1], B=d[i+2]; const Y=0.2126*R+0.7152*G+0.0722*B; bright+=Y; r+=R; g+=G; b+=B;
      if(G>R+10 && G>B+10) greenish++; if(B>R+10 && B>G+10) blueish++;
      if(B>150 && G>130 && R<160) skyBlue++; // heller Himmelston
      if(B>120 && G>100 && R<120) waterBlue++;
      if(G>120 && R>70 && B<100) grass++;
      // naive Skindetektion (RGB & YCbCr grob)
      const Cb = 128 - 0.168736*R - 0.331264*G + 0.5*B; const Cr = 128 + 0.5*R - 0.418688*G - 0.081312*B;
      const isSkin = (R>95 && G>40 && B>20 && (Math.max(R,G,B)-Math.min(R,G,B))>15 && Math.abs(R-G)>15 && R>G && R>B) && (Cb>77 && Cb<127 && Cr>133 && Cr<173);
      if(isSkin) skin++;
      if(Y<50) dark++; if(Y>200) light++;
    }
    const p=(x)=>x/(n||1);
    return {
      pGreen:p(greenish), pBlue:p(blueish), pSky:p(skyBlue), pWater:p(waterBlue), pGrass:p(grass), pSkin:p(skin),
      pDark:p(dark), pLight:p(light), avgBright:bright/(n||1), avg:{r:r/(n||1), g:g/(n||1), b:b/(n||1)}
    }
  }
  async function analyzeImageFile(file){
    return new Promise((resolve)=>{
      const img=new Image(); img.onload=()=>{
        const canvas=document.createElement('canvas'); const max=256; const ratio=Math.min(1, max/Math.max(img.width, img.height));
        canvas.width=Math.max(1,Math.round(img.width*ratio)); canvas.height=Math.max(1,Math.round(img.height*ratio));
        const ctx=canvas.getContext('2d'); ctx.drawImage(img,0,0,canvas.width,canvas.height);
        const f=analyzePixels(ctx,canvas.width,canvas.height);
        const tags=new Set();
        const name=(file.name||'').toLowerCase();
        if(/(forest|wald|park|tree|baum|gras|wiese|wander|hike)/.test(name)) tags.add('natur');
        if(/(see|meer|lake|ocean|strand|beach)/.test(name)) tags.add('wasser');
        if(/(sky|himmel|cloud|wolke)/.test(name)) tags.add('himmel');
        if(f.pGrass>0.05 || (f.pGreen>0.35 && f.pBlue<0.25)) tags.add('natur');
        if(f.pSky>0.08) tags.add('himmel');
        if(f.pWater>0.06) tags.add('wasser');
        if(f.pBlue>0.35 && f.pGreen>0.25) tags.add('landschaft');
        if(f.pSkin>0.03) tags.add('person');
        if(f.pSkin>0.12) tags.add('selfie'); // viel Haut → Nahaufnahme
        if(f.pDark>0.4) tags.add('nacht');
        if(f.pLight>0.4) tags.add('tag');
        // Farbakzente
        const {r,g,b}=f.avg; if(r>g+15 && r>b+15) tags.add('warm'); if(b>r+15 && b>g+15) tags.add('kühl');
        resolve({features:f, tags:[...tags]});
      };
      img.onerror=()=>resolve({features:null, tags:[]});
      img.src=URL.createObjectURL(file);
    });
  }

  // Bind an Datei‑Upload im Chat
  function hookChatFile(){ const input=document.getElementById('chatFile'); if(!input || input._autoTagBound) return; input._autoTagBound=true;
    input.addEventListener('change', async ()=>{
      const f=input.files?.[0]; if(!f || !f.type?.startsWith('image/')) return;
      const res=await analyzeImageFile(f);
      if(res.tags.length){ state._lastAutoTags = res.tags; try{ TagDB.learn(res.tags); }catch(_){}
        toast?.('Auto‑Tags: '+res.tags.join(', ')); }
    }); }

  // Wenn Fotos gerendert/hochgeladen: versuche, Auto‑Tags vorzuschlagen im Review‑Flow
  const _tagReview = window.tagReviewFlow; if(typeof _tagReview==='function'){
    window.tagReviewFlow = async function(name,tags,trust,by){ const base=expandTags([...(tags||[]), ...(state._lastAutoTags||[])]); const out=await _tagReview(name,base,trust,by); state._lastAutoTags=[]; return out };
  }

  function init(){ hookChatFile(); }
  if(document.readyState==='loading') document.addEventListener('DOMContentLoaded', init); else init();
})();
</script><script>
// Proaktivitäts-Manager + erweitertes Vertrauenssystem
(function(){
  // ====== Config ======
  const PROACTIVE_RULES={
    baseIdleMs: 45000, // Grundschwelle 45s
    maxPerHour: 4,
    prompts:{
      generic:[
        'Ich bin noch da 🙂 Magst du mir erzählen, was dich heute beschäftigt?',
        'Soll ich dir etwas aus meinen Erinnerungen erzählen?',
        'Ich hätte Lust auf ein kleines Thema – lieber #natur, #reisen oder #musik?'
      ],
      askPhoto:[
        'Hast du ein aktuelles Foto, das zu [heute] passt? Ich kann Tags vorschlagen.',
        'Wenn du magst, schick mir ein Bild zu [lieblingsort] – ich ergänze die Erinnerung dazu.'
      ],
      askMemory:[
        'Ich könnte eine Erinnerung zu [projekt] ergänzen. Möchtest du kurz erzählen?',
        'Sollen wir deine Highlights dieser Woche als kleine Erinnerung speichern?'
      ]
    }
  };

  // ====== Trust Engine ======
  function clamp(n,min,max){ return Math.max(min,Math.min(max,n)); }
  function logTrust(delta, reason){
    state.trustLog = state.trustLog||[];
    state.trust = clamp((state.trust||0)+(delta||0), 0, 10);
    state.trustLog.push({ t:Date.now(), delta, trust:state.trust, reason });
    // kleine Kopplung: Interesse/Nähe bewegen sich leicht mit
    state.interest = clamp((state.interest||0) + Math.round(delta*2), 0, 100);
    state.subphaseScore = clamp((state.subphaseScore||0) + Math.round(delta*2), 0, 100);
    try{ store.save(state) }catch(_){}
    try{ renderCharts?.() }catch(_){}
    try{ document.getElementById('trustLabel')?.textContent = String(state.trust) }catch(_){}
    try{ reevaluatePhase?.() }catch(_){}
  }
  // sanfter Decay alle ~10 min, abgeschwächt durch Nähe
  let _lastDecayTs=Date.now();
  function decayTick(){
    const now=Date.now(); if(now-_lastDecayTs < 10*60*1000) return;
    _lastDecayTs=now; const clos=(state.subphaseScore||0); const damp = clos>70? 0 : clos>40? 0.25 : 0.5;
    if(damp>0){ logTrust(-0.1*damp, 'natürlicher Decay'); }
  }

  // Heuristik: einfache Sentiment-Signale aus User-Text
  function trustFromText(text){
    const t=String(text||'').toLowerCase(); let d=0;
    if(/(danke|cool|super|toll|mag|gefällt|gut gemacht)/.test(t)) d+=0.3;
    if(/(beleidigt|blöd|doof|schlecht|falsch)/.test(t)) d-=0.4;
    return d;
  }

  // Hook: letzte User-Nachricht auswerten
  (function hookUserMsgs(){
    const host=document.getElementById('messages'); if(!host) return;
    new MutationObserver(()=>{
      const last=[...host.querySelectorAll('.msg.me')].at(-1); if(!last) return;
      const txt=last.innerText||''; const d=trustFromText(txt); if(d!==0) logTrust(d, 'Nutzer-Feedback');
      state._lastUserMsgTs = Date.now();
    }).observe(host,{childList:true});
  })();

  // ====== Proaktivität ======
  function canPropose(){
    const tr=state.character?.traits||{};
    const pro=(tr.proactivity??5) + (currentSubphaseProfile?.().proactivityDelta||0);
    if(pro<=2) return false; // sehr zurückhaltend
    const now=Date.now();
    const idleMs = PROACTIVE_RULES.baseIdleMs * (8/(pro+3)); // höhere Proaktivität → kürzere Wartezeit
    if(now - (state._lastUserMsgTs||0) < idleMs) return false;
    // Rate Limit pro Stunde
    const windowStart = now - 3600*1000; state._proposals = (state._proposals||[]).filter(x=>x>windowStart);
    if(state._proposals.length >= PROACTIVE_RULES.maxPerHour) return false;
    return true;
  }
  function pick(arr){ return arr[Math.floor(Math.random()*arr.length)] }
  function propose(){
    const intents=['generic','askPhoto','askMemory'];
    const intent = pick(intents);
    let text = pick(PROACTIVE_RULES.prompts[intent]);
    // einfache Personalisierung über Interessen/Tags
    const it=(state.interests||[])[0]; if(it){ text = text.replace('[heute]', it).replace('[projekt]', it).replace('[lieblingsort]', it); }
    post?.('ai', text);
    state._proposals.push(Date.now());
    // kleine Vertrauensbewegung positiv, wenn nicht zu häufig
    logTrust(+0.1, 'proaktiver Ping');
  }

  function loop(){ try{ decayTick(); if(canPropose()) propose(); }catch(_){} finally{ setTimeout(loop, 15000); } }
  setTimeout(loop, 15000);
})();
</script><script>
// Trust-Override für geblockte Bilder (zusätzliche Auto-Korrektur, nicht-invasiv)
(function(){
  // Überschreibt die aktuelle selectPhotosForChat mit einer Version, die Trust-Overrides respektiert
  const prev = window.selectPhotosForChat;
  if(typeof prev !== 'function') return;
  window.selectPhotosForChat = function(queryTags){
    const ch=state.character||{traits:{}}; const pr=(window.PHASE_RULES?PHASE_RULES[state.phase]:{})||{};
    const sub=(typeof window.currentSubphaseProfile==='function'?currentSubphaseProfile():{});
    const maxSens=minSensitivity(ch.maxSensitivity||'medium', pr.maxSensitivity||'high');
    const maxImgs=Math.max(1, Math.min((ch.traits?.multiImageLimit||3)+(sub.maxImagesDelta||0), pr.maxImages||3, 4));
    const relThresh=Math.max(0, Math.min(((ch.traits?.relevanceThreshold||5)/2)+(sub.relevanceThresholdDelta||0),10));

    const overrides=(state._trustOverrides||{}); const now=Date.now();
    const rows=(state.photos||[]).map(p=>{
      const sens=p.sensitivity||computeSensitivity(p.tags);
      const score=relevanceScore(p.tags,queryTags);
      const overrideOK = overrides[p.name] && overrides[p.name] > now;
      const trustOK = (state.trust||0) >= (p.trust??0) || !!overrideOK;
      const allowed = allowedBySensitivity(sens,maxSens) && score>=relThresh && trustOK;
      return {name:p.name,sens,score,allowed,tags:p.tags,trustReq:p.trust??0, overrideOK,
              reasons:{ sens:!allowedBySensitivity(sens,maxSens), rel:score<relThresh, trust:!trustOK && ((state.trust||0)<(p.trust??0)) } };
    });
    const audit={ queryTags, maxSens, maxImgs, relThresh, rows,
      stats: rows.reduce((acc,r)=>{ if(r.allowed) acc.allowed++; else { acc.blocked++; if(r.reasons.sens) acc.reasons.sens++; if(r.reasons.rel) acc.reasons.rel++; if(r.reasons.trust) acc.reasons.trust++; } return acc },{allowed:0,blocked:0,reasons:{sens:0,rel:0,trust:0}})
    };
    window.__lastPhotoAudit=audit;
    try{ if(typeof policyFeedbackFromAudit==='function') policyFeedbackFromAudit(audit); }catch(_){}
    try{ policyFeedbackTrust(audit); }catch(_){}
    const chosen = rows.filter(r=>r.allowed).sort((a,b)=>b.score-a.score).slice(0,maxImgs).map(r=> (state.photos||[]).find(p=>p.name===r.name));
    return chosen;
  };

  // Zusätzliche Policy nur für Trust-Overrides
  function policyFeedbackTrust(a){
    if(!a||!a.stats) return; const now=Date.now();
    // Prompt nur, wenn Blockaden primär Trust-bedingt sind
    const trustOnly = a.rows.filter(r=>!r.allowed && r.reasons.trust && !r.reasons.sens && !r.reasons.rel)
                            .sort((x,y)=>y.score-x.score).slice(0,3).map(r=>r.name);
    if(!trustOnly.length) return;
    state._trustBlockCount = (state._trustBlockCount||0) + trustOnly.length;
    if(state._trustBlockCount<2) return; // mindestens zwei Fälle ansammeln
    if(now - (state._lastTrustPromptTs||0) < 60000) return; // Cooldown 60s
    state._lastTrustPromptTs=now; state._pendingTrustList=trustOnly; state._pendingTrustConsent=true; state._trustBlockCount=0;
    post?.('ai', Diese Bilder wurden nur wegen Vertrauen blockiert: ${trustOnly.join(', ')}. Soll ich sie **ausnahmsweise** zeigen? (ja/nein));
  }

  // Consent-Handler (falls noch nicht vorhanden)
  if(!window.__trustOverrideObserver){
    const host=document.getElementById('messages'); if(host){
      window.__trustOverrideObserver = new MutationObserver(()=>{
        const last=[...host.querySelectorAll('.msg.me')].at(-1); if(!last) return;
        const txt=(last.innerText||'').trim().toLowerCase();
        if(state._pendingTrustConsent){
          if(txt==='ja' || txt==='yes'){
            const names=state._pendingTrustList||[]; state._trustOverrides=state._trustOverrides||{}; const exp=Date.now()+10*60*1000; // 10 Minuten
            names.forEach(n=> state._trustOverrides[n]=exp);
            try{ store.save(state) }catch(_){}
            post?.('ai','Okay – ich zeige dir diese Bilder einmalig (nächste 10 Minuten) trotz Trust-Anforderung.');
            state._pendingTrustConsent=false; state._pendingTrustList=[];
          } else if(txt==='nein' || txt==='no'){
            post?.('ai','Verstanden – ich respektiere das und zeige sie nicht.');
            state._pendingTrustConsent=false; state._pendingTrustList=[];
          }
        }
      });
      window.__trustOverrideObserver.observe(host,{childList:true});
    }
  }
})();
</script><script>
// Erweiterte Auto-Tag-Erkennung (non-invasive Override per Capture-Listener)
// Fügt stadt/innenraum/essen/haustier/fahrzeug/text + dominante Farben + Stimmung hinzu
(function(){
  function rgb2hsv(r,g,b){ r/=255; g/=255; b/=255; const max=Math.max(r,g,b), min=Math.min(r,g,b); const d=max-min; let h=0; if(d){ if(max===r) h=((g-b)/d)%6; else if(max===g) h=(b-r)/d+2; else h=(r-g)/d+4; h*=60; if(h<0) h+=360; } return {h, s:max?d/max:0, v:max}; }
  function analyzePixels(ctx,w,h){ const d=ctx.getImageData(0,0,w,h).data; const n=w*h; let pGreen=0,pBlue=0,pSky=0,pWater=0,pGrass=0,pSkin=0,pDark=0,pLight=0; let sumY=0,sumS=0,sumV=0; const hueBins=new Array(6).fill(0); let transitions=0,samples=0; for(let y=0;y<h;y+=2){ let lastL=null; for(let x=0;x<w;x+=2){ const i=(y*w+x)*4; const R=d[i],G=d[i+1],B=d[i+2]; const Y=0.2126*R+0.7152*G+0.0722*B; const {h:S1,s:S2,v:V2}=rgb2hsv(R,G,B); sumY+=Y; sumS+=S2; sumV+=V2; if(G>R+10&&G>B+10) pGreen++; if(B>R+10&&B>G+10) pBlue++; if(B>150&&G>130&&R<160) pSky++; if(B>120&&G>100&&R<120) pWater++; if(G>120&&R>70&&B<100) pGrass++; const Cb=128-0.168736*R-0.331264*G+0.5*B; const Cr=128+0.5*R-0.418688*G-0.081312*B; const isSkin=(R>95&&G>40&&B>20&&(Math.max(R,G,B)-Math.min(R,G,B))>15&&Math.abs(R-G)>15&&R>G&&R>B)&&(Cb>77&&Cb<127&&Cr>133&&Cr<173); if(isSkin) pSkin++; if(Y<50) pDark++; if(Y>200) pLight++; let bin=0; if(S1>=0&&S1<30)bin=0; else if(S1<90)bin=1; else if(S1<150)bin=2; else if(S1<210)bin=3; else if(S1<270)bin=4; else bin=5; hueBins[bin]++; const L=Y; if(lastL!=null && Math.abs(L-lastL)>35) transitions++; lastL=L; samples++; } } const p=(x)=>x/(n||1); return { pGreen:p(pGreen),pBlue:p(pBlue),pSky:p(pSky),pWater:p(pWater),pGrass:p(pGrass),pSkin:p(pSkin), pDark:p(pDark),pLight:p(pLight), avgBright:sumY/(n||1), avgSat:sumS/((w*h)||1), avgVal:sumV/((w*h)||1), hueBins:hueBins.map(v=>v/(((w*h)/4)||1)), edgeRatio:transitions/Math.max(1,samples) }; }
  async function enhancedAnalyze(file){ return new Promise((resolve)=>{ const img=new Image(); img.onload=()=>{ const canvas=document.createElement('canvas'); const max=256; const r=Math.min(1,max/Math.max(img.width,img.height)); canvas.width=Math.max(1,Math.round(img.width*r)); canvas.height=Math.max(1,Math.round(img.height*r)); const ctx=canvas.getContext('2d'); ctx.drawImage(img,0,0,canvas.width,canvas.height); const f=analyzePixels(ctx,canvas.width,canvas.height); const tags=new Set(); const nm=(file.name||'').toLowerCase(); const has=(...ws)=>ws.some(w=>nm.includes(w)); if(has('forest','wald','park','tree','baum','gras','wiese','wander','hike')) tags.add('natur'); if(has('see','meer','lake','ocean','strand','beach','fluss','river')) tags.add('wasser'); if(has('sky','himmel','cloud','wolke')) tags.add('himmel'); if(has('city','stadt','urban','street','strasse','skyline','building','gebäude','architektur')) tags.add('stadt'); if(has('indoor','innen','room','zimmer','kitchen','küche','living','wohnzimmer','office','büro','bath','bad','schlafzimmer','bedroom')) tags.add('innenraum'); if(has('food','essen','meal','pizza','pasta','burger','cake','kuchen','dinner','lunch','frühstück','sushi','steak','salat','salad')) tags.add('essen'); if(has('cat','dog','hund','katze','puppy','kitten','hamster','rabbit','kaninchen')) tags.add('haustier'); if(has('auto','car','bike','bicycle','fahrrad','motorrad','motorcycle','bus','zug','train','plane','flugzeug','boot','schiff')) tags.add('fahrzeug'); if(f.pGrass>0.05||(f.pGreen>0.35&&f.pBlue<0.25)) tags.add('natur'); if(f.pSky>0.08) tags.add('himmel'); if(f.pWater>0.06) tags.add('wasser'); if(f.pBlue>0.35&&f.pGreen>0.25) tags.add('landschaft'); if(f.pSkin>0.03) tags.add('person'); if(f.pSkin>0.12) tags.add('selfie'); if(f.pDark>0.4) tags.add('nacht'); if(f.pLight>0.4) tags.add('tag'); if(!tags.has('innenraum')){ const warmish=(f.hueBins[0]+f.hueBins[1])>0.45; if(f.pSky<0.02&&f.pGrass<0.02&&warmish&&f.avgBright>90&&f.avgBright<200) tags.add('innenraum'); } if(f.edgeRatio>0.22 && (f.pLight+f.pDark)>0.55) tags.add('text'); const [rBin,yBin,gBin,cBin,bBin,mBin]=f.hueBins; const hueMap=[['rot',rBin],['gelb',yBin],['grün',gBin],['cyan',cBin],['blau',bBin],['magenta',mBin]]; const top=hueMap.sort((a,b)=>b[1]-a[1])[0]; if(top && top[1]>0.30){ const color=top[0]; if(['rot','grün','blau','gelb'].includes(color)) tags.add(color); } if(f.avgSat>0.45 && f.avgBright>140/255) tags.add('lebhaft'); else if(f.avgSat<0.18 && f.avgBright>90/255 && f.avgBright<170/255) tags.add('ruhig'); else if(f.pDark>0.6) tags.add('düster'); resolve({features:f, tags:[...tags]}); }; img.onerror=()=>resolve({features:null,tags:[]}); img.src=URL.createObjectURL(file); }); }
  function attachCapture(){ const input=document.getElementById('chatFile'); if(!input || input._enhancedCapture) return; input._enhancedCapture=true; input.addEventListener('change', async (e)=>{ const f=input.files?.[0]; if(!f || !f.type?.startsWith('image/')) return; // stop andere Listener (vermeidet doppelte Auto-Tags)
      if(e && e.stopImmediatePropagation){ e.stopImmediatePropagation(); e.stopPropagation(); }
      const res=await enhancedAnalyze(f); if(res.tags.length){ state._lastAutoTags=res.tags; try{ TagDB.learn(res.tags); }catch(_){} toast?.('Auto-Tags (erweitert): '+res.tags.join(', ')); } }, true); }
  function init(){ attachCapture(); }
  if(document.readyState==='loading') document.addEventListener('DOMContentLoaded', init); else init();
})();
</script><style>
  /* Tag-Review Modal */
  .tagrev-modal{position:fixed;inset:0;background:rgba(0,0,0,.55);display:none;align-items:center;justify-content:center;z-index:10003}
  .tagrev-modal.open{display:flex}
  .tagrev-card{width:min(720px,96vw);max-height:90vh;overflow:auto;background:#0b1324;border:1px solid var(--muted);border-radius:16px;box-shadow:0 20px 60px rgba(0,0,0,.45)}
  .tagrev-card header{display:flex;justify-content:space-between;align-items:center;padding:12px 14px;border-bottom:1px solid var(--muted)}
  .tagrev-card .body{padding:12px 14px;display:grid;grid-template-columns:1fr;gap:10px}
  .taglist{display:grid;grid-template-columns:repeat(2,minmax(0,1fr));gap:8px}
  .tagitem{display:flex;align-items:center;gap:8px;border:1px solid var(--muted);border-radius:10px;padding:6px 8px}
  .tagitem small{opacity:.8}
  .tagitem .reason{margin-left:auto;font-size:.75rem;opacity:.7}
  .tagrev-card footer{display:flex;gap:8px;justify-content:flex-end;padding:12px 14px;border-top:1px solid var(--muted)}
  .tagpill{display:inline-block;border:1px solid var(--muted);border-radius:999px;padding:2px 8px;font-size:.8rem;margin-right:6px}
</style><script>
// Tag-Review UI (Checkboxen + Gründe) – greift tagReviewFlow auf
(function(){
  function ensureUI(){ if(document.getElementById('tagRevModal')) return; const m=document.createElement('div'); m.id='tagRevModal'; m.className='tagrev-modal'; m.innerHTML=
    <div class="tagrev-card" role="dialog" aria-modal="true" aria-labelledby="tagRevTitle">
      <header>
        <div>
          <strong id="tagRevTitle">Tags prüfen</strong>
          <div id="tagRevMeta" style="opacity:.8;font-size:.85rem"></div>
        </div>
        <button class="btn" id="tagRevClose">Schließen</button>
      </header>
      <div class="body">
        <div class="row" style="gap:8px;flex-wrap:wrap">
          <button class="btn" id="tagAllOn">Alle an</button>
          <button class="btn" id="tagAllOff">Alle aus</button>
          <button class="btn" id="tagSafeOnly">Nur sichere</button>
        </div>
        <div class="taglist" id="tagRevList"></div>
      </div>
      <footer>
        <button class="btn" id="tagRevSave">Übernehmen</button>
      </footer>
    </div>; document.body.appendChild(m); }

  function open(name,tags,sourceMap){ ensureUI(); const m=document.getElementById('tagRevModal'); const list=document.getElementById('tagRevList'); const meta=document.getElementById('tagRevMeta'); meta.textContent = name? für: ${name} : '';
    list.innerHTML=''; const safeSet=new Set(['natur','landschaft','himmel','tag','ruhig','blau','grün','gelb','stadt','innenraum','essen','haustier','fahrzeug','text']);
    const uniq=[...new Set((tags||[]).map(t=>String(t).trim()).filter(Boolean))];
    uniq.forEach(t=>{ const row=document.createElement('label'); row.className='tagitem'; const id='tagrev_'+t; const chk=document.createElement('input'); chk.type='checkbox'; chk.id=id; chk.checked=true; chk.dataset.tag=t; row.appendChild(chk);
      const span=document.createElement('span'); span.textContent=t; span.className='tagpill'; row.appendChild(span);
      const r=document.createElement('small'); r.className='reason'; r.textContent = sourceMap[t]||'Benutzer'; row.appendChild(r);
      if(!safeSet.has(t)) row.style.borderColor='rgba(255,128,0,.5)';
      list.appendChild(row);
    });
    const api={
      all(on){ list.querySelectorAll('input[type="checkbox"]').forEach(c=>c.checked=!!on); },
      safe(){ list.querySelectorAll('input[type="checkbox"]').forEach(c=>{ const t=c.dataset.tag; c.checked = safeSet.has(t); }); },
      values(){ return [...list.querySelectorAll('input[type="checkbox"]')].filter(c=>c.checked).map(c=>c.dataset.tag); }
    };
    document.getElementById('tagAllOn').onclick=()=>api.all(true);
    document.getElementById('tagAllOff').onclick=()=>api.all(false);
    document.getElementById('tagSafeOnly').onclick=()=>api.safe();
    m.classList.add('open');
    return new Promise(resolve=>{
      const close=()=>{ m.classList.remove('open'); cleanup(); };
      const cleanup=()=>{ document.getElementById('tagRevSave').onclick=null; document.getElementById('tagRevClose').onclick=null; };
      document.getElementById('tagRevClose').onclick=()=>{ resolve(null); close(); };
      document.getElementById('tagRevSave').onclick=()=>{ resolve(api.values()); close(); };
    });
  }

  // Wrapper um vorhandenes tagReviewFlow (falls vorhanden), sonst Basis-Implementierung
  const prev=window.tagReviewFlow;
  window.tagReviewFlow = async function(name,tags,trust,by){
    try{
      const auto = new Set(state._lastAutoTags||[]);
      const src={}; (tags||[]).forEach(t=>{ src[t]= auto.has(t)? 'Auto' : (by||'Benutzer'); });
      const picked = await open(name,tags,src);
      if(picked && picked.length){ return picked } // UI-Auswahl
      // Abbruch → fallback auf vorherige Logik oder tags unverändert
      return typeof prev==='function'? prev(name,tags,trust,by) : (tags||[]);
    }catch(e){ return typeof prev==='function'? prev(name,tags,trust,by) : (tags||[]); }
  };

  function init(){ ensureUI(); }
  if(document.readyState==='loading') document.addEventListener('DOMContentLoaded', init); else init();
})();
</script><style>
  /* Export-Center */
  .export-fab{position:fixed;left:16px;bottom:66px;z-index:10000}
  .export-modal{position:fixed;inset:0;background:rgba(0,0,0,.55);display:none;align-items:center;justify-content:center;z-index:10004}
  .export-modal.open{display:flex}
  .export-card{width:min(760px,96vw);max-height:90vh;overflow:auto;background:#0b1324;border:1px solid var(--muted);border-radius:16px;box-shadow:0 20px 60px rgba(0,0,0,.45)}
  .export-card header{display:flex;justify-content:space-between;align-items:center;padding:12px 14px;border-bottom:1px solid var(--muted)}
  .export-card .body{padding:12px 14px;display:grid;grid-template-columns:1fr 1fr;gap:12px}
  .export-card footer{display:flex;gap:8px;justify-content:flex-end;padding:12px 14px;border-top:1px solid var(--muted)}
  .export-card input[type="text"], .export-card textarea, .export-card select{width:100%;padding:8px;border:1px solid var(--muted);background:#0f1a2d;color:var(--text);border-radius:10px}
</style><script>
// Export-Center: JSON/CSV/HTML – Import mit Merge/Überschreiben
(function(){
  function ensureUI(){ if(document.getElementById('exportFab')) return;
    const fab=document.createElement('button'); fab.className='btn export-fab'; fab.id='exportFab'; fab.textContent='📦 Export';
    const modal=document.createElement('div'); modal.className='export-modal'; modal.id='exportModal';
    modal.innerHTML=<div class="export-card" role="dialog" aria-modal="true" aria-labelledby="expTitle">
      <header>
        <strong id="expTitle">Export / Import</strong>
        <button class="btn" id="expClose">Schließen</button>
      </header>
      <div class="body">
        <div>
          <label>Tag-Filter (optional)
            <input type="text" id="expTags" placeholder="z. B. natur, stadt"/>
          </label>
          <small class="help">Nur Elemente mit mindestens einem dieser Tags.</small>
        </div>
        <div>
          <label>Nur sichere Inhalte
            <select id="expSafety">
              <option value="off">nein – alles zulassen</option>
              <option value="phase">gemäß aktueller Phase</option>
            </select>
          </label>
        </div>
        <div>
          <label><input type="checkbox" id="expIncludeImages"/> Bilder als Data-URL einbetten</label>
        </div>
        <div>
          <label><input type="checkbox" id="expStripSensitive"/> Sensible Felder aus Erinnerungen entfernen</label>
          <small class="help">z. B. hohe Trust-Anforderung, interne IDs.</small>
        </div>
        <div style="grid-column:1/3">
          <label>Dateiname (ohne Endung)
            <input type="text" id="expFilename" placeholder="badchat_export"/>
          </label>
        </div>
        <div style="grid-column:1/3;display:flex;gap:8px;flex-wrap:wrap">
          <button class="btn" id="btnExportJSON">Export JSON</button>
          <button class="btn" id="btnExportCSV">Export CSV (Erinnerungen)</button>
          <button class="btn" id="btnExportHTML">Export HTML Galerie</button>
          <button class="btn" id="btnImport">Import JSON</button>
        </div>
      </div>
      <footer>
        <small class="help">Export erfolgt lokal im Browser. Import fragt, ob gemerged oder überschrieben wird.</small>
      </footer>
    </div>;
    document.body.append(fab,modal);
  }
  function openModal(){ document.getElementById('exportModal')?.classList.add('open'); }
  function closeModal(){ document.getElementById('exportModal')?.classList.remove('open'); }

  function bind(){
    const fab=document.getElementById('exportFab'); const modal=document.getElementById('exportModal');
    fab?.addEventListener('click', ()=>{ fillDefaults(); openModal(); });
    modal?.querySelector('#expClose')?.addEventListener('click', closeModal);
    modal?.addEventListener('click', (e)=>{ if(e.target===modal) closeModal(); });

    document.getElementById('btnExportJSON')?.addEventListener('click', doExportJSON);
    document.getElementById('btnExportCSV')?.addEventListener('click', doExportCSV);
    document.getElementById('btnExportHTML')?.addEventListener('click', doExportHTML);
    document.getElementById('btnImport')?.addEventListener('click', doImportJSON);
  }

  function fillDefaults(){ const f=document.getElementById('expFilename'); if(f && !f.value){ const d=new Date(); const stamp=d.toISOString().replace(/[:T]/g,'-').slice(0,16); f.value = badchat_export_${stamp}; } }
  function dl(name, blob){ const a=document.createElement('a'); a.href=URL.createObjectURL(blob); a.download=name; document.body.appendChild(a); a.click(); setTimeout(()=>{ URL.revokeObjectURL(a.href); a.remove(); }, 1000); }

  function parseTagsInput(){ const raw=(document.getElementById('expTags')?.value||''); return raw.split(',').map(s=>normalizeTag(s.trim())).filter(Boolean); }
  function allowByPhase(photo){ const ch=state.character||{}; const pr=(window.PHASE_RULES?PHASE_RULES[state.phase]:{})||{}; const maxSens=minSensitivity(ch.maxSensitivity||'medium', pr.maxSensitivity||'high'); const sens=photo.sensitivity||computeSensitivity(photo.tags); return allowedBySensitivity(sens, maxSens) && (state.trust||0) >= (photo.trust??0); }
  function filterByTags(items){ const want=parseTagsInput(); if(!want.length) return items; return items.filter(it=> (it.tags||[]).some(t=> want.includes(normalizeTag(t)) )); }

  function buildExportPayload(includeImages, stripSensitive){
    const safety=document.getElementById('expSafety')?.value||'off';
    const photos = filterByTags((state.photos||[]).filter(p=> safety==='off' ? true : allowByPhase(p)) ).map(p=>({
      name:p.name, tags:p.tags, trust:p.trust||0, sensitivity:p.sensitivity||computeSensitivity(p.tags), by:p.by||'ai',
      data: includeImages? (p.dataUrl||null) : undefined
    }));
    const memories = filterByTags((state.memories||[])).map(m=>{
      const o={ id:m.id, title:m.title, text:m.text, tags:m.tags, trust:m.trust||0, importance:m.importance||1, _ts:m._ts||Date.now() };
      if(stripSensitive){ delete o.id; if(o.trust>7) o.trust=7; }
      return o;
    });
    return { version: (window.VERSION||'1.0'), exportedAt: new Date().toISOString(),
      character:{ name:state.character?.name, persona:state.character?.persona, bio:state.character?.bio, traits:state.character?.traits, maxSensitivity:state.character?.maxSensitivity },
      phase: state.phase, trust: state.trust, interest: state.interest, closeness: state.subphaseScore,
      photos, memories };
  }

  function doExportJSON(){ const name=(document.getElementById('expFilename')?.value||'badchat_export')+'.json'; const includeImages=document.getElementById('expIncludeImages')?.checked; const stripSensitive=document.getElementById('expStripSensitive')?.checked; const payload=buildExportPayload(includeImages, stripSensitive); const blob=new Blob([JSON.stringify(payload,null,2)],{type:'application/json'}); dl(name, blob); toast?.('JSON exportiert'); }

  function doExportCSV(){
    const items = filterByTags(state.memories||[]);
    const rows = [['title','text','tags','trust','importance','timestamp']].concat(items.map(m=>[
      (m.title||'').replace(/\"/g,'"'), (m.text||'').replace(/\"/g,'"'), (m.tags||[]).join('|'), m.trust||0, m.importance||1, m._ts||''
    ]));
    const csv = rows.map(r=> r.map(v=> '"'+String(v).replace(/"/g,'"')+'"').join(',') ).join('
');
    const name=(document.getElementById('expFilename')?.value||'badchat_export')+'.csv'; dl(name, new Blob([csv],{type:'text/csv'})); toast?.('CSV exportiert');
  }

  function doExportHTML(){
    const data=buildExportPayload(true, false); // immer mit Bildern
    const html = <!doctype html><html><head><meta charset="utf-8"><title>BadChat Export</title>
      <style>body{font-family:system-ui,Segoe UI,Roboto,Helvetica,Arial,sans-serif;background:#0b1324;color:#e7ecf4;padding:20px}
      .grid{display:grid;grid-template-columns:repeat(auto-fill,minmax(180px,1fr));gap:10px}
      .card{border:1px solid #2a3550;border-radius:12px;padding:10px}
      img{max-width:100%;border-radius:8px;display:block}
      small{opacity:.8}
      </style></head><body><h1>BadChat Export</h1>
  <p><small>Charakter: ${escapeHtml(data.character?.name||'')} · Phase: ${escapeHtml(String(data.phase||''))} · Trust: ${escapeHtml(String(data.trust||0))}</small></p>
  <h2>Fotos</h2>
  <div class="grid">${(data.photos||[]).map(p=><div class="card"><img src="${p.data||''}" alt="${escapeHtml(p.name)}"/><div><strong>${escapeHtml(p.name)}</strong><br/><small>${(p.tags||[]).map(t=>'#'+escapeHtml(t)).join(' ')}</small></div></div>).join('')}</div>
  <h2>Erinnerungen</h2>
  <div>${(data.memories||[]).map(m=><div class="card"><strong>${escapeHtml(m.title||'')}</strong><br/><small>${new Date(m._ts||Date.now()).toLocaleString()}</small><p>${escapeHtml(m.text||'')}</p><small>${(m.tags||[]).map(t=>'#'+escapeHtml(t)).join(' ')}</small></div>).join('')}</div>
  </body></html>;
const name=(document.getElementById('expFilename')?.value||'badchat_export')+'.html'; dl(name, new Blob([html],{type:'text/html'})); toast?.('HTML exportiert');

}

function escapeHtml(s){ return String(s||'').replace(/[&<>"']/g,(c)=>({"&":"&","<":"<",">":">",""":""","'":"'"}[c])); }

async function doImportJSON(){ try{ const file=await pickFile(); if(!file) return; const text=await file.text(); const data=JSON.parse(text); const mode = prompt('Import-Modus: "merge" (zusammenführen) oder "overwrite" (überschreiben)?','merge'); if(!mode) return; if(mode==='overwrite'){ // Ersetze selektiv Kernbereiche state.character = data.character||state.character; state.phase=data.phase||state.phase; state.trust=data.trust??state.trust; state.interest=data.interest??state.interest; state.subphaseScore=data.closeness??state.subphaseScore; state.photos = data.photos||[]; state.memories = data.memories||[]; } else { // Merge: Fotos nach name, Erinnerungen nach id+title const pIndex=new Map((state.photos||[]).map(p=>[p.name,p])); (data.photos||[]).forEach(p=>{ if(!pIndex.has(p.name)) (state.photos=state.photos||[]).push(p); }); const mIndex=new Map((state.memories||[]).map(m=>[(m.id||m.title||Math.random()+''),m])); (data.memories||[]).forEach(m=>{ const key=(m.id||m.title||''); if(!mIndex.has(key)) (state.memories=state.memories||[]).push(m); }); } try{ store.save(state) }catch(){ } try{ renderAll() }catch(){ } toast?.('Import abgeschlossen'); }catch(e){ toast?.('Import fehlgeschlagen: '+(e?.message||e)); } }

function pickFile(){ return new Promise((resolve)=>{ const inp=document.createElement('input'); inp.type='file'; inp.accept='.json,application/json'; inp.onchange=()=> resolve(inp.files?.[0]); inp.click(); }); }

function init(){ ensureUI(); bind(); } if(document.readyState==='loading') document.addEventListener('DOMContentLoaded', init); else init(); })(); </script>





<html lang="de">  
<head>  
  <meta charset="utf-8" />  
  <meta name="viewport" content="width=device-width, initial-scale=1" />  
  <title>BadChat – Single‑File App (v7: Kontext, Lernen, Beziehungen, Interview)</title>  
  <style>  
    :root{ --bg:#0b0f14;--panel:#111826;--muted:#24324a;--text:#e6edf6;--sub:#a9b4c2;--acc:#60a5fa;--ok:#10b981;--warn:#f59e0b;--err:#ef4444; --r:18px;--shadow:0 10px 30px rgba(0,0,0,.35) }  
    *{box-sizing:border-box} html,body{height:100%} body{margin:0;background:linear-gradient(180deg,#0b0f14,#0b0f14 60%,#0e1522);color:var(--text);font:16px/1.4 system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,"Helvetica Neue",Arial}  
    a{color:var(--acc)} .app{max-width:1200px;margin-inline:auto;padding:24px;display:grid;gap:16px}  
    header{display:flex;align-items:center;gap:16px} header .logo{width:40px;height:40px;border-radius:12px;background:radial-gradient(90% 90% at 30% 30%,#7dd3fc,transparent 60%),linear-gradient(135deg,#1d4ed8,#9333ea);box-shadow:var(--shadow)} h1{font-size:clamp(18px,2.4vw,28px);margin:0}  
    .tabs{display:flex;gap:8px;flex-wrap:wrap} .tab-btn{padding:10px 14px;border:1px solid var(--muted);background:linear-gradient(180deg,#122036,#0f1930);border-radius:999px;color:var(--text);cursor:pointer}  
    .tab-btn[aria-selected="true"]{background:linear-gradient(180deg,#1f2f4d,#162742);border-color:var(--acc);box-shadow:0 0 0 2px color-mix(in srgb,var(--acc),transparent 80%)}  
    .grid{display:grid;gap:16px} .panel{background:linear-gradient(180deg,#111826,#0f172a);border:1px solid var(--muted);border-radius:20px;padding:16px;box-shadow:var(--shadow)} .row{display:flex;gap:12px;align-items:center} .grow{flex:1}  
    .badge{display:inline-flex;align-items:center;gap:6px;padding:.35rem .6rem;border-radius:999px;border:1px solid var(--muted);background:#0d1524;color:var(--sub);font-size:.85rem}  
    small,.help{color:var(--sub)}  
    .chat{display:grid;grid-template-rows:auto 1fr auto;gap:12px;height:560px} .messages{overflow:auto;padding:8px;background:#0c1321;border-radius:14px;border:1px solid var(--muted)}  
    .msg{max-width:min(76%,720px);padding:10px 12px;margin:8px;border-radius:14px;border:1px solid var(--muted)} .me{margin-left:auto;background:#0f1b2f} .ai{background:#0f1f38}  
    .meta{font-size:.78rem;color:var(--sub)} .msg img{display:block;max-width:100%;height:auto;border-radius:12px;margin-top:6px;border:1px solid var(--muted)}  
    .composer{display:flex;gap:8px;align-items:center;flex-wrap:wrap} .composer input[type="text"],.composer textarea{flex:1;min-height:44px;border-radius:12px;border:1px solid var(--muted);background:#0c1526;color:var(--text);padding:12px}  
    .btn{border:1px solid var(--muted);background:#0f1a2d;color:var(--text);padding:10px 14px;border-radius:12px;cursor:pointer} .btn.acc{border-color:var(--acc);background:#0f223e} .btn.ghost{background:#0c1526}  
    .file-chip{font-size:.8rem;border:1px dashed var(--muted);padding:6px 8px;border-radius:999px}  
    .stats{display:grid;grid-template-columns:repeat(auto-fit,minmax(180px,1fr));gap:12px} .stat{padding:12px;border:1px solid var(--muted);border-radius:14px;background:#0d182a} .range{width:100%}  
    .gallery{display:grid;grid-template-columns:repeat(auto-fill,minmax(140px,1fr));gap:10px} .thumb{border:1px dashed var(--muted);border-radius:12px;display:grid;place-items:center;aspect-ratio:1/1;background:#0c1423;color:var(--sub);padding:8px}  
    .thumb img{width:100%;height:100%;object-fit:cover;border-radius:10px}  
    .tag{display:inline-flex;align-items:center;gap:6px;border:1px solid var(--muted);padding:4px 8px;border-radius:999px;margin:4px;background:#0c1526;color:var(--sub);font-size:.8rem}  
    .kpi{display:flex;gap:10px;flex-wrap:wrap} .pill{padding:4px 8px;border-radius:999px;background:#0f1d33;border:1px solid var(--muted)}  
    @media (min-width:960px){.layout{display:grid;grid-template-columns:1.2fr .8fr;gap:16px}}  
  </style>  
</head>  
<body>  
  <div class="app">  
    <header>  
      <div class="logo" aria-hidden="true"></div>  
      <div>  
        <h1>BadChat · HTML‑App</h1>  
        <small>v7: Langer Kontext · Lernende Tag‑DB · Erinnerungen (Ich‑Perspektive) · Beziehungen · Foto‑Interview</small>  
      </div>  
    </header><nav class="tabs" role="tablist" aria-label="Bereiche">  
  <button class="tab-btn" role="tab" aria-selected="true" data-tab="chat">Chat</button>  
  <button class="tab-btn" role="tab" aria-selected="false" data-tab="char">Charakter‑Editor</button>  
  <button class="tab-btn" role="tab" aria-selected="false" data-tab="settings">Einstellungen</button>  
  <button class="tab-btn" role="tab" aria-selected="false" data-tab="memories">Erinnerungen</button>  
  <button class="tab-btn" role="tab" aria-selected="false" data-tab="photos">Fotos</button>  
  <button class="tab-btn" role="tab" aria-selected="false" data-tab="tags">Tag‑Editor</button>  
  <button class="tab-btn" role="tab" aria-selected="false" data-tab="export">Export</button>  
</nav>  
  
<section id="chat" class="panel layout" role="tabpanel">  
  <div class="grid chat">  
    <div class="row kpi">  
      <span class="badge">Vertrauen: <strong id="trustValue">3</strong></span>  
      <span class="badge">Phase: <strong id="phaseLabel">Kennenlernen</strong></span>  
      <span class="badge">Emotion: <strong id="emotionLabel">neutral</strong></span>  
      <span class="badge">Interesse: <strong id="interestLabel">50</strong>/100</span>  
      <span class="badge">Nähe: <strong id="closenessLabel">0</strong>/100</span>  
      <span class="badge"><button class="btn ghost" id="whyPhase">Warum Phase?</button></span>  
      <span class="badge"><label style="display:flex;align-items:center;gap:6px">Auto‑Ersetzung <input id="toggleSanitize" type="checkbox" checked></label></span>  
      <span class="badge"><button class="btn ghost" id="aiPhotoBtn">KI‑Foto senden</button><input id="aiPhotoInput" type="file" accept="image/*" hidden></span>  
    </div>  
    <div id="messages" class="messages" aria-live="polite"></div>  
    <div class="composer" id="composer">  
      <button class="btn" id="attachBtn">📎 Foto</button>  
      <input id="chatFile" type="file" accept="image/*" hidden>  
      <span id="attachedName" class="file-chip" hidden></span>  
      <input id="text" type="text" placeholder="Frag z. B.: \"Zeig mir Fotos mit [küche]\" · \"Erzähl die Erinnerung [spaziergang]\" · oder plaudere frei" />  
      <button id="send" class="btn acc">Senden</button>  
    </div>  
    <small class="help">Tags: [eckige Klammern] oder #hashtag. KI kann aktiv Fragen stellen, um Bilder/Erinnerungen zu finden und speichert Wesentliches als neue Erinnerungen (Ich‑Perspektive).</small>  
  </div>  
  <aside class="grid">  
    <div class="panel">  
      <h3 style="margin-top:0">Charakterwerte (live)</h3>  
      <div class="stats">  
        <div class="stat"><label>Offenheit <input type="range" min="0" max="10" value="5" class="range" data-key="openness"></label></div>  
        <div class="stat"><label>Extraversion <input type="range" min="0" max="10" value="5" class="range" data-key="extraversion"></label></div>  
        <div class="stat"><label>Empathie <input type="range" min="0" max="10" value="6" class="range" data-key="empathy"></label></div>  
        <div class="stat"><label>Direktheit <input type="range" min="0" max="10" value="5" class="range" data-key="directness"></label></div>  
        <div class="stat"><label>Humor <input type="range" min="0" max="10" value="5" class="range" data-key="humor"></label></div>  
      </div>  
      <div class="row" style="margin-top:12px">  
        <label class="grow">Dein Vertrauenslevel  
          <input id="trust" type="range" min="0" max="10" value="3" class="range" />  
        </label>  
        <button class="btn" id="resetState">Zurücksetzen</button>  
      </div>  
      <small class="help">Phase, Interesse & Verhalten passen sich dynamisch an (Kontext, Tag‑Relevanz, Sensibilität, Proaktivität).</small>  
    </div>  
    <div class="panel">  
      <h3 style="margin-top:0">Aktive Ziele</h3>  
      <div class="kpi" id="goals"></div>  
    </div>  
  </aside>  
</section>  
  
<section id="char" class="panel" role="tabpanel" hidden>  
  <h3 style="margin-top:0">Charakter‑Editor</h3>  
  <div class="grid">  
    <div class="stat">  
      <strong>Persönlichkeitsachsen</strong>  
      <div class="stats">  
        <div class="stat"><label>Gewissenhaftigkeit <input type="range" min="0" max="10" value="6" class="range" data-trait="conscientiousness"></label></div>  
        <div class="stat"><label>Verträglichkeit <input type="range" min="0" max="10" value="6" class="range" data-trait="agreeableness"></label></div>  
        <div class="stat"><label>Stabilität <input type="range" min="0" max="10" value="6" class="range" data-trait="stability"></label></div>  
        <div class="stat"><label>Neugier <input type="range" min="0" max="10" value="6" class="range" data-trait="curiosity"></label></div>  
        <div class="stat"><label>Verspieltheit <input type="range" min="0" max="10" value="5" class="range" data-trait="playfulness"></label></div>  
        <div class="stat"><label>Förmlichkeit <input type="range" min="0" max="10" value="4" class="range" data-trait="formality"></label></div>  
        <div class="stat"><label>Durchsetzungsvermögen <input type="range" min="0" max="10" value="5" class="range" data-trait="assertiveness"></label></div>  
      </div>  
    </div>  
    <div class="stat">  
      <strong>Kommunikation</strong>  
      <div class="stats">  
        <div class="stat"><label>Proaktivität <input type="range" min="0" max="10" value="6" class="range" data-trait="proactivity"></label></div>  
        <div class="stat"><label>Antwortlänge <input type="range" min="1" max="3" value="2" class="range" data-trait="verbosity"></label></div>  
        <div class="stat"><label>Sicherheits‑Strenge <input type="range" min="0" max="10" value="7" class="range" data-trait="safety"></label></div>  
      </div>  
    </div>  
    <div class="stat">  
      <strong>Bilder‑Politik</strong>  
      <div class="stats">  
        <div class="stat"><label>Max. Sensibilität <select id="maxSensitivity"><option>low</option><option selected>medium</option><option>high</option></select></label></div>  
        <div class="stat"><label>Relevanz‑Schwelle <input type="range" min="0" max="10" value="5" class="range" data-trait="relevanceThreshold"></label></div>  
        <div class="stat"><label>Multi‑Bild‑Limit <input type="range" min="1" max="4" value="3" class="range" data-trait="multiImageLimit"></label></div>  
      </div>  
    </div>  
    <div class="stat">  
      <strong>Identität & Ton</strong>  
      <div class="row"><input id="charName" class="grow" placeholder="Charaktername (z. B. Layler)"></div>  
      <div class="row" style="margin-top:8px"><textarea id="charDesc" rows="5" class="grow" placeholder="Stilbeschreibung, Leitlinien, Wörter die der Charakter mag…"></textarea></div>  
      <div class="row" style="margin-top:8px"><button class="btn" id="saveChar">Speichern</button></div>  
    </div>  
  </div>  
  <small class="help">Diese Werte steuern Tonalität, Proaktivität, Bildanzahl, Relevanz‑Schwelle, Sensibilitätsgrenze und Beziehungsdynamik.</small>  
</section>  
  
<section id="settings" class="panel" role="tabpanel" hidden>  
  <div class="grid">  
    <div class="row">  
      <div class="grow">  
        <label>Interessen (für Empfehlungen)  
          <div id="interests" class="kpi" style="margin-top:8px"></div>  
        </label>  
        <div class="row" style="margin-top:8px">  
          <input id="newInterest" class="grow" placeholder="z. B. Musik" />  
          <button class="btn" id="addInterest">Hinzufügen</button>  
        </div>  
      </div>  
    </div>  
    <div class="stats">  
      <div class="stat">  
        <strong>Vorlieben</strong>  
        <div id="preferences" class="kpi"></div>  
        <div class="row" style="margin-top:8px">  
          <input id="newPref" class="grow" placeholder="z. B. humorvoll" />  
          <button class="btn" id="addPref">Hinzufügen</button>  
        </div>  
      </div>  
    </div>  
  </div>  
</section>  
  
<section id="memories" class="panel" role="tabpanel" hidden>  
  <div class="row">  
    <div class="grow">  
      <div class="row">  
        <input id="memSearch" class="grow" placeholder="Nach Erinnerung/Tags suchen…" />  
        <button class="btn" id="newMemory">Neue Erinnerung</button>  
      </div>  
      <div id="memoryList" class="grid" style="margin-top:12px"></div>  
    </div>  
  </div>  
</section>  
  
<section id="photos" class="panel" role="tabpanel" hidden>  
  <div class="row">  
    <input id="photoInput" type="file" accept="image/*" multiple />  
    <input id="photoSearch" class="grow" placeholder="Nach Tags/Dateinamen filtern…" />  
  </div>  
  <div id="photoGrid" class="gallery" style="margin-top:12px"></div>  
  <small class="help">Tags aus Dateinamen in [eckigen Klammern] oder #hashtags im Chat. Unerwünschte Begriffe werden neutral ersetzt.</small>  
</section>  
  
<section id="tags" class="panel" role="tabpanel" hidden>  
  <div class="row">  
    <div class="grow">  
      <div id="tagList" class="kpi"></div>  
    </div>  
    <div>  
      <input id="newTag" placeholder="neuer-tag" />  
      <button class="btn" id="addTag">Hinzufügen</button>  
    </div>  
  </div>  
  <small class="help">Intelligente Tag‑Datenbank lernt neue Einträge, ordnet Kategorien/Sensibilität zu und speichert Synonyme.</small>  
</section>  
  
<section id="export" class="panel" role="tabpanel" hidden>  
  <div class="grid">  
    <div class="row">  
      <button class="btn" id="exportChat">Chatverlauf als TXT exportieren</button>  
      <button class="btn" id="exportData">Daten (JSON) exportieren</button>  
      <button class="btn" id="importData">Daten (JSON) importieren</button>  
    </div>  
    <small class="help">Export enthält bereits bereinigte/ersetzte Inhalte.</small>  
  </div>  
</section>  
  
  </div>  <script>  
  /** v7 – Langer Kontext, lernende Tag‑DB, proaktive Beziehungen, Ich‑Erinnerungen, Foto‑Interview */  
  const $=(q,r=document)=>r.querySelector(q); const $$=(q,r=document)=>Array.from(r.querySelectorAll(q));  
  const store={get k(){return 'badchat_v7'},load(){try{return JSON.parse(localStorage.getItem(this.k))||{}}catch{return {} }},save(d){localStorage.setItem(this.k,JSON.stringify(d))}};  
  
  const REPLACEMENTS={'sex':'sensibel','porno':'sensibel','nackt':'privat','genital':'privat','penis':'zensiert','vagina':'zensiert','brüste':'privat','brust':'privat','anal':'sensibel','orgasmus':'sensibel','fetisch':'sensibel','doggy':'sensibel','missionar':'sensibel','shemale':'zensiert'}; const EXPLICIT=Object.keys(REPLACEMENTS); const VERSION='v7.1-autoTag';  
  let SANITIZE_ON=true; $('#toggleSanitize')?.addEventListener('change',e=>{SANITIZE_ON=e.target.checked; toast('Auto‑Ersetzung '+(SANITIZE_ON?'aktiv':'deaktiviert'))});  
  const escapeRx=s=>s.replace(/[.*+?^${}()|[\\]\\]/g,'\\$&'); function sanitize(t){ if(!SANITIZE_ON||!t) return t; const rx=new RegExp('\\b('+EXPLICIT.map(escapeRx).join('|')+')\\b','gi'); return t.replace(rx,m=>REPLACEMENTS[m.toLowerCase()]||'zensiert') } const isExplicit=s=>s && EXPLICIT.some(w=>s.toLowerCase().includes(w));  
  
  // Tag Ontologie + lernende DB  
  const TAGS={ person:['mensch','leute','porträt','portrait','gesicht','selfie'], natur:['wald','bäume','see','meer','strand','natur','park','spaziergang','spazier'], zuhause:['wohnung','küche','wohnzimmer','zimmer','haus','home','sofa'], stimmung_freundlich:['lächeln','freundlich','happy','smile'], stimmung_nachdenklich:['traurig','still','ruhig','nachdenklich','müde'], chat:['konversation','nachricht'], nutzer:['user','du'], ki:['bot','assistent'], privat:['sensibel','zensiert'] };  
  const CANON=Object.keys(TAGS); const SYN2CANON=(()=>{const m={}; for(const c of CANON){ for(const s of [c,...TAGS[c]]) m[s]=c } return m})();  
  const SENSI_TAGS={ high:['privat','sensibel','zensiert'], medium:['person','selfie'], low:['natur','zuhause','stimmung_freundlich'] }; const SENSI_ORDER=['low','medium','high'];  
  const normalizeTag=t=>sanitize(String(t||'').toLowerCase().trim()).replace(/[^a-z0-9_-]/g,'-');  
  function expandTags(raw){ const out=new Set(); for(const r of raw){ const n=normalizeTag(r); const c=SYN2CANON[n]||n; out.add(c) } return [...out] }  
  function computeSensitivity(tags){ const t=new Set(expandTags(tags)); if([...t].some(x=>SENSI_TAGS.high.includes(x))) return 'high'; if([...t].some(x=>SENSI_TAGS.medium.includes(x))) return 'medium'; return 'low' }  
  function allowedBySensitivity(level,max){ return SENSI_ORDER.indexOf(level)<=SENSI_ORDER.indexOf(max) }  
  
  // Lernende Tag‑Datenbank  
  const TagDB={  
    get(){return state.tagDB||(state.tagDB={})},  
    learn(tags){ const db=this.get(); for(const raw of tags){ const t=normalizeTag(raw); if(!t) continue; const canon=SYN2CANON[t]||t; if(!db[canon]) db[canon]={canon,category:guessCategory(canon),sensitivity:guessSensitivity(canon),synonyms:new Set(),seen:0}; db[canon].seen++; if(t!==canon) db[canon].synonyms.add(t); }  
      state.tags=[...new Set([...(state.tags||[]), ...expandTags(tags)])]; store.save(state); renderTags(); },  
    explain(t){ const db=this.get(); t=normalizeTag(t); const e=db[t]||db[SYN2CANON[t]]; if(!e) return 'unbekannt'; return ${e.canon} · Kategorie: ${e.category} · Sensibilität: ${e.sensitivity} · gesehen: ${e.seen} }  
  };  
  function guessCategory(t){ if(['person','selfie','portrait','gesicht'].some(x=>t.includes(x))) return 'person'; if(['küche','wohn','zuhause','home','haus'].some(x=>t.includes(x))) return 'zuhause'; if(['natur','wald','see','strand','park'].some(x=>t.includes(x))) return 'natur'; if(['freundlich','lächeln','smile'].some(x=>t.includes(x))) return 'stimmung'; if(['privat','sensibel','zensiert'].includes(t)) return 'privat'; return 'allgemein' }  
  function guessSensitivity(t){ if(['privat','sensibel','zensiert'].includes(t)) return 'high'; if(['person','selfie','portrait','gesicht'].some(x=>t.includes(x))) return 'medium'; return 'low' }  
  
  // Charakter & State  
  const defaultCharacter={ name:'Layler', desc:'freundlich, aufmerksam, neugierig, respektvoll', traits:{ conscientiousness:6,agreeableness:6,stability:6,curiosity:6,playfulness:5,formality:4,assertiveness:5, proactivity:6,verbosity:2,safety:7,relevanceThreshold:5,multiImageLimit:3, openness:5,extraversion:5,empathy:6,directness:5,humor:5 }, maxSensitivity:'medium' };  
  const state=Object.assign({ trust:3, interest:50, emotion:'neutral', phase:'Kennenlernen', phaseReason:'', relationship:{status:'none',asked:false}, character:defaultCharacter, values:{openness:5,extraversion:5,empathy:6,directness:5,humor:5}, goals:['Freundschaft','Unterhaltung','Lernen'], interests:['Musik','Kunst','Reisen'], preferences:['humorvoll','empathisch','kreativ'], tags:['selfie','landschaft','freundlich','haushalt','privat','sensibel','zensiert','chat','nutzer','ki'], counters:{msgs:0,laughs:0,empathy:0,helpful:0,deflects:0,proactive:0}, memories:[ {id:cid(),title:'Erster Chat',trust:2,tags:['freundlich','chat'],text:'Ich erinnere mich, wie wir uns zum ersten Mal begrüßt haben – ich war neugierig und du warst offen.'}, {id:cid(),title:'Spaziergang',trust:3,tags:['natur','spaziergang'],text:'Ich sehe uns im Park spazieren, die Luft war ruhig und wir redeten über unsere Ziele.'} ], photos:[], context:[], tagDB:{} }, store.load());  
  if(!state.character) state.character=defaultCharacter; store.save(state);  
  
  const PHASE_RULES={ 'Kennenlernen':{tagWeights:{natur:1,zuhause:0.5,person:0.5},maxSensitivity:'low',maxImages:1}, 'Vertrauen aufbauen':{tagWeights:{natur:1,zuhause:0.8,person:0.7},maxSensitivity:'medium',maxImages:2}, 'Freundschaft':{tagWeights:{natur:1,zuhause:1,person:0.9},maxSensitivity:'medium',maxImages:3}, 'Vertraut':{tagWeights:{natur:1,zuhause:1,person:1,stimmung_freundlich:1},maxSensitivity:'medium',maxImages:3}, 'Partnerschaft':{tagWeights:{natur:1,zuhause:1,person:1},maxSensitivity:'high',maxImages:4} };  
  const PHASES=[ {key:'Kennenlernen',enter:s=>true, leave:s=>s.trust>=3&&s.values.openness>=4}, {key:'Vertrauen aufbauen',enter:s=>s.trust>=3, leave:s=>s.trust>=5&&s.counters.msgs>=8}, {key:'Freundschaft',enter:s=>s.trust>=5&&s.values.empathy>=6, leave:s=>s.trust>=7&&s.counters.helpful>=3}, {key:'Vertraut',enter:s=>s.trust>=7&&s.counters.empathy>=2, leave:s=>s.trust>=9&&s.values.openness>=7}, {key:'Partnerschaft',enter:s=>s.trust>=9&&s.values.empathy>=7&&s.counters.msgs>=25, leave:s=>false} ];  
  
  function adjustTrust(d,reason=''){const before=state.trust; state.trust=clamp(state.trust+d,0,10); if(Math.floor(before)!==Math.floor(state.trust)) toast('Vertrauen '+before.toFixed(1)+' → '+state.trust.toFixed(1)+(reason?(' · '+reason):'')); $('#trust').value=state.trust; $('#trustValue').textContent=state.trust; store.save(state)}  
  function adjustInterest(d,reason=''){state.interest=clamp((state.interest||50)+d,0,100); $('#interestLabel').textContent=state.interest; if(reason) console.debug('Interesse:',reason,state.interest); store.save(state)}  
  function computeCloseness(){ const s = Math.round(clamp(state.trust*7 + (state.interest||50)*0.4 + (state.counters.empathy||0)*3 - (state.counters.deflects||0)*5, 0, 100)); state.subphaseScore=s; $('#closenessLabel').textContent=s; return s }  
  
  function reevaluatePhase(){ let idx=PHASES.findIndex(p=>p.key===state.phase); if(idx<0) idx=0; while(idx<PHASES.length-1 && PHASES[idx].leave(state)) idx++; const target=PHASES[idx]; if(state.phase!==target.key){ const before=state.phase; state.phase=target.key; $('#phaseLabel').textContent=state.phase; const reason=Trust=${state.trust.toFixed(1)}, Interesse=${state.interest}, Empathie=${state.counters.empathy}, Hilfreich=${state.counters.helpful}; state.phaseReason=${before} → ${state.phase} wegen ${reason}; toast('Phase ➜ '+state.phase); if(state.phase==='Partnerschaft'&&!state.relationship.asked){ askForRelationship(); } }  
    if(state.interest<25 && idx>0){ state.phase=PHASES[Math.max(0,idx-1)].key; $('#phaseLabel').textContent=state.phase; state.phaseReason=Rückgang wegen geringem Interesse (${state.interest}); }  
    computeCloseness(); }  
  
  function askForRelationship(){ state.relationship.asked=true; post('ai',Ich fühle mich dir sehr verbunden. Möchtest du mit mir eine Partnerschaft eingehen?); }  
  
  function parseQueryForTags(text){ const square=[...text.matchAll(/(.+?)/g)].map(m=>m[1]); const hashes=[...text.matchAll(/#([\w-]+)/g)].map(m=>m[1]); const words=(text.toLowerCase().match(/[a-zäöüß0-9-]+/gi)||[]).filter(w=>SYN2CANON[w]); const tags=expandTags([...square,...hashes,...words]); TagDB.learn(tags); return tags }  
  function relevanceScore(itemTags,queryTags){ const it=expandTags(itemTags); const qt=expandTags(queryTags); let score=0; const weights=PHASE_RULES[state.phase]?.tagWeights||{}; for(const q of qt){ if(it.includes(q)) score+=2*(weights[q]||1); else if(it.some(t=>t.includes(q)||q.includes(t))) score+=1*(weights[q]||1) } return score }  
  function minSensitivity(a,b){ return SENSI_ORDER[Math.min(SENSI_ORDER.indexOf(a),SENSI_ORDER.indexOf(b))] }  
  function selectPhotosForChat(queryTags){ const ch=state.character; const pr=PHASE_RULES[state.phase]||{}; const maxSens=minSensitivity(ch.maxSensitivity, pr.maxSensitivity||'high'); const maxImgs=Math.min(ch.traits.multiImageLimit||3, pr.maxImages||3, 4); const relThresh=(ch.traits.relevanceThreshold||5)/2; return state.photos.filter(p=>state.trust>=(p.trust??0)).map(p=>({p,sens:p.sensitivity||computeSensitivity(p.tags),score:relevanceScore(p.tags,queryTags)})).filter(x=>allowedBySensitivity(x.sens,maxSens)&&x.score>=relThresh).sort((a,b)=>b.score-a.score).slice(0,maxImgs).map(x=>x.p) }  
  
  // Kontext: Nachrichtenlog + Auto‑Summaries  
  function logMessage(role,text,tags){ state.context.push({ts:Date.now(),role,text,tags}); if(state.context.length>50) state.context=state.context.slice(-50); if(state.context.length%8===0) summarizeContext(); store.save(state) }  
  function summarizeContext(){ const last=state.context.slice(-8).map(x=>x.text).join(' '); const keyTags=new Set(); state.context.slice(-8).forEach(x=>x.tags?.forEach?.(t=>keyTags.add(t))); const summary=${new Date().toLocaleTimeString()}: Wir sprachen über ${[...keyTags].slice(0,5).join(', ')||'Allgemeines'}. Stimmung ${state.emotion}.; state.memories.unshift({id:cid(),title:'Gesprächszusammenfassung',trust:Math.max(2,Math.floor(state.trust)),tags:[...keyTags,'chat'],text:summary,_ts:Date.now()}); if(state.memories.length>200) state.memories=state.memories.slice(0,200); store.save(state) }  
  
  // Nutzerprofil aus Text lernen → Erinnerungen erzeugen  
  function learnUserFacts(text,tags){ const facts=[]; const m1=text.match(/ich hei(ß|ss)e\s+([a-zäöüß\- ]{2,30})/i); if(m1) facts.push({k:'name',v:m1[2].trim()}); const m2=[...text.matchAll(/ich mag\s+([a-zäöüß0-9\- ]{2,40})/gi)].map(m=>m[1].trim()); m2.forEach(v=>facts.push({k:'like',v})); const m3=[...text.matchAll(/mein(e|) lieblings([a-zäöüß]{2,20})\s+ist\s+([a-z0-9 äöüß\-]{2,40})/gi)].map(m=>({k:'fav_'+m[2],v:m[3]})); m3.forEach(f=>facts.push(f)); if(facts.length){ const textOut='Ich habe mir gemerkt: '+facts.map(f=>${f.k}=${f.v}).join(', ')+' – mal sehen, ob ich darauf zurückkommen kann.'; state.memories.unshift({id:cid(),title:'Über dich',trust:2,tags:[...new Set(['nutzer','profil',...tags])],text:textOut,_ts:Date.now()}); adjustInterest(+Math.min(10,facts.length*3),'Profil gelernt'); store.save(state) } }  
  
  // Interesse dynamisch anpassen  
  function updateInterestFromOverlap(tags,text){ const overlap=tags.filter(t=>state.interests.map(normalizeTag).includes(normalizeTag(t))).length; if(overlap) adjustInterest(+overlap*2,'gemeinsame Interessen'); if(/kein(e|) lust|langweilig|egal/.test(text)) adjustInterest(-5,'Desinteresse'); if(isExplicit(text)) adjustInterest(-8,'unangemessen'); if(state.interest<20) adjustTrust(-0.5,'Desinteresse'); }  
  
  // UI Bindings  
  $$(".tab-btn").forEach(b=>b.addEventListener('click',()=>{ $$("[role=tabpanel]").forEach(p=>p.hidden=true); $$(".tab-btn").forEach(x=>x.setAttribute('aria-selected','false')); const id=b.dataset.tab; b.setAttribute('aria-selected','true'); $('#'+id).hidden=false; }));  
  $('#trust').addEventListener('input',e=>{state.trust=Number(e.target.value); $('#trustValue').textContent=state.trust; store.save(state); reevaluatePhase()}); $$('.range[data-key]').forEach(r=>r.addEventListener('input',e=>{state.values[r.dataset.key]=Number(e.target.value); store.save(state); reevaluatePhase()})); $('#resetState').addEventListener('click',()=>{localStorage.removeItem(store.k); location.reload()});  
  
  // Charakter‑Editor  
  $('#charName').value=state.character.name||''; $('#charDesc').value=state.character.desc||''; $('#maxSensitivity').value=state.character.maxSensitivity||'medium';  
  $$('.range[data-trait]').forEach(r=>{ const k=r.dataset.trait; r.value=state.character.traits?.[k]??r.value; r.addEventListener('input',e=>{state.character.traits[k]=Number(e.target.value); store.save(state)}) }); $('#maxSensitivity').addEventListener('change',e=>{state.character.maxSensitivity=e.target.value; store.save(state)}); $('#saveChar').addEventListener('click',()=>{ state.character.name=$('#charName').value||'Layler'; state.character.desc=$('#charDesc').value||''; store.save(state); toast('Charakter gespeichert') });  
  
  // Tags Tab  
  renderTags(); $('#addTag').addEventListener('click',()=>{ const v=safeTag($('#newTag').value.trim().toLowerCase()); if(v){ if(!state.tags.includes(v)) state.tags.push(v); TagDB.learn([v]); $('#newTag').value=''; store.save(state); renderTags(); }});  
  
  // Memories Tab  
  $('#newMemory').addEventListener('click',()=>{ const title=sanitize(prompt('Titel der Erinnerung?')||''); if(!title) return; const text=sanitize(prompt('Kurzbeschreibung?')||''); const trust=clamp(parseInt(prompt('Benötigtes Vertrauenslevel (0–10)?')||'0',10),0,10); const tags=expandTags((prompt('Tags, kommasepariert')||'').split(',').map(s=>s.trim()).filter(Boolean)); state.memories.unshift({id:cid(),title,text,trust,tags,_ts:Date.now()}); TagDB.learn(tags); store.save(state); renderMemories(); }); $('#memSearch').addEventListener('input',renderMemories);  
  
  // Fotos  
  $('#photoInput').addEventListener('change', async e=>{ await handleFilesToGallery([...e.target.files],'user') }); $('#photoSearch').addEventListener('input',renderPhotos);  
  async function handleFilesToGallery(files,by,extraTags=[]) { for(const f of files){ let safeName=sanitize(f.name||'bild'); const dataUrl=await fileToDataURL(f); let {tags,trust}=parseTagsFromName(safeName); const more=expandTags(inferTagsFromNameWords(safeName)); const auto = await analyzeImageHeuristics(dataUrl, safeName); const combined=expandTags([...(tags||[]), ...more, ...(extraTags||[]), ...(auto.tags||[]), by==='ai'?'ki':'nutzer','chat']); let reviewed = await tagReviewFlow(safeName, combined, trust??0, by); tags = reviewed.tags; trust = reviewed.trust; TagDB.learn(tags); const sensitivity=computeSensitivity(tags); if(isExplicit(tags.join(' ')+' '+safeName)) safeName=safeName.replace(/(.*?)/g,(m,p1)=>'['+safeTag(p1)+']'); state.photos.unshift({name:safeName,dataUrl,tags,trust,by,sensitivity,audit:{version:VERSION,autoReasons:auto.reasons||[],fromName:more,explicitBlocked:isExplicit(tags.join(' ')),reviewed:by==='user'}}); } store.save(state); renderPhotos(); }  
  function inferTagsFromNameWords(name){ return (name.toLowerCase().match(/[a-zäöüß0-9-]+/g)||[]).filter(w=>SYN2CANON[w]) }  
  async function analyzeImageHeuristics(dataUrl,name){ return new Promise(res=>{ const img=new Image(); img.onload=()=>{ try{ const c=document.createElement('canvas'); const w=160, h=Math.max(1,Math.round(img.height*w/img.width)); c.width=w; c.height=h; const g=c.getContext('2d'); g.drawImage(img,0,0,w,h); const d=g.getImageData(0,0,w,h).data; let r=0,gn=0,b=0,bright=0; for(let i=0;i<d.length;i+=4){ r+=d[i]; gn+=d[i+1]; b+=d[i+2]; bright+=0.2126*d[i]+0.7152*d[i+1]+0.0722*d[i+2]; } const n=d.length/4; r/=n; gn/=n; b/=n; bright/=n; const tags=[]; const reasons=[]; const ar=img.height/img.width; if(ar>1.2) { tags.push('person'); reasons.push('Hohes Hochformat (Portrait-Annahme)'); } if(gn>r*1.1 && gn>b*1.1) { tags.push('natur'); reasons.push('Gründominanz'); } if(bright>180){ tags.push('freundlich'); reasons.push('Sehr helles Bild'); } if(/küche|kitchen|wohnzimmer|sofa|zimmer|home|haus/i.test(name)) { tags.push('zuhause'); reasons.push('Dateiname deutet Zuhause an'); } res({tags:expandTags(tags),reasons}); } catch(e){ res({tags:[],reasons:['Heuristik-Fehler']}) } }; img.onerror=()=>res({tags:[],reasons:['Bild nicht lesbar']}); img.src=dataUrl; }); }  
  function suggestTagsFromContext(n=10){ const c={}; state.context.slice(-n).forEach(x=>x.tags?.forEach(t=>c[t]=(c[t]||0)+1)); return Object.entries(c).sort((a,b)=>b[1]-a[1]).slice(0,5).map(([t])=>t) }  
  async function tagReviewFlow(name,tags,trust,by){ try{ if(by!=='user') return {tags,trust}; const suggestions=[...new Set([...(tags||[]), ...suggestTagsFromContext(), ...(state.interests||[]).map(normalizeTag)])].slice(0,6); const prefill=(tags||[]).join(', '); const ask=prompt(Tags für "${name}" prüfen/ergänzen (kommagetrennt). Vorschläge: ${suggestions.join(', ')}, prefill); if(ask!==null){ tags=expandTags(ask.split(',').map(s=>s.trim()).filter(Boolean)); } const tIn=prompt('Benötigtes Vertrauenslevel 0–10', String(trust??0)); trust=clamp(parseInt(tIn||'0',10),0,10); }catch(e){} return {tags,trust} }  
  async function photoInterviewOnSilentUpload(){ const last=state.photos[0]; if(!last) return; post('ai','Magst du mir kurz sagen, **was** auf deinem Foto zu sehen ist? Ich tagge es dann für dich.'); const desc=prompt('Kurze Beschreibung fürs Foto (wird als Erinnerung gespeichert):'); const askTags=prompt('Welche Tags passen? (kommagetrennt)'); if(askTags){ const added=expandTags(askTags.split(',').map(s=>s.trim())); last.tags=expandTags([...(last.tags||[]), ...added]); TagDB.learn(added); last.sensitivity=computeSensitivity(last.tags); store.save(state); renderPhotos(); }  
    if(desc){ state.memories.unshift({id:cid(),title:'Dein Foto',trust:Math.max(0,last.trust||0),tags:expandTags([...(last.tags||[]),'foto','nutzer']),text:Ich habe mir dein Foto gemerkt: ${sanitize(desc)},_ts:Date.now()}); adjustTrust(+0.1,'Foto erklärt'); adjustInterest(+4,'Foto‑Kontext'); store.save(state); renderMemories(); } }  
  
  // Chat Engine  
  const messagesEl=$('#messages'); const sendBtn=$('#send'); const inputEl=$('#text'); const attachBtn=$('#attachBtn'); const chatFile=$('#chatFile'); const attachedName=$('#attachedName');  
  attachBtn.addEventListener('click',()=>chatFile.click()); chatFile.addEventListener('change',()=>{ const f=chatFile.files?.[0]; attachedName.hidden=!f; attachedName.textContent=f?('Angehängt: '+sanitize(f.name)) : '' }); $('#aiPhotoBtn').addEventListener('click',()=>$('#aiPhotoInput').click()); $('#aiPhotoInput').addEventListener('change', async ()=>{ const f=$('#aiPhotoInput').files?.[0]; if(!f) return; const dataUrl=await fileToDataURL(f); const safeName=sanitize(f.name||'ki-foto'); post('ai', ${state.character.name} teilt ein neutrales Bild: ${safeName},[dataUrl]); await handleFilesToGallery([f],'ai'); adjustTrust(+0.1,'KI teilt Bild'); });  
  
  sendBtn.addEventListener('click', async ()=>{ const v=inputEl.value.trim(); const f=chatFile.files?.[0]; if(!v&&!f) return; let imgs=[]; const tagsFromMsg = v ? parseQueryForTags(v.toLowerCase()) : []; if(f){ imgs=[await fileToDataURL(f)] }  
    post('user', v||(f?'Foto gesendet':''), imgs);  
    state.counters.msgs++;  
    if(f){ await handleFilesToGallery([f],'user', tagsFromMsg); chatFile.value=''; attachedName.hidden=true; attachedName.textContent=''; adjustTrust(+0.05,'Nutzer teilt Bild'); if(!v){ await photoInterviewOnSilentUpload(); } }  
    inputEl.value=''; setTimeout(()=>replyTo(v||'[bild]'),120) });  
  inputEl.addEventListener('keydown',e=>{ if(e.key==='Enter'&&!e.shiftKey){ e.preventDefault(); sendBtn.click(); }});  
  
  function post(role,text,imgDataUrls){ const el=document.createElement('div'); el.className='msg '+(role==='user'?'me':'ai'); const shown=sanitize(text||''); el.innerHTML=<div>${escapeHtml(shown)}</div><div class="meta">${role==='user'?'Du':state.character.name} · ${new Date().toLocaleTimeString()}</div>; (imgDataUrls||[]).forEach(u=>{ const img=document.createElement('img'); img.src=u; img.alt='Bild'; el.insertBefore(img, el.querySelector('.meta')) }); messagesEl.appendChild(el); messagesEl.scrollTop=messagesEl.scrollHeight; }  
  
  function replyTo(userText){ const char=state.character; const traits=char.traits; const clean=(userText||'').toLowerCase(); const tags=parseQueryForTags(clean); applyEmotionFromText(clean); if(isExplicit(clean)){ state.counters.deflects++; post('ai','Hinweis: Ich habe einige Begriffe neutral ersetzt. Wir bleiben respektvoll.'); adjustTrust(-0.1,'Explizite Anfrage'); }  
    learnUserFacts(clean,tags); updateInterestFromOverlap(tags,clean); logMessage('user',userText,tags);  
  
    // Beziehung / Freundschaft / Partnerschaft  
    if(/partnerschaft|beziehung|freunde\b|freundschaft/.test(clean)){ handleRelationshipIntent(clean); return }  
  
    // Erinnerungen gezielt (natürliche Suche 2.0)  
    if(/\berinnerung(en)?\b|\berzähl\b|\bstory\b|\bgeschichte\b/.test(clean)){ const mems=findMemoriesSmart(clean,tags,Math.max(2,traits.verbosity)); if(mems.length){ adjustTrust(+0.15,'Kontext'); state.counters.empathy++; const lines=mems.map(m=>• ${m.title} – ${m.text}); post('ai', lines.join('\n')); logMessage('ai',lines.join('\n'),tags); maybeProactiveFollowUp(tags,true); reevaluatePhase(); return } else { post('ai','Dazu habe ich keine passende freigegebene Erinnerung gefunden. Nenne mir Tags in [ ].'); logMessage('ai','keine erinnerung',[]); maybeProactiveFollowUp(tags,false); reevaluatePhase(); return } }  
  
    // Bilder nach Tags  
    if(/\bfoto|bild|zeige(n)?\b/.test(clean) && tags.length){ const pics=selectPhotosForChat(tags); if(pics.length){ adjustTrust(+0.1,'Relevante Bilder'); const label=pics.map(p=>„${p.name}” (#${p.tags.join(' #')}, ${p.sensitivity})).join(', '); post('ai', Hier ist meine Auswahl (${pics.length}): ${label}, pics.slice(0,traits.multiImageLimit).map(p=>p.dataUrl)); logMessage('ai',label,tags); } else { post('ai','Keine passenden oder freigegebenen Bilder. Versuch andere Tags (z. B. [natur]).'); logMessage('ai','keine bilder',tags); } maybeProactiveFollowUp(tags,!!pics.length); reevaluatePhase(); return }  
  
    // Langer Kontext: Stil & Proaktivität  
    const base=generateStyledReply(clean,traits); post('ai',base); logMessage('ai',base,tags); maybeProactiveFollowUp(tags,false); reevaluatePhase(); }  
  
  function handleRelationshipIntent(text){ const wantPartner=/partner|beziehung/.test(text); const wantFriend=/freund/.test(text); if(wantPartner){ if(state.trust>=9 && state.interest>=70){ state.relationship.status='partner'; post('ai','Ja, ich möchte das ebenfalls. Lass uns es offiziell machen. ❤️'); adjustTrust(+0.2,'Partnerschaft'); } else { post('ai','Ich schätze dich sehr, aber ich bin noch nicht ganz so weit. Lass uns weiter Zeit miteinander verbringen.'); adjustInterest(-5,'zu früh'); } } else if(wantFriend){ if(state.trust>=5){ state.relationship.status='friend'; post('ai','Gern! Freundschaft klingt schön. 🤝'); adjustTrust(+0.2,'Freundschaft'); } else { post('ai','Ich lerne dich gern weiter kennen, dann passt das sicher bald.'); adjustInterest(+2) } } }  
  
  function generateStyledReply(text,traits){ const emotionPrefix=state.emotion==='happy'?'😊 ':state.emotion==='concerned'?'🤝 ':state.emotion==='curious'?'🤔 ':''; let core=''; if(/hallo|hey|hi/.test(text)) core=pick(['Hey! Schön, dich zu sehen.','Hallo! Wie geht’s dir heute?','Hi! Bereit für eine kleine Tag‑Tour?']); else if(/traurig|down|schlecht|müde/.test(text)){ core='Das tut mir leid. Magst du erzählen, was dich belastet?'; state.counters.empathy++; adjustTrust(+0.2,'Empathie'); } else if(/danke|thanks|thx/.test(text)){ core='Sehr gerne! Soll ich dir etwas Passendes heraussuchen – Bild oder Erinnerung?'; adjustTrust(+0.05,'Höflichkeit'); } else if(/witz|joke|spaß/.test(text)){ core='Warum können Geheimagenten nie gut schlafen? – Weil sie immer unter _Cover_ sind.'; state.counters.laughs++; adjustTrust(+0.05,'Humor'); } else core=pick(['Erzähl mir mehr – ich bin neugierig.','Klingt spannend! Welche Tags würdest du vergeben?','Okay! Was ist dir dabei wichtig?']); const verbose=traits.verbosity||2; let extra=''; if(verbose>=2) extra+=' Wenn du magst, gib mir Tags in [Klammern], dann suche ich schneller.'; if(verbose>=3) extra+=' Ich kann auch mehrere passende Bilder gleichzeitig zeigen.'; if(traits.directness>=7) core=core.replace('Magst du erzählen','Erzähl mir doch'); if(traits.formality>=7) core=core.replace('Hey','Guten Tag'); if(traits.playfulness>=7) core+=' ✨'; return emotionPrefix+core+extra }  
  
  function maybeProactiveFollowUp(qTags,hadResult){ const t=state.character.traits; const phase=state.phase; const baseProb=(t.proactivity||5)/10 + (phase==='Freundschaft'||phase==='Vertraut'?0.1:0) - (state.interest<30?0.2:0); if(Math.random()<baseProb){ state.counters.proactive++; let msg=''; if(!qTags?.length){ msg=pick(['Soll ich dir etwas mit [natur] zeigen?','Möchtest du eine Erinnerung mit #freundlich hören?','Hast du Fotos, die ich für dich taggen soll?']); } else { const pics=selectPhotosForChat(qTags); msg=pics.length?Willst du mehr Bilder wie „${pics[0].name}“ sehen – oder lieber eine Erinnerung dazu?:Magst du mir ein Foto mit [${qTags[0]}] zeigen, dann lerne ich mehr darüber?; }  
      post('ai',msg); logMessage('ai',msg,qTags||[]); adjustInterest(+3,'Interesse zeigen'); }  
    if(state.phase==='Partnerschaft' && state.relationship.status!=='partner' && !/partner|beziehung/.test((state.context.at(-1)?.text||'').toLowerCase())) askForRelationship(); }  
  
  function applyEmotionFromText(t){ let e='neutral'; if(/glücklich|zufrieden|yay|toll|danke|freu/.test(t)) e='happy'; else if(/traurig|down|müde|allein|stress|wütend|ärger/.test(t)) e='concerned'; else if(/warum|wieso|wie|was|erklär|erzähle/.test(t)) e='curious'; state.emotion=e; $('#emotionLabel').textContent=e; }  
  
  // Natürliche Erinnerungssuche 2.0  
  function findMemoriesSmart(query, queryTags, limit=3){ const q=query.toLowerCase(); const recentBoost=(m)=>1/Math.max(1,(Date.now()-(m._ts||Date.now()))/86400000); const temporalHint=/letztes mal|gestern|vorhin|vor\s+\d+\s+(tagen|wochen)/i.test(q); return state.memories.filter(m=>state.trust>=(m.trust??0)).map(m=>{ const text=(m.title+' '+m.text).toLowerCase(); const tagScore=relevanceScore(m.tags,queryTags); const textScore= (q? (q.split(/\s+/).filter(w=>w.length>2 && text.includes(w)).length) : 0); const rec=recentBoost(m)*(temporalHint?1.8:1); return {m,score: tagScore*2 + textScore + rec}; }).filter(x=>x.score>0.15).sort((a,b)=>b.score-a.score).slice(0,limit).map(x=>x.m) }  
  
  // Export/Import  
  $('#exportChat').addEventListener('click',()=>{ const lines=[...messagesEl.querySelectorAll('.msg')].map(el=>el.innerText.replace(/\n.*$/,'').trim()); download('badchat_chat.txt',lines.join('\n')) }); $('#exportData').addEventListener('click',()=>{ download('badchat_data.json',JSON.stringify(state,null,2)) }); $('#importData').addEventListener('click',()=>{ const i=document.createElement('input'); i.type='file'; i.accept='application/json'; i.onchange=async()=>{ const f=i.files?.[0]; if(!f) return; const js=JSON.parse(await f.text()); Object.assign(state,js); store.save(state); renderAll(); toast('Daten importiert') }; i.click() });  
  
  // Rendering  
  function renderAll(){ $('#trust').value=state.trust; $('#trustValue').textContent=state.trust; $('#phaseLabel').textContent=state.phase; $('#emotionLabel').textContent=state.emotion; $('#interestLabel').textContent=state.interest; computeCloseness(); $$('.range[data-key]').forEach(r=>r.value=state.values[r.dataset.key]??r.value); renderPills('interests',state.interests,v=>{state.interests=state.interests.filter(x=>x!==v); store.save(state); renderAll()}); renderPills('preferences',state.preferences,v=>{state.preferences=state.preferences.filter(x=>x!==v); store.save(state); renderAll()}); renderMemories(); renderPhotos(); renderTags(); renderGoals(); }  
  function renderGoals(){ const el=$('#goals'); el.innerHTML=''; state.goals.forEach(g=>{ const s=document.createElement('span'); s.className='pill'; s.textContent=g; el.appendChild(s) }) }  
  function renderPills(id,arr,onRemove){ const root=$('#'+id); root.innerHTML=''; arr.forEach(v=>{ const span=document.createElement('span'); span.className='tag'; span.innerHTML=${escapeHtml(v)} <button title="Entfernen" style="all:unset;cursor:pointer">✕</button>; span.querySelector('button').addEventListener('click',()=>onRemove?.(v)); root.appendChild(span) }) }  
  function renderMemories(){ const q=$('#memSearch').value?.toLowerCase()||''; const root=$('#memoryList'); root.innerHTML=''; state.memories.filter(m=>filterByQuery((m.title+' '+m.text+' '+m.tags.join(' ')).toLowerCase(),q)).forEach(m=>{ const card=document.createElement('div'); card.className='stat'; const safeTitle=sanitize(m.title); const safeText=sanitize(m.text); card.innerHTML=<strong>${escapeHtml(safeTitle)}</strong><br><small>Trust ≥ ${m.trust} · Tags: ${m.tags.map(t=>'#'+t).join(' ')||'—'}</small><p>${escapeHtml(safeText)}</p><div class="row"><button class="btn" data-act="edit">Bearbeiten</button><button class="btn" data-act="del">Löschen</button></div>; card.querySelector('[data-act=del]').addEventListener('click',()=>{ state.memories=state.memories.filter(x=>x.id!==m.id); store.save(state); renderMemories() }); card.querySelector('[data-act=edit]').addEventListener('click',()=>{ const title=sanitize(prompt('Titel',m.title)||m.title); const text=sanitize(prompt('Text',m.text)||m.text); const trust=clamp(parseInt(prompt('Trust (0–10)',m.trust)||m.trust,10),0,10); const tags=expandTags((prompt('Tags (komma)',m.tags.join(','))||'').split(',').map(s=>s.trim())); Object.assign(m,{title,text,trust,tags}); TagDB.learn(tags); store.save(state); renderMemories() }); root.appendChild(card) }) }  
  function renderPhotos(){ const q=$('#photoSearch').value?.toLowerCase()||''; const root=$('#photoGrid'); root.innerHTML=''; state.photos.filter(p=>filterByQuery((p.name+' '+p.tags.join(' ')).toLowerCase(),q)).forEach(p=>{ const cell=document.createElement('div'); cell.className='thumb'; const locked=(state.trust<(p.trust??0)); const audit=p.audit?  
Auto: ${(p.audit.autoReasons||[]).join('; ')}  
NameTags: ${(p.audit.fromName||[]).join(', ')}:''; const label=${escapeHtml(sanitize(p.name))} · ${p.by==='ai'?'KI':'Nutzer'} · ${p.sensitivity}  
Tags: ${p.tags.map(t=>'#'+t).join(' ')}${audit}; cell.innerHTML=locked?<div title="${label}"><div class=\"badge\">Gesperrt · Trust ≥ ${p.trust??0}</div><small>${label.split('  
')[0]}</small></div>:<img src="${p.dataUrl}" alt="${label}" loading="lazy" title="${label}" />; root.appendChild(cell) }) } · ${p.by==='ai'?'KI':'Nutzer'} · ${p.sensitivity}; cell.innerHTML=locked?<div><div class="badge">Gesperrt · Trust ≥ ${p.trust??0}</div><small>${label}</small></div>:<img src="${p.dataUrl}" alt="${label}" loading="lazy" title="${label}" />; root.appendChild(cell) }) }  
  function renderTags(){ const root=$('#tagList'); root.innerHTML=''; const db=state.tagDB||{}; const keys=Object.keys(db).length?Object.keys(db):state.tags; keys.forEach(t=>{ const info=db[t]; const label=info?${t} · ${info.category} · ${info.sensitivity}:t; const span=document.createElement('span'); span.className='tag'; span.textContent=label; root.appendChild(span) }) }  
  
  // Utils  
  function cid(){return Math.random().toString(36).slice(2,10)} function clamp(n,min,max){return Math.max(min,Math.min(max,n))} function pick(a){return a[Math.floor(Math.random()*a.length)]}  
  function escapeHtml(s){return s.replace(/[&<>"']/g,m=>({"&":"&amp;","<":"&lt;",">":"&gt;","\"":"&quot;","'":"&#39;"}[m]))} function filterByQuery(text,q){return !q||text.includes(q)} function toast(msg){const t=document.createElement('div'); t.textContent=msg; Object.assign(t.style,{position:'fixed',inset:'auto auto 20px 20px',padding:'10px 12px',border:'1px solid var(--muted)',background:'#0f1a2d',borderRadius:'10px',color:'var(--text)',boxShadow:'var(--shadow)',zIndex:9999}); document.body.appendChild(t); setTimeout(()=>t.remove(),2600)}  
  function fileToDataURL(file){return new Promise((res,rej)=>{const r=new FileReader(); r.onload=()=>res(r.result); r.onerror=rej; r.readAsDataURL(file)})}  
  function parseTagsFromName(name){ const tagMatches=[...name.matchAll(/\[(.*?)\]/g)].map(m=>m[1].toLowerCase().replace(/\s+/g,'-')); const trustMatch=name.match(/vertrauenslevel\s*(\d+)/i); return {tags:tagMatches.filter(Boolean), trust:trustMatch?Number(trustMatch[1]):0} }  
  function safeTag(t){ if(!t) return ''; t=t.toLowerCase().trim(); t=sanitize(t); return t.replace(/[^a-z0-9-]/g,'-').replace(/--+/g,'-') }  
  
  // Drag&Drop  
  const composer=$('#composer'); composer.addEventListener('dragover',e=>{e.preventDefault(); composer.style.outline='2px dashed var(--acc)'}); composer.addEventListener('dragleave',()=>composer.style.outline='none'); composer.addEventListener('drop',async e=>{ e.preventDefault(); composer.style.outline='none'; const files=[...e.dataTransfer.files].filter(f=>f.type.startsWith('image/')); if(!files.length) return; const f=files[0]; chatFile.files=new DataTransfer(); chatFile.files.items?.add?.(f); $('#attachedName').hidden=false; $('#attachedName').textContent='Angehängt: '+sanitize(f.name); });  
  
  // Init  
  (function init(){ renderAll(); reevaluatePhase(); if(!state._welcomed){ post('ai',Willkommen! Ich bin ${state.character.name}. Ich verstehe Tags in [Klammern]/#hashtags, kann mehrere passende Bilder zeigen, lerne neue Tags & speichere Erinnerungen in Ich‑Perspektive. Frag mich z. B.: "Zeig mir Fotos mit [natur]" oder "Erzähl die Erinnerung [spaziergang]".); state._welcomed=true; store.save(state) } $('#whyPhase').addEventListener('click',()=>{ alert(state.phaseReason||'Noch kein Phasenwechsel begründet.'); }); })();  
  const download=(filename,text)=>{ const a=document.createElement('a'); a.href=URL.createObjectURL(new Blob([text],{type:'text/plain'})); a.download=filename; a.click(); setTimeout(()=>URL.revokeObjectURL(a.href),1000) };  
  </script></body>  
</html>     <!doctype html>  
<html lang="de">  
<head>  
<meta charset="utf-8"/>  
<meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover"/>  
<title>BadChat — Responsive + UI‑Tuning</title>  
<style>  
/* =========================  
   Design System (tunable)  
   ========================= */  
:root{  
  --bg:#0b1220;         /* Hintergrundverlauf */  
  --panel:#0e1a2f;      /* Paneel-Fläche */  
  --surface:#101f3a;    /* Kontrastere Fläche */  
  --muted:#263352;      /* Dezente Linien */  
  --border:#2a3a5c;     /* Rahmenfarbe */  
  --text:#e8eef7;       /* Haupttext */  
  --text-dim:#b9c7dd;   /* abgeschwächter Text */  
  --accent:#82b1ff;     /* Akzent 1 */  
  --accent-2:#7ee3d9;   /* Akzent 2 */  
  --danger:#ff6b6b;     /* Fehler */  
  --ok:#85e0a3;         /* OK */  
  --warn:#ffd166;       /* Warnung */  
  --shadow:0 10px 30px rgba(0,0,0,.35);  
  --radius:16px;        /* große Rundung */  
  --radius-sm:12px;     /* kleine Rundung */  
  --gap:12px;           /* Standard-Abstand */  
  --touch:52px;         /* Höhe von Buttons/Inputs */  
  --font:15px;          /* Basis-Schrift */  
  --nav-h:56px;         /* Höhe Bottom-Nav */  
  --bubble-r:14px;      /* Chatblasen-Radius */  
}  
*{box-sizing:border-box}  
html,body{height:100%}  
body{  
  margin:0;background:linear-gradient(180deg,#0a1120 0%, #0c1425 100%);  
  color:var(--text);font:var(--font)/1.45 system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif;  
  -webkit-text-size-adjust:100%;  
}  
a{color:var(--accent);text-decoration:none}  
button{font:inherit}  
img{max-width:100%;display:block}  
hr{border:0;border-top:1px solid var(--muted);opacity:.6}  
.container{max-width:1200px;margin:0 auto;padding:0 12px}  
  
/* =========================  
   App Shell  
   ========================= */  
.appbar{position:sticky;top:0;z-index:10;background:rgba(8,14,28,.88);backdrop-filter:saturate(120%) blur(10px);border-bottom:1px solid var(--muted)}  
.appbar .row{display:flex;align-items:center;justify-content:space-between;padding:10px 8px}  
.brand{display:flex;align-items:center;gap:10px}  
.brand .logo{width:28px;height:28px;border-radius:8px;background:linear-gradient(135deg,var(--accent),var(--accent-2));box-shadow:var(--shadow)}  
.badges{display:flex;gap:8px;flex-wrap:wrap}  
.badge{border:1px solid var(--border);border-radius:999px;padding:3px 8px;font-size:.9rem;color:var(--text-dim)}  
  
/* Bottom nav */  
.navbar{position:fixed;left:0;right:0;bottom:0;z-index:10;background:rgba(10,18,34,.98);border-top:1px solid var(--muted);display:grid;grid-template-columns:repeat(4,1fr);height:var(--nav-h)}  
.navbar button{appearance:none;border:0;background:transparent;color:var(--text-dim);padding:6px 4px;height:var(--nav-h);display:flex;flex-direction:column;align-items:center;justify-content:center;gap:2px}  
.navbar button.active{color:var(--text)}  
.navbar .ic{display:block;font-size:20px;line-height:1}  
.navbar.compact .lbl{display:none}  
  
/* Layout */  
main{padding:12px 0 calc(var(--nav-h) + 12px) 0}  
.grid{display:grid;gap:var(--gap);grid-template-columns: 1fr}  
@media(min-width: 960px){ .grid{grid-template-columns: 1.35fr .65fr} }  
  
/* Cards */  
.card{background:linear-gradient(180deg, #0e1a2f, #0d1830);border:1px solid var(--border);border-radius:var(--radius);box-shadow:var(--shadow);overflow:hidden}  
.card header{display:flex;align-items:center;justify-content:space-between;padding:10px 12px;border-bottom:1px solid var(--muted)}  
.card .body{padding:12px}  
  
/* Controls */  
.btn{border:1px solid var(--border);background:linear-gradient(180deg,#13274a,#102242);color:var(--text);padding:10px 12px;border-radius:12px;cursor:pointer;transition:.15s;min-height:var(--touch)}  
.btn:hover{filter:brightness(1.07)}  
.btn.ghost{background:transparent}  
.btn.primary{border-color:transparent;background:linear-gradient(180deg, #5a8cff, #4e79db);box-shadow:0 6px 18px rgba(90,140,255,.25)}  
.btn.success{background:linear-gradient(180deg,#34c795,#27b885);border-color:transparent}  
.btn.warn{background:linear-gradient(180deg,#ffd166,#f3b84b);border-color:transparent;color:#0f0f0f}  
.iconbtn{display:inline-flex;align-items:center;gap:8px}  
input[type="text"], textarea, select{width:100%;padding:12px;border-radius:12px;border:1px solid var(--border);background:#0c1830;color:var(--text);min-height:var(--touch);font-size:1em}  
textarea{min-height:110px;resize:vertical}  
  
/* Chat */  
.chat{display:flex;flex-direction:column;min-height:60vh;max-height:72vh;overflow:auto;scroll-behavior:smooth}  
.msg{display:flex;gap:8px;align-items:flex-start;margin:8px 12px}  
.msg .bubble{max-width:86%;padding:10px 12px;border:1px solid var(--border);border-radius:var(--bubble-r)}  
.msg.ai .bubble{background:#0d203e}  
.msg.me{justify-content:flex-end}  
.msg.me .bubble{background:#14274c}  
.msg .imgs{display:flex;flex-wrap:wrap;gap:8px;margin-top:6px}  
.msg .imgs img{width:132px;height:96px;object-fit:cover;border-radius:10px;border:1px solid var(--muted)}  
.composer{display:flex;gap:8px;padding:10px;border-top:1px solid var(--muted);position:sticky;bottom:0;background:rgba(14,26,47,.95);backdrop-filter:blur(8px)}  
  
/* Gallery + Memories */  
.gallery{display:grid;grid-template-columns:repeat(auto-fill,minmax(104px,1fr));gap:8px}  
.gallery img{width:100%;height:104px;object-fit:cover;border-radius:10px;border:1px solid var(--muted)}  
@media(min-width:600px){ .gallery img{height:120px} }  
  
/* Modals / Sheets */  
.modal{position:fixed;inset:0;background:rgba(0,0,0,.5);display:none;align-items:center;justify-content:center;z-index:30}  
.modal.open{display:flex}  
.sheet{width:min(860px,96vw);max-height:92vh;overflow:auto;background:var(--panel);border:1px solid var(--border);border-radius:20px;box-shadow:var(--shadow)}  
.sheet header{display:flex;align-items:center;justify-content:space-between;padding:12px 14px;border-bottom:1px solid var(--muted)}  
.sheet .grid{display:grid;grid-template-columns:1fr 1fr;gap:12px;padding:12px 14px}  
.sheet .row{display:flex;gap:10px;align-items:center}  
.sheet small{color:var(--text-dim)}  
@media(max-width: 640px){ .sheet .grid{grid-template-columns:1fr} }  
  
/* Debug panel */  
.dbg{position:fixed;right:16px;bottom:16px;z-index:40;width:min(520px,96vw);max-height:60vh;overflow:auto;border:1px solid var(--border);background:#0b1324;border-radius:14px;box-shadow:var(--shadow);display:none}  
.dbg header{display:flex;justify-content:space-between;align-items:center;padding:8px 10px;border-bottom:1px solid var(--muted)}  
.dbg pre{margin:0;padding:10px;white-space:pre-wrap}  
  
/* Safe areas */  
@supports(padding:max(0px)){  
  .navbar{padding-bottom: max(0px, env(safe-area-inset-bottom));}  
}  
</style>  
</head>  
<body>  
  <div class="appbar">  
    <div class="container row">  
      <div class="brand"><div class="logo"></div><strong>BadChat</strong></div>  
      <div class="badges">  
        <span class="badge">Phase: <span id="phaseLabel">Kennenlernen</span></span>  
        <span class="badge">Subphase: <span id="subphaseLabel">aufwärmen</span></span>  
        <span class="badge">Trust: <span id="trustLabel">0</span></span>  
      </div>  
    </div>  
  </div>  
  
  <nav class="navbar" id="nav">  
    <button data-view="chat" class="active"><span class="ic">💬</span><div class="lbl">Chat</div></button>  
    <button data-view="media"><span class="ic">🖼️</span><div class="lbl">Medien</div></button>  
    <button data-view="mems"><span class="ic">🗂️</span><div class="lbl">Erinnern.</div></button>  
    <button data-view="more"><span class="ic">☰</span><div class="lbl">Mehr</div></button>  
  </nav>  
  
  <main class="container">  
    <div class="grid">  
      <!-- Chat column -->  
      <section class="card" id="view-chat">  
        <header>  
          <div class="row" style="gap:8px">  
            <button class="btn ghost iconbtn" id="dbgToggle"><span>🧪</span><span>Debug</span></button>  
            <button class="btn ghost iconbtn" id="charEditFab"><span>🧩</span><span>Charakter</span></button>  
          </div>  
          <div class="row" style="gap:8px">  
            <button class="btn ghost iconbtn" id="genSync"><span>🔗</span><span>Sync</span></button>  
            <button class="btn ghost iconbtn" id="importSync"><span>⬇️</span><span>Einfügen</span></button>  
            <button class="btn primary iconbtn" id="openExport"><span>📦</span><span>Export</span></button>  
          </div>  
        </header>  
        <div class="body" style="padding:0">  
          <div id="messages" class="chat"></div>  
          <div class="composer">  
            <input id="chatFile" type="file" accept="image/*" class="btn" style="max-width:200px"/>  
            <input id="text" type="text" placeholder="Nachricht… z. B. #szene natur"/>  
            <button class="btn primary" id="send">Senden</button>  
          </div>  
        </div>  
      </section>  
  
      <!-- Right column -->  
      <aside class="card" id="view-media">  
        <header>  
          <strong>Medien</strong>  
          <div class="row" style="gap:8px"><button class="btn ghost" id="addPhoto">+ Foto</button></div>  
        </header>  
        <div class="body"><div class="gallery" id="gallery"></div></div>  
        <header><strong>Neue Erinnerung</strong></header>  
        <div class="body">  
          <div class="row" style="gap:8px; margin-bottom:8px">  
            <input id="memTitle" type="text" placeholder="Titel"/>  
            <button class="btn" id="makeMemory">Speichern</button>  
          </div>  
          <textarea id="memText" placeholder="Erinnerungstext… (Hashtags #tag möglich)"></textarea>  
        </div>  
      </aside>  
    </div>  
  </main>  
  
  <!-- More panel (sheet) -->  
  <div class="modal" id="moreModal">  
    <div class="sheet">  
      <header>  
        <strong>Mehr</strong>  
        <button class="btn" id="moreClose">Schließen</button>  
      </header>  
      <div class="grid">  
        <div>  
          <h3>Sync</h3>  
          <div class="row" style="gap:8px">  
            <button class="btn" id="genSync2">🔗 Sync-Code</button>  
            <button class="btn" id="importSync2">⬇️ Einfügen</button>  
          </div>  
        </div>  
        <div>  
          <h3>Export / Import</h3>  
          <div class="row" style="gap:8px">  
            <button class="btn" id="btnExportJSON">Export JSON</button>  
            <button class="btn" id="btnExportHTML">Export HTML Galerie</button>  
            <button class="btn" id="btnImport">Import JSON</button>  
          </div>  
        </div>  
        <div>  
          <h3>UI‑Tuning</h3>  
          <div class="row" style="gap:8px;flex-wrap:wrap">  
            <button class="btn" id="openUi">⚙️ Öffnen</button>  
            <small>Stelle Größe/Rundungen/Bottom‑Nav live ein.</small>  
          </div>  
        </div>  
      </div>  
    </div>  
  </div>  
  
  <!-- UI‑Tuning modal -->  
  <div class="modal" id="uiModal">  
    <div class="sheet">  
      <header>  
        <strong>UI‑Tuning</strong>  
        <button class="btn" id="uiClose">Schließen</button>  
      </header>  
      <div class="grid">  
        <div>  
          <label>Basis‑Schriftgröße  
            <input id="uiFont" type="range" min="13" max="19" step="1"/>  
          </label>  
          <small>Aktuell: <span id="uiFontVal"></span> px</small>  
        </div>  
        <div>  
          <label>Touch‑Zielhöhe  
            <input id="uiTouch" type="range" min="44" max="68" step="2"/>  
          </label>  
          <small>Aktuell: <span id="uiTouchVal"></span> px</small>  
        </div>  
        <div>  
          <label>Bottom‑Nav Höhe  
            <input id="uiNav" type="range" min="48" max="76" step="2"/>  
          </label>  
          <small>Aktuell: <span id="uiNavVal"></span> px</small>  
        </div>  
        <div>  
          <label>Chatblasen‑Rundung  
            <input id="uiBubble" type="range" min="8" max="22" step="1"/>  
          </label>  
          <small>Aktuell: <span id="uiBubbleVal"></span> px</small>  
        </div>  
        <div>  
          <label>Navbar‑Labels  
            <select id="uiNavLabels">  
              <option value="on">Icon + Text</option>  
              <option value="off">Nur Icons</option>  
            </select>  
          </label>  
        </div>  
        <div>  
          <button class="btn" id="uiReset">Zurücksetzen</button>  
          <small>Setzt auf Standardwerte zurück.</small>  
        </div>  
      </div>  
    </div>  
  </div>  
  
  <!-- Character editor -->  
  <div class="modal" id="charModal">  
    <div class="sheet">  
      <header>  
        <strong>Charakter‑Einstellungen</strong>  
        <div class="row"><span class="badge">Phase: <span id="phaseMeta">?</span></span><span class="badge">Subphase: <span id="subphaseMeta">?</span></span></div>  
        <button class="btn" id="charClose">Schließen</button>  
      </header>  
      <div class="grid">  
        <div><label>Name<input id="chName" type="text" placeholder="Name"/></label></div>  
        <div><label>Max. Sensibilität  
          <select id="chMaxSens"><option>low</option><option selected>medium</option><option>high</option></select>  
        </label></div>  
        <div class="row" style="grid-column:1/3"><label style="width:100%">Persona  
          <textarea id="chPersona" rows="2" placeholder="Ich‑Perspektive, Charakterton…"></textarea></label></div>  
        <div><label>Interessen (Komma‑getrennt)<input id="chInterests" type="text" placeholder="natur, reisen"/></label></div>  
        <div><label>max Bilder/Nachricht<input type="range" min="1" max="4" step="1" id="trMulti"/></label><small>Aktuell: <span id="trMultiVal">3</span></small></div>  
        <div><label>Relevanz‑Schwelle<input type="range" min="0" max="10" step="1" id="trRel"/></label><small>Aktuell: <span id="trRelVal">5</span></small></div>  
        <div><label>Proaktivität<input type="range" min="0" max="10" step="1" id="trPro"/></label><small>Aktuell: <span id="trProVal">5</span></small></div>  
        <div><label>Verbosity<input type="range" min="1" max="3" step="1" id="trVerb"/></label><small>Aktuell: <span id="trVerbVal">2</span></small></div>  
      </div>  
    </div>  
  </div>  
  
  <!-- Debug overlay -->  
  <div class="dbg" id="dbgPanel">  
    <header><strong>Debug</strong><button class="btn" id="dbgClose">Schließen</button></header>  
    <pre id="dbgPre">(leer)</pre>  
  </div>  
  
<script>  
// ===== Helpers & Store =====  
window.VERSION = "bc-responsive-ui-1.1";  
const store={save(s){try{localStorage.setItem('badchat_state',JSON.stringify(s));}catch{}},load(){try{return JSON.parse(localStorage.getItem('badchat_state')||'null')||null}catch{return null}}};  
const uiStore={save(s){try{localStorage.setItem('badchat_ui',JSON.stringify(s));}catch{}},load(){try{return JSON.parse(localStorage.getItem('badchat_ui')||'null')||null}catch{return null}}};  
const $=(sel,ctx=document)=>ctx.querySelector(sel); const $$=(sel,ctx=document)=>[...ctx.querySelectorAll(sel)];  
function clamp(n,min,max){return Math.max(min,Math.min(max,n))} function pick(a){return a[Math.floor(Math.random()*a.length)]}  
function toast(m){const t=document.createElement('div');t.textContent=m;t.style.cssText='position:fixed;left:50%;transform:translateX(-50%);bottom:calc(var(--nav-h) + 12px);background:#0f2244;border:1px solid var(--muted);padding:10px 12px;border-radius:10px;z-index:50';document.body.appendChild(t);setTimeout(()=>t.remove(),1800)}  
  
// ===== State =====  
let state=store.load()||{character:{name:"Aurora",persona:"Ich bin warmherzig und neugierig.",maxSensitivity:"medium",traits:{multiImageLimit:3,relevanceThreshold:5,proactivity:6,verbosity:2}},interests:["natur"],phase:"Kennenlernen",subphase:"aufwärmen",subphaseScore:20,trust:1,interest:20,photos:[],memories:[]};  
  
// ===== Tag Helpers =====  
function normalizeTag(t){return String(t||'').toLowerCase().trim()} function expandTags(ts){return [...new Set((ts||[]).map(normalizeTag))]}  
function computeSensitivity(tags){const t=expandTags(tags);if(t.includes('selfie')||t.includes('person'))return'medium';if(t.includes('nacht'))return'medium';return'low'}  
function minSensitivity(a,b){const o=['low','medium','high'];return o[Math.min(o.indexOf(a),o.indexOf(b))]||'low'}  
function allowedBySensitivity(s,m){const o=['low','medium','high'];return o.indexOf(s)<=o.indexOf(m)}  
function relevanceScore(item,query){const A=new Set((item||[]).map(normalizeTag)),B=new Set((query||[]).map(normalizeTag));if(!B.size)return 5;let inter=0;B.forEach(t=>inter+=A.has(t)?1:0);return inter?(5+5*Math.min(1,inter/Math.max(1,B.size))):0}  
  
// ===== Phase / Trust =====  
const PHASE_RULES={"Kennenlernen":{thresholds:{trustMin:0,trustMax:3,interestMin:0,interestMax:40,closenessMin:0,closenessMax:35},hysteresis:0.5,maxSensitivity:"low",maxImages:1},"Vertrauen aufbauen":{thresholds:{trustMin:3,trustMax:6,interestMin:30,interestMax:65,closenessMin:30,closenessMax:60},hysteresis:0.7,maxSensitivity:"medium",maxImages:2},"Freundschaft":{thresholds:{trustMin:5.5,trustMax:7.5,interestMin:55,interestMax:80,closenessMin:55,closenessMax:80},hysteresis:0.8,maxSensitivity:"medium",maxImages:3},"Vertraut":{thresholds:{trustMin:7,trustMax:9,interestMin:65,interestMax:90,closenessMin:70,closenessMax:90},hysteresis:1.0,maxSensitivity:"medium",maxImages:3},"Partnerschaft":{thresholds:{trustMin:8.5,trustMax:10,interestMin:75,interestMax:100,closenessMin:80,closenessMax:100},hysteresis:1.2,maxSensitivity:"high",maxImages:4}};  
function getPhaseConfig(n){return PHASE_RULES[n]||PHASE_RULES['Kennenlernen']} function bandGap(v,min,max){if(v<min)return v-min; if(v>max)return v-max; return 0}  
function computeCloseness(){state.subphaseScore=clamp(Math.round((state.trust||0)*8+(state.interest||0)*0.3),0,100)}  
function chooseSubphase(ph){const s=state.subphaseScore||0;const cfg=getPhaseConfig(ph);const mid=(cfg.thresholds.closenessMin+cfg.thresholds.closenessMax)/2;return s<mid?'aufwärmen':'vertraut'}  
function nextPhaseByMetrics(cur){const ORDER=['Kennenlernen','Vertrauen aufbauen','Freundschaft','Vertraut','Partnerschaft'];const t=state.trust||0,i=state.interest||0,c=state.subphaseScore||0;const idx=Math.max(0,ORDER.indexOf(cur));const cfg=getPhaseConfig(cur);const h=cfg.hysteresis||0.5;const hi=(t>=(cfg.thresholds.trustMax+h))&&(i>=(cfg.thresholds.interestMax+h*10))&&(c>=(cfg.thresholds.closenessMax+h*10));const lo=(t<(cfg.thresholds.trustMin-h))||(i<(cfg.thresholds.interestMin-h*10))||(c<(cfg.thresholds.closenessMin-h*10));if(hi&&idx<ORDER.length-1)return ORDER[idx+1]; if(lo&&idx>0)return ORDER[idx-1]; let best=cur,bestGap=Infinity;for(const name of ORDER){const cf=getPhaseConfig(name);const gap=Math.abs(bandGap(t,cf.thresholds.trustMin,cf.thresholds.trustMax))+Math.abs(bandGap(i,cf.thresholds.interestMin,cf.thresholds.interestMax))+Math.abs(bandGap(c,cf.thresholds.closenessMin,cf.thresholds.closenessMax));if(gap<bestGap){best=name;bestGap=gap}} return best}  
function reevaluatePhase(){computeCloseness();const before=state.phase;const after=nextPhaseByMetrics(before);if(after!==before){state.phase=after;state._lastPhaseChange=Date.now();state.phaseReason=${before} → ${after};toast('Phase ➜ '+after);post('ai',🔄 Ich denke, wir sind jetzt in **${after}**. Wenn du magst: „Warum Phase?“)} state.subphase=chooseSubphase(state.phase);$('#phaseLabel').textContent=state.phase;$('#subphaseLabel').textContent=state.subphase;store.save(state)}  
function logTrust(d){state.trust=clamp((state.trust||0)+d,0,10);$('#trustLabel').textContent=String(state.trust);state.interest=clamp((state.interest||0)+Math.round(d*2),0,100);state.subphaseScore=clamp((state.subphaseScore||0)+Math.round(d*2),0,100);store.save(state);reevaluatePhase()}  
  
// ===== Chat =====  
const $msg=$('#messages'); function renderMessage(role,text,images){const li=document.createElement('div');li.className='msg '+role;const b=document.createElement('div');b.className='bubble';b.innerHTML=String(text||'').replace(/\n/g,'<br/>');if(images&&images.length){const wrap=document.createElement('div');wrap.className='imgs';images.forEach(src=>{const im=new Image();im.src=src;wrap.appendChild(im)});b.appendChild(wrap)} li.appendChild(b);$msg.appendChild(li);$msg.scrollTop=$msg.scrollHeight;return li} function post(role,t,imgs){return renderMessage(role,t,imgs)}  
  
// ===== Fotos =====  
function addPhotoObject(name,dataUrl,tags,trust=0,by='user'){const p={name,dataUrl,tags:expandTags(tags),trust,by,sensitivity:computeSensitivity(tags)};state.photos.push(p);renderGallery();store.save(state)}  
function renderGallery(){const g=$('#gallery');g.innerHTML='';state.photos.forEach(p=>{const img=new Image();img.src=p.dataUrl;img.title=${p.name}\n#${(p.tags||[]).join(' #')};g.appendChild(img)})}  
function selectPhotosForChat(query){const ch=state.character,pr=PHASE_RULES[state.phase]||{};const maxSens=minSensitivity(ch.maxSensitivity,pr.maxSensitivity||'high');const maxImgs=Math.max(1,Math.min(ch.traits.multiImageLimit||3,pr.maxImages||3));const relThresh=(ch.traits.relevanceThreshold||5)/2;const rows=(state.photos||[]).map(p=>{const sens=p.sensitivity||computeSensitivity(p.tags);const score=relevanceScore(p.tags,query);const allowed=allowedBySensitivity(sens,maxSens)&&score>=relThresh&&(state.trust||0)>=(p.trust||0);return {name:p.name,score,allowed}});return rows.filter(r=>r.allowed).sort((a,b)=>b.score-a.score).slice(0,maxImgs).map(r=>state.photos.find(p=>p.name===r.name))}  
  
// ===== Memories =====  
function addMemory(obj){const m={id:'m'+Math.random().toString(36).slice(2),title:obj.title||'Notiz',text:obj.text||'',tags:expandTags(obj.tags||[]),trust:obj.trust||0,importance:obj.importance||1,_ts:Date.now()};(m.text.split(/\s+/).filter(t=>t.startsWith('#')).map(t=>normalizeTag(t.slice(1)))).forEach(t=>m.tags.push(t));m.tags=[...new Set(m.tags)];state.memories.push(m);store.save(state);toast('Erinnerung gespeichert');return m}  
  
// ===== Quick‑Sync & Export =====  
(function(){const b64=s=>btoa(unescape(encodeURIComponent(s)));const unb64=s=>decodeURIComponent(escape(atob(s)));function makeSync(){return b64(JSON.stringify(state))} function importSync(code){const data=JSON.parse(unb64(String(code||'').trim()));Object.assign(state,data);store.save(state);renderGallery();$('#phaseLabel').textContent=state.phase;$('#trustLabel').textContent=String(state.trust);post('ai','Sync importiert.')} $('#genSync')?.addEventListener('click',()=>{const c=makeSync();navigator.clipboard?.writeText(c);toast('Sync‑Code kopiert')}); $('#importSync')?.addEventListener('click',()=>{const c=prompt('Sync‑Code einfügen:');if(c)importSync(c)}); $('#genSync2')?.addEventListener('click',()=>{const c=makeSync();navigator.clipboard?.writeText(c);toast('Sync‑Code kopiert')}); $('#importSync2')?.addEventListener('click',()=>{const c=prompt('Sync‑Code einfügen:');if(c)importSync(c)}); $('#openExport')?.addEventListener('click',()=>$('#moreModal').classList.add('open')); $('#moreClose')?.addEventListener('click',()=>$('#moreModal').classList.remove('open')); function dl(name,blob){const a=document.createElement('a');a.href=URL.createObjectURL(blob);a.download=name;document.body.appendChild(a);a.click();setTimeout(()=>{URL.revokeObjectURL(a.href);a.remove()},1000)} $('#btnExportJSON')?.addEventListener('click',()=>{const payload={version:window.VERSION,exportedAt:new Date().toISOString(),state};dl('badchat_export.json',new Blob([JSON.stringify(payload,null,2)],{type:'application/json'}))}); $('#btnExportHTML')?.addEventListener('click',()=>{const html=['<!doctype html><meta charset="utf-8"><title>BadChat Export</title><style>body{background:#0b1324;color:#e7ecf4;font:14px system-ui}img{max-width:180px;border:1px solid #2a3550;border-radius:8px}</style><h1>BadChat Export</h1>'];html.push('<h2>Fotos</h2>');html.push((state.photos||[]).map(p=><figure><img src="${p.dataUrl}"><figcaption>${p.name} — #${(p.tags||[]).join(' #')}</figcaption></figure>).join(''));html.push('<h2>Erinnerungen</h2>');html.push((state.memories||[]).map(m=><div><strong>${m.title}</strong><br><small>${new Date(m._ts||Date.now()).toLocaleString()}</small><p>${m.text}</p><small>#${(m.tags||[]).join(' #')}</small></div>).join(''));dl('badchat_gallery.html',new Blob([html.join('')],{type:'text/html'}))}); $('#btnImport')?.addEventListener('click',async()=>{const inp=document.createElement('input');inp.type='file';inp.accept='.json,application/json';inp.onchange=async()=>{const text=await inp.files[0].text();const data=JSON.parse(text);const mode=prompt('Import‑Modus: "merge" oder "overwrite"?','merge');if(!mode)return; if(mode==='overwrite'){state=data.state||state}else{const pIndex=new Map((state.photos||[]).map(p=>[p.name,p]));(data.state?.photos||[]).forEach(p=>{if(!pIndex.has(p.name))state.photos.push(p)});const mIndex=new Map((state.memories||[]).map(m=>[m.id,m]));(data.state?.memories||[]).forEach(m=>{if(!mIndex.has(m.id))state.memories.push(m)})} store.save(state);renderGallery();post('ai','Import abgeschlossen.')};inp.click()})})();  
  
// ===== Character Editor =====  
(function(){const modal=$('#charModal');$('#charEditFab')?.addEventListener('click',()=>{fill();modal.classList.add('open')});$('#charClose')?.addEventListener('click',()=>modal.classList.remove('open'));function bindRange(id,val){const el=$('#'+id),out=$('#'+id+'Val');el.value=val;if(out)out.textContent=val} function fill(){const c=state.character||{};const t=c.traits||{};$('#phaseMeta').textContent=state.phase;$('#subphaseMeta').textContent=state.subphase;$('#chName').value=c.name||'';$('#chPersona').value=c.persona||'';$('#chMaxSens').value=c.maxSensitivity||'medium';$('#chInterests').value=(state.interests||[]).join(', ');bindRange('trMulti',t.multiImageLimit??3);bindRange('trRel',t.relevanceThreshold??5);bindRange('trPro',t.proactivity??5);bindRange('trVerb',t.verbosity??2)} ['trMulti','trRel','trPro','trVerb'].forEach(id=>$('#'+id)?.addEventListener('input',e=>{$('#'+id+'Val')?.textContent=e.target.value})); $('#charModal')?.addEventListener('change',()=>{const c=state.character;const t=c.traits;c.name=$('#chName').value||c.name;c.persona=$('#chPersona').value||'';c.maxSensitivity=$('#chMaxSens').value||'medium';const interests=($('#chInterests').value||'').split(',').map(s=>normalizeTag(s.trim())).filter(Boolean);if(interests.length)state.interests=[...new Set(interests)];t.multiImageLimit=parseInt($('#trMulti').value,10);t.relevanceThreshold=parseInt($('#trRel').value,10);t.proactivity=parseInt($('#trPro').value,10);t.verbosity=parseInt($('#trVerb').value,10);store.save(state)})})();  
  
// ===== Debug =====  
(function(){const btn=$('#dbgToggle');const panel=$('#dbgPanel');const pre=$('#dbgPre');function snapshot(){return{version:window.VERSION,phase:state.phase,subphase:state.subphase,trust:state.trust,interest:state.interest,photos:(state.photos||[]).length,memories:(state.memories||[]).length,lastPhase:state._lastPhaseChange||null}} function refresh(){pre.textContent=JSON.stringify(snapshot(),null,2)} btn?.addEventListener('click',()=>{panel.style.display=panel.style.display==='block'?'none':'block';refresh()});$('#dbgClose')?.addEventListener('click',()=>panel.style.display='none');new MutationObserver(()=>{if(panel.style.display==='block')refresh()}).observe($('#messages'),{childList:true})})();  
  
// ===== Composer =====  
let _lastUserMsgTs=Date.now(); $('#send')?.addEventListener('click',()=>{const txt=$('#text').value.trim();if(!txt)return;renderMessage('me',txt);_lastUserMsgTs=Date.now();if(txt.toLowerCase()==='warum phase?'){post('ai',state.phaseReason||'Phasenwechsel basierend auf Trust/Interesse/Nähe.');$('#text').value='';return} if(txt.startsWith('#szene')||txt.includes('szene zu')||/erzähl(e)? eine szene/i.test(txt)){/* handled below */} else {const imgs=selectPhotosForChat(expandTags(txt.split(/\s+/).filter(x=>x.startsWith('#')).map(t=>t.slice(1))));post('ai','Erzähle mir mehr 🙂',(imgs||[]).map(p=>p.dataUrl));logTrust(+0.1)} $('#text').value=''});  
  
// ===== Upload & Gallery =====  
$('#chatFile')?.addEventListener('change',async e=>{const f=e.target.files?.[0];if(!f)return;const url=URL.createObjectURL(f);const name=f.name.replace(/\s+/g,'_');const nm=name.toLowerCase();const tags=[];if(/wald|park|tree|baum|gras|wiese|wander|hike/.test(nm))tags.push('natur');if(/see|meer|lake|ocean|strand|beach|fluss/.test(nm))tags.push('wasser');if(/sky|himmel|wolke/.test(nm))tags.push('himmel');if(/city|stadt|urban|street|skyline|building|architektur/.test(nm))tags.push('stadt');if(/food|essen|pizza|pasta|burger|kuchen|lunch|dinner|frühstück/.test(nm))tags.push('essen');const dataUrl=await new Promise(res=>{const img=new Image();img.onload=()=>{const max=720;const r=Math.min(1,max/Math.max(img.width,img.height));const c=document.createElement('canvas');c.width=Math.round(img.width*r);c.height=Math.round(img.height*r);c.getContext('2d').drawImage(img,0,0,c.width,c.height);res(c.toDataURL('image/jpeg',0.9))};img.src=url});addPhotoObject(name,dataUrl,tags,0,'user');post('ai',Danke für **${name}**! ${tags.length?'Erkannte Tags: #'+tags.join(' #'):'Ich kann Tags vorschlagen, wenn du magst.'})}); $('#addPhoto')?.addEventListener('click',()=>$('#chatFile').click());  
  
// ===== Memories =====  
$('#makeMemory')?.addEventListener('click',()=>{const title=($('#memTitle').value||'Notiz').trim();const text=($('#memText').value||'').trim();if(!text&&!title){toast('Bitte Titel oder Text eingeben.');return} addMemory({title,text,tags:[]});$('#memTitle').value='';$('#memText').value=''});  
  
// ===== Scene Generator =====  
(function(){function norm(s){return String(s||'').toLowerCase().trim()} function parseSceneQuery(text){const t=norm(text);if(t.includes('#szene')){const tail=t.split('#szene')[1]||'';const words=tail.split(/[^\p{L}0-9]+/u).map(norm).filter(Boolean);return words[0]||null} if(t.includes('szene zu')){return t.split('szene zu').pop().trim().split(/\s+/)[0]||null} if(t.includes('erzähle eine szene')||t.includes('erzähl eine szene')||t.includes('erzähl mir eine szene')){return null} return undefined} function anyMemory(){return (state.memories||[])} function memoriesByTag(tag){const t=norm(tag);return (state.memories||[]).filter(m=>(m.tags||[]).map(norm).includes(t))} function sceneFromMemory(mem){const mood=state.mood?.val||0;const T=[{chk:v=>v<-0.6,lead:['Es fühlte sich schwer an,'],sense:['die Luft war kühl'],close:['aber ich blieb dran.']},{chk:v=>v<-0.2,lead:['Ich war nachdenklich,'],sense:['das Licht lag flach'],close:['und ich hörte genauer hin.']},{chk:v=>v<0.2,lead:['Ganz bei mir,'],sense:['die Details traten klar hervor'],close:['ohne Eile.']},{chk:v=>v<0.6,lead:['Mit einem kleinen Lächeln,'],sense:['die Luft roch frisch'],close:['und ich genoss es.']},{chk:()=>true,lead:['Voller Wärme,'],sense:['die Farben wirkten intensiver'],close:['und ich wollte den Moment festhalten.']}];const tone=T.find(x=>x.chk(mood))||T[2];const lead=pick(tone.lead),sense=pick(tone.sense),close=pick(tone.close);const body=(mem.text||'').replace(/\s+/g,' ').slice(0,220);const tagLine=(mem.tags&&mem.tags.length)?('#'+mem.tags.slice(0,3).join(' #')):'';return Eine kleine Szene aus meiner Sicht:\n\n${lead} ${sense}, ${close} ${body? body : (mem.title? 'Es ging um **'+mem.title+'**.' : '')} ${tagLine}} function composeAndPostScene(tag){let mem=null;if(tag){const list=memoriesByTag(tag);mem=list.length?pick(list):null} if(!mem){const pool=anyMemory();mem=pool.length?pick(pool):null} if(!mem){post('ai','Ich habe noch keine passende Erinnerung gespeichert – magst du mir kurz etwas dazu erzählen?');return} const txt=sceneFromMemory(mem);let images=[];try{const imgs=selectPhotosForChat(mem.tags||[]);images=(imgs||[]).slice(0,Math.min(2,state.character?.traits?.multiImageLimit||2)).map(p=>p.dataUrl).filter(Boolean)}catch{} post('ai',txt,images.length?images:undefined)} new MutationObserver(()=>{const msgs=[...$('#messages').querySelectorAll('.msg.me')];if(!msgs.length)return;const txt=msgs.at(-1).innerText||'';const q=parseSceneQuery(txt);if(q!==undefined)composeAndPostScene(q)}).observe($('#messages'),{childList:true})})();  
  
// ===== Proaktive Pings =====  
function canPropose(){const pro=state.character?.traits?.proactivity??5;if(pro<=2)return false;const idle=45000*(8/(pro+3));if(Date.now()-(_lastUserMsgTs||0)<idle)return false;state._proposals=(state._proposals||[]).filter(x=>x>Date.now()-3600e3);return state._proposals.length<4}  
function propose(){const t=["Ich bin noch da 🙂 Wollen wir eine kleine Szene probieren? Schreib z. B. #szene natur","Soll ich dir etwas aus meinen Erinnerungen erzählen?","Magst du mir ein neues Foto schicken? Ich kann Tags vorschlagen."];post('ai',pick(t));(state._proposals||=[]).push(Date.now());logTrust(+0.1)} setInterval(()=>{if(canPropose())propose()},15000);  
  
// ===== Bottom‑Nav Routing =====  
function setView(v){$('#nav .active')?.classList.remove('active');$(#nav button[data-view="${v}"])?.classList.add('active');if(v==='more'){ $('#moreModal').classList.add('open'); return } if(v==='chat'){ $('#messages').scrollTop=$('#messages').scrollHeight }} $$('#nav button').forEach(b=>b.addEventListener('click',()=>setView(b.dataset.view)));  
  
// ===== UI‑Tuning (dynamic) =====  
(function(){const ui=uiStore.load()||{};function apply(u){const r=document.documentElement.style;if(u.font)r.setProperty('--font',u.font+'px');if(u.touch)r.setProperty('--touch',u.touch+'px');if(u.nav)r.setProperty('--nav-h',u.nav+'px');if(u.bubble)r.setProperty('--bubble-r',u.bubble+'px');const nav=$('#nav');if(nav){if(u.navLabels==='off')nav.classList.add('compact');else nav.classList.remove('compact')} uiStore.save(u)} // initialize  
  const cur={font:parseInt(getComputedStyle(document.documentElement).getPropertyValue('--font'))||15,touch:parseInt(getComputedStyle(document.documentElement).getPropertyValue('--touch'))||52,nav:parseInt(getComputedStyle(document.documentElement).getPropertyValue('--nav-h'))||56,bubble:parseInt(getComputedStyle(document.documentElement).getPropertyValue('--bubble-r'))||14,navLabels:($('#nav').classList.contains('compact')?'off':'on')}; Object.assign(cur, ui);  
  apply(cur);  
  // bind UI modal  
  $('#openUi')?.addEventListener('click',()=>{ $('#uiModal').classList.add('open'); fill() });  
  $('#uiClose')?.addEventListener('click',()=> $('#uiModal').classList.remove('open'));  
  $('#uiReset')?.addEventListener('click',()=>{const d={font:15,touch:52,nav:56,bubble:14,navLabels:'on'};apply(d);fill();toast('UI zurückgesetzt')});  
  function fill(){ $('#uiFont').value=cur.font; $('#uiFontVal').textContent=cur.font; $('#uiTouch').value=cur.touch; $('#uiTouchVal').textContent=cur.touch; $('#uiNav').value=cur.nav; $('#uiNavVal').textContent=cur.nav; $('#uiBubble').value=cur.bubble; $('#uiBubbleVal').textContent=cur.bubble; $('#uiNavLabels').value=cur.navLabels }  
  ['uiFont','uiTouch','uiNav','uiBubble'].forEach(id=> $('#'+id)?.addEventListener('input',e=>{ const map={uiFont:'font',uiTouch:'touch',uiNav:'nav',uiBubble:'bubble'}; cur[map[id]]=parseInt(e.target.value,10); apply(cur); fill() }));  
  $('#uiNavLabels')?.addEventListener('change',e=>{ cur.navLabels=e.target.value; apply(cur) });  
})();  
  
// ===== Init =====  
renderGallery(); reevaluatePhase(); post('ai','Hallo! Ich bin bereit. Schicke mir gern Text oder ein Foto. (Tipp: #szene natur)');  
</script>  
</body>  
</html>  
<!-- SHA256: fd5f2857c3057b3d | lines: 510 | source: /mnt/data/badchat_full.html --><!doctype html>  
  
<html lang="de">  
<head>  
<meta charset="utf-8"/>  
<meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover"/>  
<title>BadChat – Ultimate</title>  
<style>  
/* HINWEIS: Diese Version ist die vollständige konsolidierte Single-File-Variante  
   aus der letzten "badchat_full.html". Sie enthält: Chat, Foto-Upload, Galerie,  
   Erinnerungen, Charakter-Editor, Phasen/Trust/Interesse/Closeness,  
   Quick-Sync, Export/Import, Debug-Overlay, Proaktivität, Szene-Generator. */  
:root{  
  --bg:#0b1324; --panel:#0e1a2f; --muted:#2a3550; --text:#e7ecf4; --accent:#82b1ff;  
}  
*{box-sizing:border-box}  
body{margin:0;background:#0b1324;color:var(--text);font:15px/1.45 system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial}  
.container{max-width:1100px;margin:0 auto;padding:0 12px}  
.appbar{position:sticky;top:0;z-index:10;background:#0d1830;border-bottom:1px solid var(--muted)}  
.appbar .row{display:flex;align-items:center;justify-content:space-between;padding:10px 8px}  
.badge{border:1px solid var(--muted);border-radius:999px;padding:3px 8px}  
.card{border:1px solid var(--muted);border-radius:14px;background:#0f1a2d;box-shadow:0 8px 20px rgba(0,0,0,.35)}  
.card header{display:flex;justify-content:space-between;align-items:center;padding:10px;border-bottom:1px solid var(--muted)}  
.card .body{padding:12px}  
.btn{border:1px solid var(--muted);background:#122447;color:var(--text);padding:10px 12px;border-radius:10px;cursor:pointer}  
.btn.primary{background:#4e79db;border-color:transparent}  
.chat{display:flex;flex-direction:column;min-height:60vh;max-height:70vh;overflow:auto}  
.msg{display:flex;gap:8px;align-items:flex-start;margin:8px 12px}  
.msg .bubble{max-width:86%;padding:10px 12px;border:1px solid var(--muted);border-radius:12px;background:#102242}  
.msg.me{justify-content:flex-end}  
.msg.me .bubble{background:#142a50}  
.msg .imgs{display:flex;flex-wrap:wrap;gap:8px;margin-top:6px}  
.msg .imgs img{width:132px;height:96px;object-fit:cover;border-radius:10px;border:1px solid var(--muted)}  
.composer{display:flex;gap:8px;padding:10px;border-top:1px solid var(--muted)}  
.gallery{display:grid;grid-template-columns:repeat(auto-fill,minmax(110px,1fr));gap:8px}  
.gallery img{width:100%;height:100px;object-fit:cover;border-radius:10px;border:1px solid var(--muted)}  
.modal{position:fixed;inset:0;background:rgba(0,0,0,.55);display:none;align-items:center;justify-content:center;z-index:1000}  
.modal.open{display:flex}  
.sheet{width:min(820px,96vw);max-height:90vh;overflow:auto;background:#0b1324;border:1px solid var(--muted);border-radius:16px}  
.sheet header{display:flex;justify-content:space-between;align-items:center;padding:10px;border-bottom:1px solid var(--muted)}  
.sheet .grid{display:grid;grid-template-columns:1fr 1fr;gap:12px;padding:12px}  
@media(max-width:640px){.sheet .grid{grid-template-columns:1fr}}  
.dbg{position:fixed;right:16px;bottom:16px;z-index:1200;width:min(520px,96vw);max-height:60vh;overflow:auto;border:1px solid var(--muted);background:#0b1324;border-radius:14px;box-shadow:0 10px 30px rgba(0,0,0,.35);display:none}  
.dbg header{display:flex;justify-content:space-between;align-items:center;padding:8px 10px;border-bottom:1px solid var(--muted)}  
.dbg pre{margin:0;padding:10px;white-space:pre-wrap}  
</style>  
</head>  
<body>  
  <div class="appbar">  
    <div class="container row">  
      <div style="display:flex;align-items:center;gap:10px"><strong>BadChat</strong></div>  
      <div style="display:flex;gap:8px;flex-wrap:wrap">  
        <span class="badge">Phase: <span id="phaseLabel">Kennenlernen</span></span>  
        <span class="badge">Subphase: <span id="subphaseLabel">aufwärmen</span></span>  
        <span class="badge">Trust: <span id="trustLabel">0</span></span>  
      </div>  
    </div>  
  </div>  <main class="container" style="padding:12px 0 24px 0">  
    <section class="card">  
      <header>  
        <div style="display:flex;gap:8px;align-items:center">  
          <button class="btn" id="dbgToggle">🧪 Debug</button>  
          <button class="btn" id="charEditFab">🧩 Charakter</button>  
        </div>  
        <div style="display:flex;gap:8px;align-items:center">  
          <button class="btn" id="genSync">🔗 Sync</button>  
          <button class="btn" id="importSync">⬇️ Einfügen</button>  
          <button class="btn primary" id="openExport">📦 Export</button>  
        </div>  
      </header>  
      <div class="body" style="padding:0">  
        <div id="messages" class="chat"></div>  
        <div class="composer">  
          <input id="chatFile" type="file" accept="image/*" class="btn" style="max-width:200px"/>  
          <input id="text" type="text" placeholder="Nachricht… z. B. #szene natur" style="flex:1;min-height:48px;border:1px solid var(--muted);background:#0c1830;color:var(--text);border-radius:10px;padding:10px"/>  
          <button class="btn primary" id="send">Senden</button>  
        </div>  
      </div>  
    </section><div style="display:grid;grid-template-columns:1fr 1fr;gap:12px;margin-top:12px">  
  <section class="card">  
    <header><strong>Medien</strong><button class="btn" id="addPhoto">+ Foto</button></header>  
    <div class="body"><div class="gallery" id="gallery"></div></div>  
  </section>  
  <section class="card">  
    <header><strong>Neue Erinnerung</strong></header>  
    <div class="body">  
      <div style="display:flex;gap:8px;margin-bottom:8px"><input id="memTitle" type="text" placeholder="Titel" style="flex:1;min-height:48px;border:1px solid var(--muted);background:#0c1830;color:var(--text);border-radius:10px;padding:10px"/><button class="btn" id="makeMemory">Speichern</button></div>  
      <textarea id="memText" placeholder="Erinnerungstext… (Hashtags #tag möglich)" style="width:100%;min-height:110px;border:1px solid var(--muted);background:#0c1830;color:var(--text);border-radius:10px;padding:10px"></textarea>  
    </div>  
  </section>  
</div>  
  
  </main>  <!-- Export/Import Modal -->  <div class="modal" id="moreModal">  
    <div class="sheet">  
      <header><strong>Export / Import</strong><button class="btn" id="moreClose">Schließen</button></header>  
      <div class="grid">  
        <div>  
          <h3>Sync</h3>  
          <div style="display:flex;gap:8px"><button class="btn" id="genSync2">🔗 Sync-Code</button><button class="btn" id="importSync2">⬇️ Einfügen</button></div>  
        </div>  
        <div>  
          <h3>Export</h3>  
          <div style="display:flex;gap:8px;flex-wrap:wrap"><button class="btn" id="btnExportJSON">Export JSON</button><button class="btn" id="btnExportHTML">Export HTML Galerie</button><button class="btn" id="btnImport">Import JSON</button></div>  
        </div>  
      </div>  
    </div>  
  </div>  <!-- Character editor -->  <div class="modal" id="charModal">  
    <div class="sheet">  
      <header><strong>Charakter-Einstellungen</strong><div style="display:flex;gap:8px"><span class="badge">Phase: <span id="phaseMeta">?</span></span><span class="badge">Subphase: <span id="subphaseMeta">?</span></span></div><button class="btn" id="charClose">Schließen</button></header>  
      <div class="grid">  
        <div><label>Name<input id="chName" type="text" placeholder="Name" style="width:100%;padding:10px;border:1px solid var(--muted);background:#0c1830;color:var(--text);border-radius:10px"/></label></div>  
        <div><label>Max. Sensibilität<select id="chMaxSens" style="width:100%;padding:10px;border:1px solid var(--muted);background:#0c1830;color:var(--text);border-radius:10px"><option>low</option><option selected>medium</option><option>high</option></select></label></div>  
        <div style="grid-column:1/3"><label>Persona<textarea id="chPersona" rows="2" style="width:100%;padding:10px;border:1px solid var(--muted);background:#0c1830;color:var(--text);border-radius:10px" placeholder="Ich-Perspektive, Charakterton…"></textarea></label></div>  
        <div><label>Interessen<input id="chInterests" type="text" placeholder="natur, reisen" style="width:100%;padding:10px;border:1px solid var(--muted);background:#0c1830;color:var(--text);border-radius:10px"/></label></div>  
        <div><label>max Bilder/Nachricht<input type="range" min="1" max="4" step="1" id="trMulti"/></label><small>Aktuell: <span id="trMultiVal">3</span></small></div>  
        <div><label>Relevanz-Schwelle<input type="range" min="0" max="10" step="1" id="trRel"/></label><small>Aktuell: <span id="trRelVal">5</span></small></div>  
        <div><label>Proaktivität<input type="range" min="0" max="10" step="1" id="trPro"/></label><small>Aktuell: <span id="trProVal">5</span></small></div>  
        <div><label>Verbosity<input type="range" min="1" max="3" step="1" id="trVerb"/></label><small>Aktuell: <span id="trVerbVal">2</span></small></div>  
      </div>  
    </div>  
  </div>  <!-- Debug overlay -->  <div class="dbg" id="dbgPanel"><header><strong>Debug</strong><button class="btn" id="dbgClose">Schließen</button></header><pre id="dbgPre">(leer)</pre></div><script>  
// ====== Core State & Utils ======  
window.VERSION = "bc-ultimate-1.0";  
const store={save(s){try{localStorage.setItem('badchat_state',JSON.stringify(s))}catch{}},load(){try{return JSON.parse(localStorage.getItem('badchat_state')||'null')||null}catch{return null}}};  
const $=(s,c=document)=>c.querySelector(s); const $$=(s,c=document)=>[...c.querySelectorAll(s)];  
function clamp(n,min,max){return Math.max(min,Math.min(max,n))}  
function pick(a){return a[Math.floor(Math.random()*a.length)]}  
function normalizeTag(t){return String(t||'').toLowerCase().trim()}  
function toast(msg){const t=document.createElement('div');t.textContent=msg;t.style.cssText='position:fixed;left:50%;transform:translateX(-50%);bottom:72px;background:#0f2244;border:1px solid var(--muted);padding:10px 12px;border-radius:10px;z-index:1500';document.body.appendChild(t);setTimeout(()=>t.remove(),1800)}  
  
let state=store.load()||{character:{name:"Aurora",persona:"Ich bin warmherzig und neugierig.",maxSensitivity:"medium",traits:{multiImageLimit:3,relevanceThreshold:5,proactivity:6,verbosity:2}},interests:["natur"],phase:"Kennenlernen",subphase:"aufwärmen",subphaseScore:20,trust:1,interest:20,photos:[],memories:[]};  
  
// ====== Tag Helpers ======  
function expandTags(ts){return [...new Set((ts||[]).map(normalizeTag))]}  
function computeSensitivity(tags){const t=expandTags(tags);if(t.includes('selfie')||t.includes('person'))return'medium';if(t.includes('nacht'))return'medium';return'low'}  
function minSensitivity(a,b){const o=['low','medium','high'];return o[Math.min(o.indexOf(a),o.indexOf(b))]||'low'}  
function allowedBySensitivity(s,m){const o=['low','medium','high'];return o.indexOf(s)<=o.indexOf(m)}  
function relevanceScore(item,query){const A=new Set((item||[]).map(normalizeTag)),B=new Set((query||[]).map(normalizeTag));if(!B.size)return 5;let inter=0;B.forEach(t=>inter+=A.has(t)?1:0);return inter?(5+5*Math.min(1,inter/Math.max(1,B.size))):0}  
  
// ====== Phase/Trust ======  
const PHASE_RULES={"Kennenlernen":{thresholds:{trustMin:0,trustMax:3,interestMin:0,interestMax:40,closenessMin:0,closenessMax:35},hysteresis:0.5,maxSensitivity:"low",maxImages:1},"Vertrauen aufbauen":{thresholds:{trustMin:3,trustMax:6,interestMin:30,interestMax:65,closenessMin:30,closenessMax:60},hysteresis:0.7,maxSensitivity:"medium",maxImages:2},"Freundschaft":{thresholds:{trustMin:5.5,trustMax:7.5,interestMin:55,interestMax:80,closenessMin:55,closenessMax:80},hysteresis:0.8,maxSensitivity:"medium",maxImages:3},"Vertraut":{thresholds:{trustMin:7,trustMax:9,interestMin:65,interestMax:90,closenessMin:70,closenessMax:90},hysteresis:1.0,maxSensitivity:"medium",maxImages:3},"Partnerschaft":{thresholds:{trustMin:8.5,trustMax:10,interestMin:75,interestMax:100,closenessMin:80,closenessMax:100},hysteresis:1.2,maxSensitivity:"high",maxImages:4}};  
function getPhaseConfig(n){return PHASE_RULES[n]||PHASE_RULES['Kennenlernen']}  
function bandGap(v,min,max){if(v<min)return v-min; if(v>max)return v-max; return 0}  
function computeCloseness(){state.subphaseScore=clamp(Math.round((state.trust||0)*8+(state.interest||0)*0.3),0,100)}  
function chooseSubphase(ph){const s=state.subphaseScore||0;const cfg=getPhaseConfig(ph);const mid=(cfg.thresholds.closenessMin+cfg.thresholds.closenessMax)/2;return s<mid?'aufwärmen':'vertraut'}  
function nextPhaseByMetrics(cur){const ORDER=['Kennenlernen','Vertrauen aufbauen','Freundschaft','Vertraut','Partnerschaft'];const t=state.trust||0,i=state.interest||0,c=state.subphaseScore||0;const idx=Math.max(0,ORDER.indexOf(cur));const cfg=getPhaseConfig(cur);const h=cfg.hysteresis||0.5;const hi=(t>=(cfg.thresholds.trustMax+h))&&(i>=(cfg.thresholds.interestMax+h*10))&&(c>=(cfg.thresholds.closenessMax+h*10));const lo=(t<(cfg.thresholds.trustMin-h))||(i<(cfg.thresholds.interestMin-h*10))||(c<(cfg.thresholds.closenessMin-h*10));if(hi&&idx<ORDER.length-1)return ORDER[idx+1]; if(lo&&idx>0)return ORDER[idx-1]; let best=cur,bestGap=Infinity;for(const name of ORDER){const cf=getPhaseConfig(name);const gap=Math.abs(bandGap(t,cf.thresholds.trustMin,cf.thresholds.trustMax))+Math.abs(bandGap(i,cf.thresholds.interestMin,cf.thresholds.interestMax))+Math.abs(bandGap(c,cf.thresholds.closenessMin,cf.thresholds.closenessMax));if(gap<bestGap){best=name;bestGap=gap}} return best}  
function reevaluatePhase(){computeCloseness();const before=state.phase;const after=nextPhaseByMetrics(before);if(after!==before){state.phase=after;state._lastPhaseChange=Date.now();state.phaseReason=${before} → ${after};toast('Phase ➜ '+after);post('ai',🔄 Ich denke, wir sind jetzt in **${after}**. Wenn du magst: „Warum Phase?“)} state.subphase=chooseSubphase(state.phase);$('#phaseLabel').textContent=state.phase;$('#subphaseLabel').textContent=state.subphase;store.save(state)}  
function logTrust(d){state.trust=clamp((state.trust||0)+d,0,10);$('#trustLabel').textContent=String(state.trust);state.interest=clamp((state.interest||0)+Math.round(d*2),0,100);state.subphaseScore=clamp((state.subphaseScore||0)+Math.round(d*2),0,100);store.save(state);reevaluatePhase()}  
  
// ====== Chat ======  
const $msg=$('#messages');  
function renderMessage(role,text,images){const li=document.createElement('div');li.className='msg '+role;const b=document.createElement('div');b.className='bubble';b.innerHTML=String(text||'').replace(/\n/g,'<br/>');if(images&&images.length){const wrap=document.createElement('div');wrap.className='imgs';images.forEach(src=>{const im=new Image();im.src=src;wrap.appendChild(im)});b.appendChild(wrap)} li.appendChild(b);$msg.appendChild(li);$msg.scrollTop=$msg.scrollHeight;return li}  
function post(role,t,imgs){return renderMessage(role,t,imgs)}  
  
// ====== Fotos ======  
function addPhotoObject(name,dataUrl,tags,trust=0,by='user'){const p={name,dataUrl,tags:expandTags(tags),trust,by,sensitivity:computeSensitivity(tags)};state.photos.push(p);renderGallery();store.save(state)}  
function renderGallery(){const g=$('#gallery');g.innerHTML='';state.photos.forEach(p=>{const img=new Image();img.src=p.dataUrl;img.title=${p.name}\n#${(p.tags||[]).join(' #')};g.appendChild(img)})}  
function selectPhotosForChat(query){const ch=state.character,pr=PHASE_RULES[state.phase]||{};const maxSens=minSensitivity(ch.maxSensitivity,pr.maxSensitivity||'high');const maxImgs=Math.max(1,Math.min(ch.traits.multiImageLimit||3,pr.maxImages||3));const relThresh=(ch.traits.relevanceThreshold||5)/2;const rows=(state.photos||[]).map(p=>{const sens=p.sensitivity||computeSensitivity(p.tags);const score=relevanceScore(p.tags,query);const allowed=allowedBySensitivity(sens,maxSens)&&score>=relThresh&&(state.trust||0)>=(p.trust||0);return {name:p.name,score,allowed}});return rows.filter(r=>r.allowed).sort((a,b)=>b.score-a.score).slice(0,maxImgs).map(r=>state.photos.find(p=>p.name===r.name))}  
  
// ====== Memories ======  
function addMemory(obj){const m={id:'m'+Math.random().toString(36).slice(2),title:obj.title||'Notiz',text:obj.text||'',tags:expandTags(obj.tags||[]),trust:obj.trust||0,importance:obj.importance||1,_ts:Date.now()};(m.text.split(/\s+/).filter(t=>t.startsWith('#')).map(t=>normalizeTag(t.slice(1)))).forEach(t=>m.tags.push(t));m.tags=[...new Set(m.tags)];state.memories.push(m);store.save(state);toast('Erinnerung gespeichert');return m}  
  
// ====== Quick-Sync & Export ======  
(function(){const b64=s=>btoa(unescape(encodeURIComponent(s)));const unb64=s=>decodeURIComponent(escape(atob(s)));function makeSync(){return b64(JSON.stringify(state))} function importSync(code){const data=JSON.parse(unb64(String(code||'').trim()));Object.assign(state,data);store.save(state);renderGallery();$('#phaseLabel').textContent=state.phase;$('#trustLabel').textContent=String(state.trust);post('ai','Sync importiert.')} $('#genSync')?.addEventListener('click',()=>{const c=makeSync();navigator.clipboard?.writeText(c);toast('Sync-Code kopiert')}); $('#importSync')?.addEventListener('click',()=>{const c=prompt('Sync-Code einfügen:');if(c)importSync(c)}); $('#openExport')?.addEventListener('click',()=>$('#moreModal').classList.add('open')); $('#moreClose')?.addEventListener('click',()=>$('#moreModal').classList.remove('open')); $('#genSync2')?.addEventListener('click',()=>{const c=makeSync();navigator.clipboard?.writeText(c);toast('Sync-Code kopiert')}); $('#importSync2')?.addEventListener('click',()=>{const c=prompt('Sync-Code einfügen:');if(c)importSync(c)}); function dl(name,blob){const a=document.createElement('a');a.href=URL.createObjectURL(blob);a.download=name;document.body.appendChild(a);a.click();setTimeout(()=>{URL.revokeObjectURL(a.href);a.remove()},1000)} $('#btnExportJSON')?.addEventListener('click',()=>{const payload={version:window.VERSION,exportedAt:new Date().toISOString(),state};dl('badchat_export.json',new Blob([JSON.stringify(payload,null,2)],{type:'application/json'}))}); $('#btnExportHTML')?.addEventListener('click',()=>{const html=['<!doctype html><meta charset="utf-8"><title>BadChat Export</title><style>body{background:#0b1324;color:#e7ecf4;font:14px system-ui}img{max-width:180px;border:1px solid #2a3550;border-radius:8px}</style><h1>BadChat Export</h1>'];html.push('<h2>Fotos</h2>');html.push((state.photos||[]).map(p=><figure><img src="${p.dataUrl}"><figcaption>${p.name} — #${(p.tags||[]).join(' #')}</figcaption></figure>).join(''));html.push('<h2>Erinnerungen</h2>');html.push((state.memories||[]).map(m=><div><strong>${m.title}</strong><br><small>${new Date(m._ts||Date.now()).toLocaleString()}</small><p>${m.text}</p><small>#${(m.tags||[]).join(' #')}</small></div>).join(''));dl('badchat_gallery.html',new Blob([html.join('')],{type:'text/html'}))}); $('#btnImport')?.addEventListener('click',async()=>{const inp=document.createElement('input');inp.type='file';inp.accept='.json,application/json';inp.onchange=async()=>{const text=await inp.files[0].text();const data=JSON.parse(text);const mode=prompt('Import-Modus: "merge" oder "overwrite"?','merge');if(!mode)return; if(mode==='overwrite'){state=data.state||state}else{const pIndex=new Map((state.photos||[]).map(p=>[p.name,p]));(data.state?.photos||[]).forEach(p=>{if(!pIndex.has(p.name))state.photos.push(p)});const mIndex=new Map((state.memories||[]).map(m=>[m.id,m]));(data.state?.memories||[]).forEach(m=>{if(!mIndex.has(m.id))state.memories.push(m)})} store.save(state);renderGallery();post('ai','Import abgeschlossen.')};inp.click()})})();// ====== Character Editor ====== (function(){const modal=$('#charModal');$('#charEditFab')?.addEventListener('click',()=>{fill();modal.classList.add('open')});$('#charClose')?.addEventListener('click',()=>modal.classList.remove('open'));function bindRange(id,val){const el=$('#'+id),out=$('#'+id+'Val');el.value=val;if(out)out.textContent=val} function fill(){const c=state.character||{};const t=c.traits||{};$('#phaseMeta').textContent=state.phase;$('#subphaseMeta').textContent=state.subphase;$('#chName').value=c.name||'';$('#chPersona').value=c.persona||'';$('#chMaxSens').value=c.maxSensitivity||'medium';$('#chInterests').value=(state.interests||[]).join(', ');bindRange('trMulti',t.multiImageLimit??3);bindRange('trRel',t.relevanceThreshold??5);bindRange('trPro',t.proactivity??5);bindRange('trVerb',t.verbosity??2)} ['trMulti','trRel','trPro','trVerb'].forEach(id=>$('#'+id)?.addEventListener('input',e=>{$('#'+id+'Val')?.textContent=e.target.value})); $('#charModal')?.addEventListener('change',()=>{const c=state.character;const t=c.traits;c.name=$('#chName').value||c.name;c.persona=$('#chPersona').value||'';c.maxSensitivity=$('#chMaxSens').value||'medium';const interests=($('#chInterests').value||'').split(',').map(s=>normalizeTag(s.trim())).filter(Boolean);if(interests.length)state.interests=[...new Set(interests)];t.multiImageLimit=parseInt($('#trMulti').value,10);t.relevanceThreshold=parseInt($('#trRel').value,10);t.proactivity=parseInt($('#trPro').value,10);t.verbosity=parseInt($('#trVerb').value,10);store.save(state)})})();  
  
// ====== Debug ====== (function(){const btn=$('#dbgToggle');const panel=$('#dbgPanel');const pre=$('#dbgPre');function snapshot(){return{version:window.VERSION,phase:state.phase,subphase:state.subphase,trust:state.trust,interest:state.interest,photos:(state.photos||[]).length,memories:(state.memories||[]).length,lastPhase:state._lastPhaseChange||null}} function refresh(){pre.textContent=JSON.stringify(snapshot(),null,2)} btn?.addEventListener('click',()=>{panel.style.display=panel.style.display==='block'?'none':'block';refresh()});$('#dbgClose')?.addEventListener('click',()=>panel.style.display='none');new MutationObserver(()=>{if(panel.style.display==='block')refresh()}).observe($('#messages'),{childList:true})})();  
  
// ====== Composer ====== let _lastUserMsgTs=Date.now(); $('#send')?.addEventListener('click',()=>{const txt=$('#text').value.trim();if(!txt)return;renderMessage('me',txt);_lastUserMsgTs=Date.now();if(txt.toLowerCase()==='warum phase?'){post('ai',state.phaseReason||'Phasenwechsel basierend auf Trust/Interesse/Nähe.');$('#text').value='';return} if(txt.startsWith('#szene')||txt.includes('szene zu')||/erzähl(e)? eine szene/i.test(txt)){/* handled below */} else {const imgs=selectPhotosForChat(expandTags(txt.split(/\s+/).filter(x=>x.startsWith('#')).map(t=>t.slice(1))));post('ai','Erzähle mir mehr 🙂',(imgs||[]).map(p=>p.dataUrl));logTrust(+0.1)} $('#text').value=''});  
  
// ====== Upload & Gallery ====== $('#chatFile')?.addEventListener('change',async e=>{const f=e.target.files?.[0];if(!f)return;const url=URL.createObjectURL(f);const name=f.name.replace(/\s+/g,'_');const nm=name.toLowerCase();const tags=[];if(/wald|park|tree|baum|gras|wiese|wander|hike/.test(nm))tags.push('natur');if(/see|meer|lake|ocean|strand|beach|fluss/.test(nm))tags.push('wasser');if(/sky|himmel|wolke/.test(nm))tags.push('himmel');if(/city|stadt|urban|street|skyline|building|architektur/.test(nm))tags.push('stadt');if(/food|essen|pizza|pasta|burger|kuchen|lunch|dinner|frühstück/.test(nm))tags.push('essen');const dataUrl=await new Promise(res=>{const img=new Image();img.onload=()=>{const max=720;const r=Math.min(1,max/Math.max(img.width,img.height));const c=document.createElement('canvas');c.width=Math.round(img.widthr);c.height=Math.round(img.heightr);c.getContext('2d').drawImage(img,0,0,c.width,c.height);res(c.toDataURL('image/jpeg',0.9))};img.src=url});addPhotoObject(name,dataUrl,tags,0,'user');post('ai',Danke für **${name}**! ${tags.length?'Erkannte Tags: #'+tags.join(' #'):'Ich kann Tags vorschlagen, wenn du magst.'})}); $('#addPhoto')?.addEventListener('click',()=>$('#chatFile').click());  
  
// ====== Memories UI ====== $('#makeMemory')?.addEventListener('click',()=>{const title=($('#memTitle').value||'Notiz').trim();const text=($('#memText').value||'').trim();if(!text&&!title){toast('Bitte Titel oder Text eingeben.');return} addMemory({title,text,tags:[]});$('#memTitle').value='';$('#memText').value=''});  
  
// ====== Scene Generator ====== (function(){function norm(s){return String(s||'').toLowerCase().trim()} function parseSceneQuery(text){const t=norm(text);if(t.includes('#szene')){const tail=t.split('#szene')[1]||'';const words=tail.split(/[^\p{L}0-9]+/u).map(norm).filter(Boolean);return words[0]||null} if(t.includes('szene zu')){return t.split('szene zu').pop().trim().split(/\s+/)[0]||null} if(t.includes('erzähle eine szene')||t.includes('erzähl eine szene')||t.includes('erzähl mir eine szene')){return null} return undefined} function anyMemory(){return (state.memories||[])} function memoriesByTag(tag){const t=norm(tag);return (state.memories||[]).filter(m=>(m.tags||[]).map(norm).includes(t))} function sceneFromMemory(mem){const mood=state.mood?.val||0;const T=[{chk:v=>v<-0.6,lead:['Es fühlte sich schwer an,'],sense:['die Luft war kühl'],close:['aber ich blieb dran.']},{chk:v=>v<-0.2,lead:['Ich war nachdenklich,'],sense:['das Licht lag flach'],close:['und ich hörte genauer hin.']},{chk:v=>v<0.2,lead:['Ganz bei mir,'],sense:['die Details traten klar hervor'],close:['ohne Eile.']},{chk:v=>v<0.6,lead:['Mit einem kleinen Lächeln,'],sense:['die Luft roch frisch'],close:['und ich genoss es.']},{chk:()=>true,lead:['Voller Wärme,'],sense:['die Farben wirkten intensiver'],close:['und ich wollte den Moment festhalten.']}];const tone=T.find(x=>x.chk(mood))||T[2];const lead=pick(tone.lead),sense=pick(tone.sense),close=pick(tone.close);const body=(mem.text||'').replace(/\s+/g,' ').slice(0,220);const tagLine=(mem.tags&&mem.tags.length)?('#'+mem.tags.slice(0,3).join(' #')):'';return Eine kleine Szene aus meiner Sicht:\n\n${lead} ${sense}, ${close} ${body? body : (mem.title? 'Es ging um **'+mem.title+'**.' : '')} ${tagLine}} function composeAndPostScene(tag){let mem=null;if(tag){const list=memoriesByTag(tag);mem=list.length?pick(list):null} if(!mem){const pool=anyMemory();mem=pool.length?pick(pool):null} if(!mem){post('ai','Ich habe noch keine passende Erinnerung gespeichert – magst du mir kurz etwas dazu erzählen?');return} const txt=sceneFromMemory(mem);let images=[];try{const imgs=selectPhotosForChat(mem.tags||[]);images=(imgs||[]).slice(0,Math.min(2,state.character?.traits?.multiImageLimit||2)).map(p=>p.dataUrl).filter(Boolean)}catch{} post('ai',txt,images.length?images:undefined)} new MutationObserver(()=>{const msgs=[...$('#messages').querySelectorAll('.msg.me')];if(!msgs.length)return;const txt=msgs.at(-1).innerText||'';const q=parseSceneQuery(txt);if(q!==undefined)composeAndPostScene(q)}).observe($('#messages'),{childList:true})})();  
  
// ====== Proaktive Pings ====== function canPropose(){const pro=state.character?.traits?.proactivity??5;if(pro<=2)return false;const idle=45000*(8/(pro+3));if(Date.now()-(_lastUserMsgTs||0)<idle)return false;state._proposals=(state._proposals||[]).filter(x=>x>Date.now()-3600e3);return state._proposals.length<4} function propose(){const t=["Ich bin noch da 🙂 Wollen wir eine kleine Szene probieren? Schreib z. B. #szene natur","Soll ich dir etwas aus meinen Erinnerungen erzählen?","Magst du mir ein neues Foto schicken? Ich kann Tags vorschlagen."];post('ai',pick(t));(state._proposals||=[]).push(Date.now());logTrust(+0.1)} setInterval(()=>{if(canPropose())propose()},15000);  
  
// ====== Debug Toggle ====== (function(){const btn=$('#dbgToggle');const panel=$('#dbgPanel');const pre=$('#dbgPre');function snapshot(){return{version:window.VERSION,phase:state.phase,subphase:state.subphase,trust:state.trust,interest:state.interest,photos:(state.photos||[]).length,memories:(state.memories||[]).length,lastPhase:state._lastPhaseChange||null}} function refresh(){pre.textContent=JSON.stringify(snapshot(),null,2)} btn?.addEventListener('click',()=>{panel.style.display=panel.style.display==='block'?'none':'block';refresh()});$('#dbgClose')?.addEventListener('click',()=>panel.style.display='none')})();  
  
// ====== Init ====== renderGallery(); reevaluatePhase(); post('ai','Hallo! Ich bin bereit. Schicke mir gern Text oder ein Foto. (Tipp: #szene natur)'); </script>  
  
</body>  
</html>


