<html lang="de">  
<head>  
  <meta charset="utf-8" />  
  <meta name="viewport" content="width=device-width, initial-scale=1" />  
  <title>BadChat – Single‑File App (v7: Kontext, Lernen, Beziehungen, Interview)</title>  
  <style>  
    :root{ --bg:#0b0f14;--panel:#111826;--muted:#24324a;--text:#e6edf6;--sub:#a9b4c2;--acc:#60a5fa;--ok:#10b981;--warn:#f59e0b;--err:#ef4444; --r:18px;--shadow:0 10px 30px rgba(0,0,0,.35) }  
    *{box-sizing:border-box} html,body{height:100%} body{margin:0;background:linear-gradient(180deg,#0b0f14,#0b0f14 60%,#0e1522);color:var(--text);font:16px/1.4 system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,"Helvetica Neue",Arial}  
    a{color:var(--acc)} .app{max-width:1200px;margin-inline:auto;padding:24px;display:grid;gap:16px}  
    header{display:flex;align-items:center;gap:16px} header .logo{width:40px;height:40px;border-radius:12px;background:radial-gradient(90% 90% at 30% 30%,#7dd3fc,transparent 60%),linear-gradient(135deg,#1d4ed8,#9333ea);box-shadow:var(--shadow)} h1{font-size:clamp(18px,2.4vw,28px);margin:0}  
    .tabs{display:flex;gap:8px;flex-wrap:wrap} .tab-btn{padding:10px 14px;border:1px solid var(--muted);background:linear-gradient(180deg,#122036,#0f1930);border-radius:999px;color:var(--text);cursor:pointer}  
    .tab-btn[aria-selected="true"]{background:linear-gradient(180deg,#1f2f4d,#162742);border-color:var(--acc);box-shadow:0 0 0 2px color-mix(in srgb,var(--acc),transparent 80%)}  
    .grid{display:grid;gap:16px} .panel{background:linear-gradient(180deg,#111826,#0f172a);border:1px solid var(--muted);border-radius:20px;padding:16px;box-shadow:var(--shadow)} .row{display:flex;gap:12px;align-items:center} .grow{flex:1}  
    .badge{display:inline-flex;align-items:center;gap:6px;padding:.35rem .6rem;border-radius:999px;border:1px solid var(--muted);background:#0d1524;color:var(--sub);font-size:.85rem}  
    small,.help{color:var(--sub)}  
    .chat{display:grid;grid-template-rows:auto 1fr auto;gap:12px;height:560px} .messages{overflow:auto;padding:8px;background:#0c1321;border-radius:14px;border:1px solid var(--muted)}  
    .msg{max-width:min(76%,720px);padding:10px 12px;margin:8px;border-radius:14px;border:1px solid var(--muted)} .me{margin-left:auto;background:#0f1b2f} .ai{background:#0f1f38}  
    .meta{font-size:.78rem;color:var(--sub)} .msg img{display:block;max-width:100%;height:auto;border-radius:12px;margin-top:6px;border:1px solid var(--muted)}  
    .composer{display:flex;gap:8px;align-items:center;flex-wrap:wrap} .composer input[type="text"],.composer textarea{flex:1;min-height:44px;border-radius:12px;border:1px solid var(--muted);background:#0c1526;color:var(--text);padding:12px}  
    .btn{border:1px solid var(--muted);background:#0f1a2d;color:var(--text);padding:10px 14px;border-radius:12px;cursor:pointer} .btn.acc{border-color:var(--acc);background:#0f223e} .btn.ghost{background:#0c1526}  
    .file-chip{font-size:.8rem;border:1px dashed var(--muted);padding:6px 8px;border-radius:999px}  
    .stats{display:grid;grid-template-columns:repeat(auto-fit,minmax(180px,1fr));gap:12px} .stat{padding:12px;border:1px solid var(--muted);border-radius:14px;background:#0d182a} .range{width:100%}  
    .gallery{display:grid;grid-template-columns:repeat(auto-fill,minmax(140px,1fr));gap:10px} .thumb{border:1px dashed var(--muted);border-radius:12px;display:grid;place-items:center;aspect-ratio:1/1;background:#0c1423;color:var(--sub);padding:8px}  
    .thumb img{width:100%;height:100%;object-fit:cover;border-radius:10px}  
    .tag{display:inline-flex;align-items:center;gap:6px;border:1px solid var(--muted);padding:4px 8px;border-radius:999px;margin:4px;background:#0c1526;color:var(--sub);font-size:.8rem}  
    .kpi{display:flex;gap:10px;flex-wrap:wrap} .pill{padding:4px 8px;border-radius:999px;background:#0f1d33;border:1px solid var(--muted)}  
    @media (min-width:960px){.layout{display:grid;grid-template-columns:1.2fr .8fr;gap:16px}}  
  </style>  
</head>  
<body>  
  <div class="app">  
    <header>  
      <div class="logo" aria-hidden="true"></div>  
      <div>  
        <h1>BadChat · HTML‑App</h1>  
        <small>v7: Langer Kontext · Lernende Tag‑DB · Erinnerungen (Ich‑Perspektive) · Beziehungen · Foto‑Interview</small>  
      </div>  
    </header><nav class="tabs" role="tablist" aria-label="Bereiche">  
  <button class="tab-btn" role="tab" aria-selected="true" data-tab="chat">Chat</button>  
  <button class="tab-btn" role="tab" aria-selected="false" data-tab="char">Charakter‑Editor</button>  
  <button class="tab-btn" role="tab" aria-selected="false" data-tab="settings">Einstellungen</button>  
  <button class="tab-btn" role="tab" aria-selected="false" data-tab="memories">Erinnerungen</button>  
  <button class="tab-btn" role="tab" aria-selected="false" data-tab="photos">Fotos</button>  
  <button class="tab-btn" role="tab" aria-selected="false" data-tab="tags">Tag‑Editor</button>  
  <button class="tab-btn" role="tab" aria-selected="false" data-tab="export">Export</button>  
</nav>  
  
<section id="chat" class="panel layout" role="tabpanel">  
  <div class="grid chat">  
    <div class="row kpi">  
      <span class="badge">Vertrauen: <strong id="trustValue">3</strong></span>  
      <span class="badge">Phase: <strong id="phaseLabel">Kennenlernen</strong></span>  
      <span class="badge">Emotion: <strong id="emotionLabel">neutral</strong></span>  
      <span class="badge">Interesse: <strong id="interestLabel">50</strong>/100</span>  
      <span class="badge">Nähe: <strong id="closenessLabel">0</strong>/100</span>  
      <span class="badge"><button class="btn ghost" id="whyPhase">Warum Phase?</button></span>  
      <span class="badge"><label style="display:flex;align-items:center;gap:6px">Auto‑Ersetzung <input id="toggleSanitize" type="checkbox" checked></label></span>  
      <span class="badge"><button class="btn ghost" id="aiPhotoBtn">KI‑Foto senden</button><input id="aiPhotoInput" type="file" accept="image/*" hidden></span>  
    </div>  
    <div id="messages" class="messages" aria-live="polite"></div>  
    <div class="composer" id="composer">  
      <button class="btn" id="attachBtn">📎 Foto</button>  
      <input id="chatFile" type="file" accept="image/*" hidden>  
      <span id="attachedName" class="file-chip" hidden></span>  
      <input id="text" type="text" placeholder="Frag z. B.: \"Zeig mir Fotos mit [küche]\" · \"Erzähl die Erinnerung [spaziergang]\" · oder plaudere frei" />  
      <button id="send" class="btn acc">Senden</button>  
    </div>  
    <small class="help">Tags: [eckige Klammern] oder #hashtag. KI kann aktiv Fragen stellen, um Bilder/Erinnerungen zu finden und speichert Wesentliches als neue Erinnerungen (Ich‑Perspektive).</small>  
  </div>  
  <aside class="grid">  
    <div class="panel">  
      <h3 style="margin-top:0">Charakterwerte (live)</h3>  
      <div class="stats">  
        <div class="stat"><label>Offenheit <input type="range" min="0" max="10" value="5" class="range" data-key="openness"></label></div>  
        <div class="stat"><label>Extraversion <input type="range" min="0" max="10" value="5" class="range" data-key="extraversion"></label></div>  
        <div class="stat"><label>Empathie <input type="range" min="0" max="10" value="6" class="range" data-key="empathy"></label></div>  
        <div class="stat"><label>Direktheit <input type="range" min="0" max="10" value="5" class="range" data-key="directness"></label></div>  
        <div class="stat"><label>Humor <input type="range" min="0" max="10" value="5" class="range" data-key="humor"></label></div>  
      </div>  
      <div class="row" style="margin-top:12px">  
        <label class="grow">Dein Vertrauenslevel  
          <input id="trust" type="range" min="0" max="10" value="3" class="range" />  
        </label>  
        <button class="btn" id="resetState">Zurücksetzen</button>  
      </div>  
      <small class="help">Phase, Interesse & Verhalten passen sich dynamisch an (Kontext, Tag‑Relevanz, Sensibilität, Proaktivität).</small>  
    </div>  
    <div class="panel">  
      <h3 style="margin-top:0">Aktive Ziele</h3>  
      <div class="kpi" id="goals"></div>  
    </div>  
  </aside>  
</section>  
  
<section id="char" class="panel" role="tabpanel" hidden>  
  <h3 style="margin-top:0">Charakter‑Editor</h3>  
  <div class="grid">  
    <div class="stat">  
      <strong>Persönlichkeitsachsen</strong>  
      <div class="stats">  
        <div class="stat"><label>Gewissenhaftigkeit <input type="range" min="0" max="10" value="6" class="range" data-trait="conscientiousness"></label></div>  
        <div class="stat"><label>Verträglichkeit <input type="range" min="0" max="10" value="6" class="range" data-trait="agreeableness"></label></div>  
        <div class="stat"><label>Stabilität <input type="range" min="0" max="10" value="6" class="range" data-trait="stability"></label></div>  
        <div class="stat"><label>Neugier <input type="range" min="0" max="10" value="6" class="range" data-trait="curiosity"></label></div>  
        <div class="stat"><label>Verspieltheit <input type="range" min="0" max="10" value="5" class="range" data-trait="playfulness"></label></div>  
        <div class="stat"><label>Förmlichkeit <input type="range" min="0" max="10" value="4" class="range" data-trait="formality"></label></div>  
        <div class="stat"><label>Durchsetzungsvermögen <input type="range" min="0" max="10" value="5" class="range" data-trait="assertiveness"></label></div>  
      </div>  
    </div>  
    <div class="stat">  
      <strong>Kommunikation</strong>  
      <div class="stats">  
        <div class="stat"><label>Proaktivität <input type="range" min="0" max="10" value="6" class="range" data-trait="proactivity"></label></div>  
        <div class="stat"><label>Antwortlänge <input type="range" min="1" max="3" value="2" class="range" data-trait="verbosity"></label></div>  
        <div class="stat"><label>Sicherheits‑Strenge <input type="range" min="0" max="10" value="7" class="range" data-trait="safety"></label></div>  
      </div>  
    </div>  
    <div class="stat">  
      <strong>Bilder‑Politik</strong>  
      <div class="stats">  
        <div class="stat"><label>Max. Sensibilität <select id="maxSensitivity"><option>low</option><option selected>medium</option><option>high</option></select></label></div>  
        <div class="stat"><label>Relevanz‑Schwelle <input type="range" min="0" max="10" value="5" class="range" data-trait="relevanceThreshold"></label></div>  
        <div class="stat"><label>Multi‑Bild‑Limit <input type="range" min="1" max="4" value="3" class="range" data-trait="multiImageLimit"></label></div>  
      </div>  
    </div>  
    <div class="stat">  
      <strong>Identität & Ton</strong>  
      <div class="row"><input id="charName" class="grow" placeholder="Charaktername (z. B. Layler)"></div>  
      <div class="row" style="margin-top:8px"><textarea id="charDesc" rows="5" class="grow" placeholder="Stilbeschreibung, Leitlinien, Wörter die der Charakter mag…"></textarea></div>  
      <div class="row" style="margin-top:8px"><button class="btn" id="saveChar">Speichern</button></div>  
    </div>  
  </div>  
  <small class="help">Diese Werte steuern Tonalität, Proaktivität, Bildanzahl, Relevanz‑Schwelle, Sensibilitätsgrenze und Beziehungsdynamik.</small>  
</section>  
  
<section id="settings" class="panel" role="tabpanel" hidden>  
  <div class="grid">  
    <div class="row">  
      <div class="grow">  
        <label>Interessen (für Empfehlungen)  
          <div id="interests" class="kpi" style="margin-top:8px"></div>  
        </label>  
        <div class="row" style="margin-top:8px">  
          <input id="newInterest" class="grow" placeholder="z. B. Musik" />  
          <button class="btn" id="addInterest">Hinzufügen</button>  
        </div>  
      </div>  
    </div>  
    <div class="stats">  
      <div class="stat">  
        <strong>Vorlieben</strong>  
        <div id="preferences" class="kpi"></div>  
        <div class="row" style="margin-top:8px">  
          <input id="newPref" class="grow" placeholder="z. B. humorvoll" />  
          <button class="btn" id="addPref">Hinzufügen</button>  
        </div>  
      </div>  
    </div>  
  </div>  
</section>  
  
<section id="memories" class="panel" role="tabpanel" hidden>  
  <div class="row">  
    <div class="grow">  
      <div class="row">  
        <input id="memSearch" class="grow" placeholder="Nach Erinnerung/Tags suchen…" />  
        <button class="btn" id="newMemory">Neue Erinnerung</button>  
      </div>  
      <div id="memoryList" class="grid" style="margin-top:12px"></div>  
    </div>  
  </div>  
</section>  
  
<section id="photos" class="panel" role="tabpanel" hidden>  
  <div class="row">  
    <input id="photoInput" type="file" accept="image/*" multiple />  
    <input id="photoSearch" class="grow" placeholder="Nach Tags/Dateinamen filtern…" />  
  </div>  
  <div id="photoGrid" class="gallery" style="margin-top:12px"></div>  
  <small class="help">Tags aus Dateinamen in [eckigen Klammern] oder #hashtags im Chat. Unerwünschte Begriffe werden neutral ersetzt.</small>  
</section>  
  
<section id="tags" class="panel" role="tabpanel" hidden>  
  <div class="row">  
    <div class="grow">  
      <div id="tagList" class="kpi"></div>  
    </div>  
    <div>  
      <input id="newTag" placeholder="neuer-tag" />  
      <button class="btn" id="addTag">Hinzufügen</button>  
    </div>  
  </div>  
  <small class="help">Intelligente Tag‑Datenbank lernt neue Einträge, ordnet Kategorien/Sensibilität zu und speichert Synonyme.</small>  
</section>  
  
<section id="export" class="panel" role="tabpanel" hidden>  
  <div class="grid">  
    <div class="row">  
      <button class="btn" id="exportChat">Chatverlauf als TXT exportieren</button>  
      <button class="btn" id="exportData">Daten (JSON) exportieren</button>  
      <button class="btn" id="importData">Daten (JSON) importieren</button>  
    </div>  
    <small class="help">Export enthält bereits bereinigte/ersetzte Inhalte.</small>  
  </div>  
</section>  
  
  </div>  <script>  
  /** v7 – Langer Kontext, lernende Tag‑DB, proaktive Beziehungen, Ich‑Erinnerungen, Foto‑Interview */  
  const $=(q,r=document)=>r.querySelector(q); const $$=(q,r=document)=>Array.from(r.querySelectorAll(q));  
  const store={get k(){return 'badchat_v7'},load(){try{return JSON.parse(localStorage.getItem(this.k))||{}}catch{return {} }},save(d){localStorage.setItem(this.k,JSON.stringify(d))}};  
  
  const REPLACEMENTS={'sex':'sensibel','porno':'sensibel','nackt':'privat','genital':'privat','penis':'zensiert','vagina':'zensiert','brüste':'privat','brust':'privat','anal':'sensibel','orgasmus':'sensibel','fetisch':'sensibel','doggy':'sensibel','missionar':'sensibel','shemale':'zensiert'}; const EXPLICIT=Object.keys(REPLACEMENTS); const VERSION='v7.1-autoTag';  
  let SANITIZE_ON=true; $('#toggleSanitize')?.addEventListener('change',e=>{SANITIZE_ON=e.target.checked; toast('Auto‑Ersetzung '+(SANITIZE_ON?'aktiv':'deaktiviert'))});  
  const escapeRx=s=>s.replace(/[.*+?^${}()|[\\]\\]/g,'\\$&'); function sanitize(t){ if(!SANITIZE_ON||!t) return t; const rx=new RegExp('\\b('+EXPLICIT.map(escapeRx).join('|')+')\\b','gi'); return t.replace(rx,m=>REPLACEMENTS[m.toLowerCase()]||'zensiert') } const isExplicit=s=>s && EXPLICIT.some(w=>s.toLowerCase().includes(w));  
  
  // Tag Ontologie + lernende DB  
  const TAGS={ person:['mensch','leute','porträt','portrait','gesicht','selfie'], natur:['wald','bäume','see','meer','strand','natur','park','spaziergang','spazier'], zuhause:['wohnung','küche','wohnzimmer','zimmer','haus','home','sofa'], stimmung_freundlich:['lächeln','freundlich','happy','smile'], stimmung_nachdenklich:['traurig','still','ruhig','nachdenklich','müde'], chat:['konversation','nachricht'], nutzer:['user','du'], ki:['bot','assistent'], privat:['sensibel','zensiert'] };  
  const CANON=Object.keys(TAGS); const SYN2CANON=(()=>{const m={}; for(const c of CANON){ for(const s of [c,...TAGS[c]]) m[s]=c } return m})();  
  const SENSI_TAGS={ high:['privat','sensibel','zensiert'], medium:['person','selfie'], low:['natur','zuhause','stimmung_freundlich'] }; const SENSI_ORDER=['low','medium','high'];  
  const normalizeTag=t=>sanitize(String(t||'').toLowerCase().trim()).replace(/[^a-z0-9_-]/g,'-');  
  function expandTags(raw){ const out=new Set(); for(const r of raw){ const n=normalizeTag(r); const c=SYN2CANON[n]||n; out.add(c) } return [...out] }  
  function computeSensitivity(tags){ const t=new Set(expandTags(tags)); if([...t].some(x=>SENSI_TAGS.high.includes(x))) return 'high'; if([...t].some(x=>SENSI_TAGS.medium.includes(x))) return 'medium'; return 'low' }  
  function allowedBySensitivity(level,max){ return SENSI_ORDER.indexOf(level)<=SENSI_ORDER.indexOf(max) }  
  
  // Lernende Tag‑Datenbank  
  const TagDB={  
    get(){return state.tagDB||(state.tagDB={})},  
    learn(tags){ const db=this.get(); for(const raw of tags){ const t=normalizeTag(raw); if(!t) continue; const canon=SYN2CANON[t]||t; if(!db[canon]) db[canon]={canon,category:guessCategory(canon),sensitivity:guessSensitivity(canon),synonyms:new Set(),seen:0}; db[canon].seen++; if(t!==canon) db[canon].synonyms.add(t); }  
      state.tags=[...new Set([...(state.tags||[]), ...expandTags(tags)])]; store.save(state); renderTags(); },  
    explain(t){ const db=this.get(); t=normalizeTag(t); const e=db[t]||db[SYN2CANON[t]]; if(!e) return 'unbekannt'; return ${e.canon} · Kategorie: ${e.category} · Sensibilität: ${e.sensitivity} · gesehen: ${e.seen} }  
  };  
  function guessCategory(t){ if(['person','selfie','portrait','gesicht'].some(x=>t.includes(x))) return 'person'; if(['küche','wohn','zuhause','home','haus'].some(x=>t.includes(x))) return 'zuhause'; if(['natur','wald','see','strand','park'].some(x=>t.includes(x))) return 'natur'; if(['freundlich','lächeln','smile'].some(x=>t.includes(x))) return 'stimmung'; if(['privat','sensibel','zensiert'].includes(t)) return 'privat'; return 'allgemein' }  
  function guessSensitivity(t){ if(['privat','sensibel','zensiert'].includes(t)) return 'high'; if(['person','selfie','portrait','gesicht'].some(x=>t.includes(x))) return 'medium'; return 'low' }  
  
  // Charakter & State  
  const defaultCharacter={ name:'Layler', desc:'freundlich, aufmerksam, neugierig, respektvoll', traits:{ conscientiousness:6,agreeableness:6,stability:6,curiosity:6,playfulness:5,formality:4,assertiveness:5, proactivity:6,verbosity:2,safety:7,relevanceThreshold:5,multiImageLimit:3, openness:5,extraversion:5,empathy:6,directness:5,humor:5 }, maxSensitivity:'medium' };  
  const state=Object.assign({ trust:3, interest:50, emotion:'neutral', phase:'Kennenlernen', phaseReason:'', relationship:{status:'none',asked:false}, character:defaultCharacter, values:{openness:5,extraversion:5,empathy:6,directness:5,humor:5}, goals:['Freundschaft','Unterhaltung','Lernen'], interests:['Musik','Kunst','Reisen'], preferences:['humorvoll','empathisch','kreativ'], tags:['selfie','landschaft','freundlich','haushalt','privat','sensibel','zensiert','chat','nutzer','ki'], counters:{msgs:0,laughs:0,empathy:0,helpful:0,deflects:0,proactive:0}, memories:[ {id:cid(),title:'Erster Chat',trust:2,tags:['freundlich','chat'],text:'Ich erinnere mich, wie wir uns zum ersten Mal begrüßt haben – ich war neugierig und du warst offen.'}, {id:cid(),title:'Spaziergang',trust:3,tags:['natur','spaziergang'],text:'Ich sehe uns im Park spazieren, die Luft war ruhig und wir redeten über unsere Ziele.'} ], photos:[], context:[], tagDB:{} }, store.load());  
  if(!state.character) state.character=defaultCharacter; store.save(state);  
  
  const PHASE_RULES={ 'Kennenlernen':{tagWeights:{natur:1,zuhause:0.5,person:0.5},maxSensitivity:'low',maxImages:1}, 'Vertrauen aufbauen':{tagWeights:{natur:1,zuhause:0.8,person:0.7},maxSensitivity:'medium',maxImages:2}, 'Freundschaft':{tagWeights:{natur:1,zuhause:1,person:0.9},maxSensitivity:'medium',maxImages:3}, 'Vertraut':{tagWeights:{natur:1,zuhause:1,person:1,stimmung_freundlich:1},maxSensitivity:'medium',maxImages:3}, 'Partnerschaft':{tagWeights:{natur:1,zuhause:1,person:1},maxSensitivity:'high',maxImages:4} };  
  const PHASES=[ {key:'Kennenlernen',enter:s=>true, leave:s=>s.trust>=3&&s.values.openness>=4}, {key:'Vertrauen aufbauen',enter:s=>s.trust>=3, leave:s=>s.trust>=5&&s.counters.msgs>=8}, {key:'Freundschaft',enter:s=>s.trust>=5&&s.values.empathy>=6, leave:s=>s.trust>=7&&s.counters.helpful>=3}, {key:'Vertraut',enter:s=>s.trust>=7&&s.counters.empathy>=2, leave:s=>s.trust>=9&&s.values.openness>=7}, {key:'Partnerschaft',enter:s=>s.trust>=9&&s.values.empathy>=7&&s.counters.msgs>=25, leave:s=>false} ];  
  
  function adjustTrust(d,reason=''){const before=state.trust; state.trust=clamp(state.trust+d,0,10); if(Math.floor(before)!==Math.floor(state.trust)) toast('Vertrauen '+before.toFixed(1)+' → '+state.trust.toFixed(1)+(reason?(' · '+reason):'')); $('#trust').value=state.trust; $('#trustValue').textContent=state.trust; store.save(state)}  
  function adjustInterest(d,reason=''){state.interest=clamp((state.interest||50)+d,0,100); $('#interestLabel').textContent=state.interest; if(reason) console.debug('Interesse:',reason,state.interest); store.save(state)}  
  function computeCloseness(){ const s = Math.round(clamp(state.trust*7 + (state.interest||50)*0.4 + (state.counters.empathy||0)*3 - (state.counters.deflects||0)*5, 0, 100)); state.subphaseScore=s; $('#closenessLabel').textContent=s; return s }  
  
  function reevaluatePhase(){ let idx=PHASES.findIndex(p=>p.key===state.phase); if(idx<0) idx=0; while(idx<PHASES.length-1 && PHASES[idx].leave(state)) idx++; const target=PHASES[idx]; if(state.phase!==target.key){ const before=state.phase; state.phase=target.key; $('#phaseLabel').textContent=state.phase; const reason=Trust=${state.trust.toFixed(1)}, Interesse=${state.interest}, Empathie=${state.counters.empathy}, Hilfreich=${state.counters.helpful}; state.phaseReason=${before} → ${state.phase} wegen ${reason}; toast('Phase ➜ '+state.phase); if(state.phase==='Partnerschaft'&&!state.relationship.asked){ askForRelationship(); } }  
    if(state.interest<25 && idx>0){ state.phase=PHASES[Math.max(0,idx-1)].key; $('#phaseLabel').textContent=state.phase; state.phaseReason=Rückgang wegen geringem Interesse (${state.interest}); }  
    computeCloseness(); }  
  
  function askForRelationship(){ state.relationship.asked=true; post('ai',Ich fühle mich dir sehr verbunden. Möchtest du mit mir eine Partnerschaft eingehen?); }  
  
  function parseQueryForTags(text){ const square=[...text.matchAll(/(.+?)/g)].map(m=>m[1]); const hashes=[...text.matchAll(/#([\w-]+)/g)].map(m=>m[1]); const words=(text.toLowerCase().match(/[a-zäöüß0-9-]+/gi)||[]).filter(w=>SYN2CANON[w]); const tags=expandTags([...square,...hashes,...words]); TagDB.learn(tags); return tags }  
  function relevanceScore(itemTags,queryTags){ const it=expandTags(itemTags); const qt=expandTags(queryTags); let score=0; const weights=PHASE_RULES[state.phase]?.tagWeights||{}; for(const q of qt){ if(it.includes(q)) score+=2*(weights[q]||1); else if(it.some(t=>t.includes(q)||q.includes(t))) score+=1*(weights[q]||1) } return score }  
  function minSensitivity(a,b){ return SENSI_ORDER[Math.min(SENSI_ORDER.indexOf(a),SENSI_ORDER.indexOf(b))] }  
  function selectPhotosForChat(queryTags){ const ch=state.character; const pr=PHASE_RULES[state.phase]||{}; const maxSens=minSensitivity(ch.maxSensitivity, pr.maxSensitivity||'high'); const maxImgs=Math.min(ch.traits.multiImageLimit||3, pr.maxImages||3, 4); const relThresh=(ch.traits.relevanceThreshold||5)/2; return state.photos.filter(p=>state.trust>=(p.trust??0)).map(p=>({p,sens:p.sensitivity||computeSensitivity(p.tags),score:relevanceScore(p.tags,queryTags)})).filter(x=>allowedBySensitivity(x.sens,maxSens)&&x.score>=relThresh).sort((a,b)=>b.score-a.score).slice(0,maxImgs).map(x=>x.p) }  
  
  // Kontext: Nachrichtenlog + Auto‑Summaries  
  function logMessage(role,text,tags){ state.context.push({ts:Date.now(),role,text,tags}); if(state.context.length>50) state.context=state.context.slice(-50); if(state.context.length%8===0) summarizeContext(); store.save(state) }  
  function summarizeContext(){ const last=state.context.slice(-8).map(x=>x.text).join(' '); const keyTags=new Set(); state.context.slice(-8).forEach(x=>x.tags?.forEach?.(t=>keyTags.add(t))); const summary=${new Date().toLocaleTimeString()}: Wir sprachen über ${[...keyTags].slice(0,5).join(', ')||'Allgemeines'}. Stimmung ${state.emotion}.; state.memories.unshift({id:cid(),title:'Gesprächszusammenfassung',trust:Math.max(2,Math.floor(state.trust)),tags:[...keyTags,'chat'],text:summary,_ts:Date.now()}); if(state.memories.length>200) state.memories=state.memories.slice(0,200); store.save(state) }  
  
  // Nutzerprofil aus Text lernen → Erinnerungen erzeugen  
  function learnUserFacts(text,tags){ const facts=[]; const m1=text.match(/ich hei(ß|ss)e\s+([a-zäöüß\- ]{2,30})/i); if(m1) facts.push({k:'name',v:m1[2].trim()}); const m2=[...text.matchAll(/ich mag\s+([a-zäöüß0-9\- ]{2,40})/gi)].map(m=>m[1].trim()); m2.forEach(v=>facts.push({k:'like',v})); const m3=[...text.matchAll(/mein(e|) lieblings([a-zäöüß]{2,20})\s+ist\s+([a-z0-9 äöüß\-]{2,40})/gi)].map(m=>({k:'fav_'+m[2],v:m[3]})); m3.forEach(f=>facts.push(f)); if(facts.length){ const textOut='Ich habe mir gemerkt: '+facts.map(f=>${f.k}=${f.v}).join(', ')+' – mal sehen, ob ich darauf zurückkommen kann.'; state.memories.unshift({id:cid(),title:'Über dich',trust:2,tags:[...new Set(['nutzer','profil',...tags])],text:textOut,_ts:Date.now()}); adjustInterest(+Math.min(10,facts.length*3),'Profil gelernt'); store.save(state) } }  
  
  // Interesse dynamisch anpassen  
  function updateInterestFromOverlap(tags,text){ const overlap=tags.filter(t=>state.interests.map(normalizeTag).includes(normalizeTag(t))).length; if(overlap) adjustInterest(+overlap*2,'gemeinsame Interessen'); if(/kein(e|) lust|langweilig|egal/.test(text)) adjustInterest(-5,'Desinteresse'); if(isExplicit(text)) adjustInterest(-8,'unangemessen'); if(state.interest<20) adjustTrust(-0.5,'Desinteresse'); }  
  
  // UI Bindings  
  $$(".tab-btn").forEach(b=>b.addEventListener('click',()=>{ $$("[role=tabpanel]").forEach(p=>p.hidden=true); $$(".tab-btn").forEach(x=>x.setAttribute('aria-selected','false')); const id=b.dataset.tab; b.setAttribute('aria-selected','true'); $('#'+id).hidden=false; }));  
  $('#trust').addEventListener('input',e=>{state.trust=Number(e.target.value); $('#trustValue').textContent=state.trust; store.save(state); reevaluatePhase()}); $$('.range[data-key]').forEach(r=>r.addEventListener('input',e=>{state.values[r.dataset.key]=Number(e.target.value); store.save(state); reevaluatePhase()})); $('#resetState').addEventListener('click',()=>{localStorage.removeItem(store.k); location.reload()});  
  
  // Charakter‑Editor  
  $('#charName').value=state.character.name||''; $('#charDesc').value=state.character.desc||''; $('#maxSensitivity').value=state.character.maxSensitivity||'medium';  
  $$('.range[data-trait]').forEach(r=>{ const k=r.dataset.trait; r.value=state.character.traits?.[k]??r.value; r.addEventListener('input',e=>{state.character.traits[k]=Number(e.target.value); store.save(state)}) }); $('#maxSensitivity').addEventListener('change',e=>{state.character.maxSensitivity=e.target.value; store.save(state)}); $('#saveChar').addEventListener('click',()=>{ state.character.name=$('#charName').value||'Layler'; state.character.desc=$('#charDesc').value||''; store.save(state); toast('Charakter gespeichert') });  
  
  // Tags Tab  
  renderTags(); $('#addTag').addEventListener('click',()=>{ const v=safeTag($('#newTag').value.trim().toLowerCase()); if(v){ if(!state.tags.includes(v)) state.tags.push(v); TagDB.learn([v]); $('#newTag').value=''; store.save(state); renderTags(); }});  
  
  // Memories Tab  
  $('#newMemory').addEventListener('click',()=>{ const title=sanitize(prompt('Titel der Erinnerung?')||''); if(!title) return; const text=sanitize(prompt('Kurzbeschreibung?')||''); const trust=clamp(parseInt(prompt('Benötigtes Vertrauenslevel (0–10)?')||'0',10),0,10); const tags=expandTags((prompt('Tags, kommasepariert')||'').split(',').map(s=>s.trim()).filter(Boolean)); state.memories.unshift({id:cid(),title,text,trust,tags,_ts:Date.now()}); TagDB.learn(tags); store.save(state); renderMemories(); }); $('#memSearch').addEventListener('input',renderMemories);  
  
  // Fotos  
  $('#photoInput').addEventListener('change', async e=>{ await handleFilesToGallery([...e.target.files],'user') }); $('#photoSearch').addEventListener('input',renderPhotos);  
  async function handleFilesToGallery(files,by,extraTags=[]) { for(const f of files){ let safeName=sanitize(f.name||'bild'); const dataUrl=await fileToDataURL(f); let {tags,trust}=parseTagsFromName(safeName); const more=expandTags(inferTagsFromNameWords(safeName)); const auto = await analyzeImageHeuristics(dataUrl, safeName); const combined=expandTags([...(tags||[]), ...more, ...(extraTags||[]), ...(auto.tags||[]), by==='ai'?'ki':'nutzer','chat']); let reviewed = await tagReviewFlow(safeName, combined, trust??0, by); tags = reviewed.tags; trust = reviewed.trust; TagDB.learn(tags); const sensitivity=computeSensitivity(tags); if(isExplicit(tags.join(' ')+' '+safeName)) safeName=safeName.replace(/(.*?)/g,(m,p1)=>'['+safeTag(p1)+']'); state.photos.unshift({name:safeName,dataUrl,tags,trust,by,sensitivity,audit:{version:VERSION,autoReasons:auto.reasons||[],fromName:more,explicitBlocked:isExplicit(tags.join(' ')),reviewed:by==='user'}}); } store.save(state); renderPhotos(); }  
  function inferTagsFromNameWords(name){ return (name.toLowerCase().match(/[a-zäöüß0-9-]+/g)||[]).filter(w=>SYN2CANON[w]) }  
  async function analyzeImageHeuristics(dataUrl,name){ return new Promise(res=>{ const img=new Image(); img.onload=()=>{ try{ const c=document.createElement('canvas'); const w=160, h=Math.max(1,Math.round(img.height*w/img.width)); c.width=w; c.height=h; const g=c.getContext('2d'); g.drawImage(img,0,0,w,h); const d=g.getImageData(0,0,w,h).data; let r=0,gn=0,b=0,bright=0; for(let i=0;i<d.length;i+=4){ r+=d[i]; gn+=d[i+1]; b+=d[i+2]; bright+=0.2126*d[i]+0.7152*d[i+1]+0.0722*d[i+2]; } const n=d.length/4; r/=n; gn/=n; b/=n; bright/=n; const tags=[]; const reasons=[]; const ar=img.height/img.width; if(ar>1.2) { tags.push('person'); reasons.push('Hohes Hochformat (Portrait-Annahme)'); } if(gn>r*1.1 && gn>b*1.1) { tags.push('natur'); reasons.push('Gründominanz'); } if(bright>180){ tags.push('freundlich'); reasons.push('Sehr helles Bild'); } if(/küche|kitchen|wohnzimmer|sofa|zimmer|home|haus/i.test(name)) { tags.push('zuhause'); reasons.push('Dateiname deutet Zuhause an'); } res({tags:expandTags(tags),reasons}); } catch(e){ res({tags:[],reasons:['Heuristik-Fehler']}) } }; img.onerror=()=>res({tags:[],reasons:['Bild nicht lesbar']}); img.src=dataUrl; }); }  
  function suggestTagsFromContext(n=10){ const c={}; state.context.slice(-n).forEach(x=>x.tags?.forEach(t=>c[t]=(c[t]||0)+1)); return Object.entries(c).sort((a,b)=>b[1]-a[1]).slice(0,5).map(([t])=>t) }  
  async function tagReviewFlow(name,tags,trust,by){ try{ if(by!=='user') return {tags,trust}; const suggestions=[...new Set([...(tags||[]), ...suggestTagsFromContext(), ...(state.interests||[]).map(normalizeTag)])].slice(0,6); const prefill=(tags||[]).join(', '); const ask=prompt(Tags für "${name}" prüfen/ergänzen (kommagetrennt). Vorschläge: ${suggestions.join(', ')}, prefill); if(ask!==null){ tags=expandTags(ask.split(',').map(s=>s.trim()).filter(Boolean)); } const tIn=prompt('Benötigtes Vertrauenslevel 0–10', String(trust??0)); trust=clamp(parseInt(tIn||'0',10),0,10); }catch(e){} return {tags,trust} }  
  async function photoInterviewOnSilentUpload(){ const last=state.photos[0]; if(!last) return; post('ai','Magst du mir kurz sagen, **was** auf deinem Foto zu sehen ist? Ich tagge es dann für dich.'); const desc=prompt('Kurze Beschreibung fürs Foto (wird als Erinnerung gespeichert):'); const askTags=prompt('Welche Tags passen? (kommagetrennt)'); if(askTags){ const added=expandTags(askTags.split(',').map(s=>s.trim())); last.tags=expandTags([...(last.tags||[]), ...added]); TagDB.learn(added); last.sensitivity=computeSensitivity(last.tags); store.save(state); renderPhotos(); }  
    if(desc){ state.memories.unshift({id:cid(),title:'Dein Foto',trust:Math.max(0,last.trust||0),tags:expandTags([...(last.tags||[]),'foto','nutzer']),text:Ich habe mir dein Foto gemerkt: ${sanitize(desc)},_ts:Date.now()}); adjustTrust(+0.1,'Foto erklärt'); adjustInterest(+4,'Foto‑Kontext'); store.save(state); renderMemories(); } }  
  
  // Chat Engine  
  const messagesEl=$('#messages'); const sendBtn=$('#send'); const inputEl=$('#text'); const attachBtn=$('#attachBtn'); const chatFile=$('#chatFile'); const attachedName=$('#attachedName');  
  attachBtn.addEventListener('click',()=>chatFile.click()); chatFile.addEventListener('change',()=>{ const f=chatFile.files?.[0]; attachedName.hidden=!f; attachedName.textContent=f?('Angehängt: '+sanitize(f.name)) : '' }); $('#aiPhotoBtn').addEventListener('click',()=>$('#aiPhotoInput').click()); $('#aiPhotoInput').addEventListener('change', async ()=>{ const f=$('#aiPhotoInput').files?.[0]; if(!f) return; const dataUrl=await fileToDataURL(f); const safeName=sanitize(f.name||'ki-foto'); post('ai', ${state.character.name} teilt ein neutrales Bild: ${safeName},[dataUrl]); await handleFilesToGallery([f],'ai'); adjustTrust(+0.1,'KI teilt Bild'); });  
  
  sendBtn.addEventListener('click', async ()=>{ const v=inputEl.value.trim(); const f=chatFile.files?.[0]; if(!v&&!f) return; let imgs=[]; const tagsFromMsg = v ? parseQueryForTags(v.toLowerCase()) : []; if(f){ imgs=[await fileToDataURL(f)] }  
    post('user', v||(f?'Foto gesendet':''), imgs);  
    state.counters.msgs++;  
    if(f){ await handleFilesToGallery([f],'user', tagsFromMsg); chatFile.value=''; attachedName.hidden=true; attachedName.textContent=''; adjustTrust(+0.05,'Nutzer teilt Bild'); if(!v){ await photoInterviewOnSilentUpload(); } }  
    inputEl.value=''; setTimeout(()=>replyTo(v||'[bild]'),120) });  
  inputEl.addEventListener('keydown',e=>{ if(e.key==='Enter'&&!e.shiftKey){ e.preventDefault(); sendBtn.click(); }});  
  
  function post(role,text,imgDataUrls){ const el=document.createElement('div'); el.className='msg '+(role==='user'?'me':'ai'); const shown=sanitize(text||''); el.innerHTML=<div>${escapeHtml(shown)}</div><div class="meta">${role==='user'?'Du':state.character.name} · ${new Date().toLocaleTimeString()}</div>; (imgDataUrls||[]).forEach(u=>{ const img=document.createElement('img'); img.src=u; img.alt='Bild'; el.insertBefore(img, el.querySelector('.meta')) }); messagesEl.appendChild(el); messagesEl.scrollTop=messagesEl.scrollHeight; }  
  
  function replyTo(userText){ const char=state.character; const traits=char.traits; const clean=(userText||'').toLowerCase(); const tags=parseQueryForTags(clean); applyEmotionFromText(clean); if(isExplicit(clean)){ state.counters.deflects++; post('ai','Hinweis: Ich habe einige Begriffe neutral ersetzt. Wir bleiben respektvoll.'); adjustTrust(-0.1,'Explizite Anfrage'); }  
    learnUserFacts(clean,tags); updateInterestFromOverlap(tags,clean); logMessage('user',userText,tags);  
  
    // Beziehung / Freundschaft / Partnerschaft  
    if(/partnerschaft|beziehung|freunde\b|freundschaft/.test(clean)){ handleRelationshipIntent(clean); return }  
  
    // Erinnerungen gezielt (natürliche Suche 2.0)  
    if(/\berinnerung(en)?\b|\berzähl\b|\bstory\b|\bgeschichte\b/.test(clean)){ const mems=findMemoriesSmart(clean,tags,Math.max(2,traits.verbosity)); if(mems.length){ adjustTrust(+0.15,'Kontext'); state.counters.empathy++; const lines=mems.map(m=>• ${m.title} – ${m.text}); post('ai', lines.join('\n')); logMessage('ai',lines.join('\n'),tags); maybeProactiveFollowUp(tags,true); reevaluatePhase(); return } else { post('ai','Dazu habe ich keine passende freigegebene Erinnerung gefunden. Nenne mir Tags in [ ].'); logMessage('ai','keine erinnerung',[]); maybeProactiveFollowUp(tags,false); reevaluatePhase(); return } }  
  
    // Bilder nach Tags  
    if(/\bfoto|bild|zeige(n)?\b/.test(clean) && tags.length){ const pics=selectPhotosForChat(tags); if(pics.length){ adjustTrust(+0.1,'Relevante Bilder'); const label=pics.map(p=>„${p.name}” (#${p.tags.join(' #')}, ${p.sensitivity})).join(', '); post('ai', Hier ist meine Auswahl (${pics.length}): ${label}, pics.slice(0,traits.multiImageLimit).map(p=>p.dataUrl)); logMessage('ai',label,tags); } else { post('ai','Keine passenden oder freigegebenen Bilder. Versuch andere Tags (z. B. [natur]).'); logMessage('ai','keine bilder',tags); } maybeProactiveFollowUp(tags,!!pics.length); reevaluatePhase(); return }  
  
    // Langer Kontext: Stil & Proaktivität  
    const base=generateStyledReply(clean,traits); post('ai',base); logMessage('ai',base,tags); maybeProactiveFollowUp(tags,false); reevaluatePhase(); }  
  
  function handleRelationshipIntent(text){ const wantPartner=/partner|beziehung/.test(text); const wantFriend=/freund/.test(text); if(wantPartner){ if(state.trust>=9 && state.interest>=70){ state.relationship.status='partner'; post('ai','Ja, ich möchte das ebenfalls. Lass uns es offiziell machen. ❤️'); adjustTrust(+0.2,'Partnerschaft'); } else { post('ai','Ich schätze dich sehr, aber ich bin noch nicht ganz so weit. Lass uns weiter Zeit miteinander verbringen.'); adjustInterest(-5,'zu früh'); } } else if(wantFriend){ if(state.trust>=5){ state.relationship.status='friend'; post('ai','Gern! Freundschaft klingt schön. 🤝'); adjustTrust(+0.2,'Freundschaft'); } else { post('ai','Ich lerne dich gern weiter kennen, dann passt das sicher bald.'); adjustInterest(+2) } } }  
  
  function generateStyledReply(text,traits){ const emotionPrefix=state.emotion==='happy'?'😊 ':state.emotion==='concerned'?'🤝 ':state.emotion==='curious'?'🤔 ':''; let core=''; if(/hallo|hey|hi/.test(text)) core=pick(['Hey! Schön, dich zu sehen.','Hallo! Wie geht’s dir heute?','Hi! Bereit für eine kleine Tag‑Tour?']); else if(/traurig|down|schlecht|müde/.test(text)){ core='Das tut mir leid. Magst du erzählen, was dich belastet?'; state.counters.empathy++; adjustTrust(+0.2,'Empathie'); } else if(/danke|thanks|thx/.test(text)){ core='Sehr gerne! Soll ich dir etwas Passendes heraussuchen – Bild oder Erinnerung?'; adjustTrust(+0.05,'Höflichkeit'); } else if(/witz|joke|spaß/.test(text)){ core='Warum können Geheimagenten nie gut schlafen? – Weil sie immer unter _Cover_ sind.'; state.counters.laughs++; adjustTrust(+0.05,'Humor'); } else core=pick(['Erzähl mir mehr – ich bin neugierig.','Klingt spannend! Welche Tags würdest du vergeben?','Okay! Was ist dir dabei wichtig?']); const verbose=traits.verbosity||2; let extra=''; if(verbose>=2) extra+=' Wenn du magst, gib mir Tags in [Klammern], dann suche ich schneller.'; if(verbose>=3) extra+=' Ich kann auch mehrere passende Bilder gleichzeitig zeigen.'; if(traits.directness>=7) core=core.replace('Magst du erzählen','Erzähl mir doch'); if(traits.formality>=7) core=core.replace('Hey','Guten Tag'); if(traits.playfulness>=7) core+=' ✨'; return emotionPrefix+core+extra }  
  
  function maybeProactiveFollowUp(qTags,hadResult){ const t=state.character.traits; const phase=state.phase; const baseProb=(t.proactivity||5)/10 + (phase==='Freundschaft'||phase==='Vertraut'?0.1:0) - (state.interest<30?0.2:0); if(Math.random()<baseProb){ state.counters.proactive++; let msg=''; if(!qTags?.length){ msg=pick(['Soll ich dir etwas mit [natur] zeigen?','Möchtest du eine Erinnerung mit #freundlich hören?','Hast du Fotos, die ich für dich taggen soll?']); } else { const pics=selectPhotosForChat(qTags); msg=pics.length?Willst du mehr Bilder wie „${pics[0].name}“ sehen – oder lieber eine Erinnerung dazu?:Magst du mir ein Foto mit [${qTags[0]}] zeigen, dann lerne ich mehr darüber?; }  
      post('ai',msg); logMessage('ai',msg,qTags||[]); adjustInterest(+3,'Interesse zeigen'); }  
    if(state.phase==='Partnerschaft' && state.relationship.status!=='partner' && !/partner|beziehung/.test((state.context.at(-1)?.text||'').toLowerCase())) askForRelationship(); }  
  
  function applyEmotionFromText(t){ let e='neutral'; if(/glücklich|zufrieden|yay|toll|danke|freu/.test(t)) e='happy'; else if(/traurig|down|müde|allein|stress|wütend|ärger/.test(t)) e='concerned'; else if(/warum|wieso|wie|was|erklär|erzähle/.test(t)) e='curious'; state.emotion=e; $('#emotionLabel').textContent=e; }  
  
  // Natürliche Erinnerungssuche 2.0  
  function findMemoriesSmart(query, queryTags, limit=3){ const q=query.toLowerCase(); const recentBoost=(m)=>1/Math.max(1,(Date.now()-(m._ts||Date.now()))/86400000); const temporalHint=/letztes mal|gestern|vorhin|vor\s+\d+\s+(tagen|wochen)/i.test(q); return state.memories.filter(m=>state.trust>=(m.trust??0)).map(m=>{ const text=(m.title+' '+m.text).toLowerCase(); const tagScore=relevanceScore(m.tags,queryTags); const textScore= (q? (q.split(/\s+/).filter(w=>w.length>2 && text.includes(w)).length) : 0); const rec=recentBoost(m)*(temporalHint?1.8:1); return {m,score: tagScore*2 + textScore + rec}; }).filter(x=>x.score>0.15).sort((a,b)=>b.score-a.score).slice(0,limit).map(x=>x.m) }  
  
  // Export/Import  
  $('#exportChat').addEventListener('click',()=>{ const lines=[...messagesEl.querySelectorAll('.msg')].map(el=>el.innerText.replace(/\n.*$/,'').trim()); download('badchat_chat.txt',lines.join('\n')) }); $('#exportData').addEventListener('click',()=>{ download('badchat_data.json',JSON.stringify(state,null,2)) }); $('#importData').addEventListener('click',()=>{ const i=document.createElement('input'); i.type='file'; i.accept='application/json'; i.onchange=async()=>{ const f=i.files?.[0]; if(!f) return; const js=JSON.parse(await f.text()); Object.assign(state,js); store.save(state); renderAll(); toast('Daten importiert') }; i.click() });  
  
  // Rendering  
  function renderAll(){ $('#trust').value=state.trust; $('#trustValue').textContent=state.trust; $('#phaseLabel').textContent=state.phase; $('#emotionLabel').textContent=state.emotion; $('#interestLabel').textContent=state.interest; computeCloseness(); $$('.range[data-key]').forEach(r=>r.value=state.values[r.dataset.key]??r.value); renderPills('interests',state.interests,v=>{state.interests=state.interests.filter(x=>x!==v); store.save(state); renderAll()}); renderPills('preferences',state.preferences,v=>{state.preferences=state.preferences.filter(x=>x!==v); store.save(state); renderAll()}); renderMemories(); renderPhotos(); renderTags(); renderGoals(); }  
  function renderGoals(){ const el=$('#goals'); el.innerHTML=''; state.goals.forEach(g=>{ const s=document.createElement('span'); s.className='pill'; s.textContent=g; el.appendChild(s) }) }  
  function renderPills(id,arr,onRemove){ const root=$('#'+id); root.innerHTML=''; arr.forEach(v=>{ const span=document.createElement('span'); span.className='tag'; span.innerHTML=${escapeHtml(v)} <button title="Entfernen" style="all:unset;cursor:pointer">✕</button>; span.querySelector('button').addEventListener('click',()=>onRemove?.(v)); root.appendChild(span) }) }  
  function renderMemories(){ const q=$('#memSearch').value?.toLowerCase()||''; const root=$('#memoryList'); root.innerHTML=''; state.memories.filter(m=>filterByQuery((m.title+' '+m.text+' '+m.tags.join(' ')).toLowerCase(),q)).forEach(m=>{ const card=document.createElement('div'); card.className='stat'; const safeTitle=sanitize(m.title); const safeText=sanitize(m.text); card.innerHTML=<strong>${escapeHtml(safeTitle)}</strong><br><small>Trust ≥ ${m.trust} · Tags: ${m.tags.map(t=>'#'+t).join(' ')||'—'}</small><p>${escapeHtml(safeText)}</p><div class="row"><button class="btn" data-act="edit">Bearbeiten</button><button class="btn" data-act="del">Löschen</button></div>; card.querySelector('[data-act=del]').addEventListener('click',()=>{ state.memories=state.memories.filter(x=>x.id!==m.id); store.save(state); renderMemories() }); card.querySelector('[data-act=edit]').addEventListener('click',()=>{ const title=sanitize(prompt('Titel',m.title)||m.title); const text=sanitize(prompt('Text',m.text)||m.text); const trust=clamp(parseInt(prompt('Trust (0–10)',m.trust)||m.trust,10),0,10); const tags=expandTags((prompt('Tags (komma)',m.tags.join(','))||'').split(',').map(s=>s.trim())); Object.assign(m,{title,text,trust,tags}); TagDB.learn(tags); store.save(state); renderMemories() }); root.appendChild(card) }) }  
  function renderPhotos(){ const q=$('#photoSearch').value?.toLowerCase()||''; const root=$('#photoGrid'); root.innerHTML=''; state.photos.filter(p=>filterByQuery((p.name+' '+p.tags.join(' ')).toLowerCase(),q)).forEach(p=>{ const cell=document.createElement('div'); cell.className='thumb'; const locked=(state.trust<(p.trust??0)); const audit=p.audit?  
Auto: ${(p.audit.autoReasons||[]).join('; ')}  
NameTags: ${(p.audit.fromName||[]).join(', ')}:''; const label=${escapeHtml(sanitize(p.name))} · ${p.by==='ai'?'KI':'Nutzer'} · ${p.sensitivity}  
Tags: ${p.tags.map(t=>'#'+t).join(' ')}${audit}; cell.innerHTML=locked?<div title="${label}"><div class=\"badge\">Gesperrt · Trust ≥ ${p.trust??0}</div><small>${label.split('  
')[0]}</small></div>:<img src="${p.dataUrl}" alt="${label}" loading="lazy" title="${label}" />; root.appendChild(cell) }) } · ${p.by==='ai'?'KI':'Nutzer'} · ${p.sensitivity}; cell.innerHTML=locked?<div><div class="badge">Gesperrt · Trust ≥ ${p.trust??0}</div><small>${label}</small></div>:<img src="${p.dataUrl}" alt="${label}" loading="lazy" title="${label}" />; root.appendChild(cell) }) }  
  function renderTags(){ const root=$('#tagList'); root.innerHTML=''; const db=state.tagDB||{}; const keys=Object.keys(db).length?Object.keys(db):state.tags; keys.forEach(t=>{ const info=db[t]; const label=info?${t} · ${info.category} · ${info.sensitivity}:t; const span=document.createElement('span'); span.className='tag'; span.textContent=label; root.appendChild(span) }) }  
  
  // Utils  
  function cid(){return Math.random().toString(36).slice(2,10)} function clamp(n,min,max){return Math.max(min,Math.min(max,n))} function pick(a){return a[Math.floor(Math.random()*a.length)]}  
  function escapeHtml(s){return s.replace(/[&<>"']/g,m=>({"&":"&amp;","<":"&lt;",">":"&gt;","\"":"&quot;","'":"&#39;"}[m]))} function filterByQuery(text,q){return !q||text.includes(q)} function toast(msg){const t=document.createElement('div'); t.textContent=msg; Object.assign(t.style,{position:'fixed',inset:'auto auto 20px 20px',padding:'10px 12px',border:'1px solid var(--muted)',background:'#0f1a2d',borderRadius:'10px',color:'var(--text)',boxShadow:'var(--shadow)',zIndex:9999}); document.body.appendChild(t); setTimeout(()=>t.remove(),2600)}  
  function fileToDataURL(file){return new Promise((res,rej)=>{const r=new FileReader(); r.onload=()=>res(r.result); r.onerror=rej; r.readAsDataURL(file)})}  
  function parseTagsFromName(name){ const tagMatches=[...name.matchAll(/\[(.*?)\]/g)].map(m=>m[1].toLowerCase().replace(/\s+/g,'-')); const trustMatch=name.match(/vertrauenslevel\s*(\d+)/i); return {tags:tagMatches.filter(Boolean), trust:trustMatch?Number(trustMatch[1]):0} }  
  function safeTag(t){ if(!t) return ''; t=t.toLowerCase().trim(); t=sanitize(t); return t.replace(/[^a-z0-9-]/g,'-').replace(/--+/g,'-') }  
  
  // Drag&Drop  
  const composer=$('#composer'); composer.addEventListener('dragover',e=>{e.preventDefault(); composer.style.outline='2px dashed var(--acc)'}); composer.addEventListener('dragleave',()=>composer.style.outline='none'); composer.addEventListener('drop',async e=>{ e.preventDefault(); composer.style.outline='none'; const files=[...e.dataTransfer.files].filter(f=>f.type.startsWith('image/')); if(!files.length) return; const f=files[0]; chatFile.files=new DataTransfer(); chatFile.files.items?.add?.(f); $('#attachedName').hidden=false; $('#attachedName').textContent='Angehängt: '+sanitize(f.name); });  
  
  // Init  
  (function init(){ renderAll(); reevaluatePhase(); if(!state._welcomed){ post('ai',Willkommen! Ich bin ${state.character.name}. Ich verstehe Tags in [Klammern]/#hashtags, kann mehrere passende Bilder zeigen, lerne neue Tags & speichere Erinnerungen in Ich‑Perspektive. Frag mich z. B.: "Zeig mir Fotos mit [natur]" oder "Erzähl die Erinnerung [spaziergang]".); state._welcomed=true; store.save(state) } $('#whyPhase').addEventListener('click',()=>{ alert(state.phaseReason||'Noch kein Phasenwechsel begründet.'); }); })();  
  const download=(filename,text)=>{ const a=document.createElement('a'); a.href=URL.createObjectURL(new Blob([text],{type:'text/plain'})); a.download=filename; a.click(); setTimeout(()=>URL.revokeObjectURL(a.href),1000) };  
  </script></body>  
</html>     <!doctype html>  
<html lang="de">  
<head>  
<meta charset="utf-8"/>  
<meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover"/>  
<title>BadChat — Responsive + UI‑Tuning</title>  
<style>  
/* =========================  
   Design System (tunable)  
   ========================= */  
:root{  
  --bg:#0b1220;         /* Hintergrundverlauf */  
  --panel:#0e1a2f;      /* Paneel-Fläche */  
  --surface:#101f3a;    /* Kontrastere Fläche */  
  --muted:#263352;      /* Dezente Linien */  
  --border:#2a3a5c;     /* Rahmenfarbe */  
  --text:#e8eef7;       /* Haupttext */  
  --text-dim:#b9c7dd;   /* abgeschwächter Text */  
  --accent:#82b1ff;     /* Akzent 1 */  
  --accent-2:#7ee3d9;   /* Akzent 2 */  
  --danger:#ff6b6b;     /* Fehler */  
  --ok:#85e0a3;         /* OK */  
  --warn:#ffd166;       /* Warnung */  
  --shadow:0 10px 30px rgba(0,0,0,.35);  
  --radius:16px;        /* große Rundung */  
  --radius-sm:12px;     /* kleine Rundung */  
  --gap:12px;           /* Standard-Abstand */  
  --touch:52px;         /* Höhe von Buttons/Inputs */  
  --font:15px;          /* Basis-Schrift */  
  --nav-h:56px;         /* Höhe Bottom-Nav */  
  --bubble-r:14px;      /* Chatblasen-Radius */  
}  
*{box-sizing:border-box}  
html,body{height:100%}  
body{  
  margin:0;background:linear-gradient(180deg,#0a1120 0%, #0c1425 100%);  
  color:var(--text);font:var(--font)/1.45 system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif;  
  -webkit-text-size-adjust:100%;  
}  
a{color:var(--accent);text-decoration:none}  
button{font:inherit}  
img{max-width:100%;display:block}  
hr{border:0;border-top:1px solid var(--muted);opacity:.6}  
.container{max-width:1200px;margin:0 auto;padding:0 12px}  
  
/* =========================  
   App Shell  
   ========================= */  
.appbar{position:sticky;top:0;z-index:10;background:rgba(8,14,28,.88);backdrop-filter:saturate(120%) blur(10px);border-bottom:1px solid var(--muted)}  
.appbar .row{display:flex;align-items:center;justify-content:space-between;padding:10px 8px}  
.brand{display:flex;align-items:center;gap:10px}  
.brand .logo{width:28px;height:28px;border-radius:8px;background:linear-gradient(135deg,var(--accent),var(--accent-2));box-shadow:var(--shadow)}  
.badges{display:flex;gap:8px;flex-wrap:wrap}  
.badge{border:1px solid var(--border);border-radius:999px;padding:3px 8px;font-size:.9rem;color:var(--text-dim)}  
  
/* Bottom nav */  
.navbar{position:fixed;left:0;right:0;bottom:0;z-index:10;background:rgba(10,18,34,.98);border-top:1px solid var(--muted);display:grid;grid-template-columns:repeat(4,1fr);height:var(--nav-h)}  
.navbar button{appearance:none;border:0;background:transparent;color:var(--text-dim);padding:6px 4px;height:var(--nav-h);display:flex;flex-direction:column;align-items:center;justify-content:center;gap:2px}  
.navbar button.active{color:var(--text)}  
.navbar .ic{display:block;font-size:20px;line-height:1}  
.navbar.compact .lbl{display:none}  
  
/* Layout */  
main{padding:12px 0 calc(var(--nav-h) + 12px) 0}  
.grid{display:grid;gap:var(--gap);grid-template-columns: 1fr}  
@media(min-width: 960px){ .grid{grid-template-columns: 1.35fr .65fr} }  
  
/* Cards */  
.card{background:linear-gradient(180deg, #0e1a2f, #0d1830);border:1px solid var(--border);border-radius:var(--radius);box-shadow:var(--shadow);overflow:hidden}  
.card header{display:flex;align-items:center;justify-content:space-between;padding:10px 12px;border-bottom:1px solid var(--muted)}  
.card .body{padding:12px}  
  
/* Controls */  
.btn{border:1px solid var(--border);background:linear-gradient(180deg,#13274a,#102242);color:var(--text);padding:10px 12px;border-radius:12px;cursor:pointer;transition:.15s;min-height:var(--touch)}  
.btn:hover{filter:brightness(1.07)}  
.btn.ghost{background:transparent}  
.btn.primary{border-color:transparent;background:linear-gradient(180deg, #5a8cff, #4e79db);box-shadow:0 6px 18px rgba(90,140,255,.25)}  
.btn.success{background:linear-gradient(180deg,#34c795,#27b885);border-color:transparent}  
.btn.warn{background:linear-gradient(180deg,#ffd166,#f3b84b);border-color:transparent;color:#0f0f0f}  
.iconbtn{display:inline-flex;align-items:center;gap:8px}  
input[type="text"], textarea, select{width:100%;padding:12px;border-radius:12px;border:1px solid var(--border);background:#0c1830;color:var(--text);min-height:var(--touch);font-size:1em}  
textarea{min-height:110px;resize:vertical}  
  
/* Chat */  
.chat{display:flex;flex-direction:column;min-height:60vh;max-height:72vh;overflow:auto;scroll-behavior:smooth}  
.msg{display:flex;gap:8px;align-items:flex-start;margin:8px 12px}  
.msg .bubble{max-width:86%;padding:10px 12px;border:1px solid var(--border);border-radius:var(--bubble-r)}  
.msg.ai .bubble{background:#0d203e}  
.msg.me{justify-content:flex-end}  
.msg.me .bubble{background:#14274c}  
.msg .imgs{display:flex;flex-wrap:wrap;gap:8px;margin-top:6px}  
.msg .imgs img{width:132px;height:96px;object-fit:cover;border-radius:10px;border:1px solid var(--muted)}  
.composer{display:flex;gap:8px;padding:10px;border-top:1px solid var(--muted);position:sticky;bottom:0;background:rgba(14,26,47,.95);backdrop-filter:blur(8px)}  
  
/* Gallery + Memories */  
.gallery{display:grid;grid-template-columns:repeat(auto-fill,minmax(104px,1fr));gap:8px}  
.gallery img{width:100%;height:104px;object-fit:cover;border-radius:10px;border:1px solid var(--muted)}  
@media(min-width:600px){ .gallery img{height:120px} }  
  
/* Modals / Sheets */  
.modal{position:fixed;inset:0;background:rgba(0,0,0,.5);display:none;align-items:center;justify-content:center;z-index:30}  
.modal.open{display:flex}  
.sheet{width:min(860px,96vw);max-height:92vh;overflow:auto;background:var(--panel);border:1px solid var(--border);border-radius:20px;box-shadow:var(--shadow)}  
.sheet header{display:flex;align-items:center;justify-content:space-between;padding:12px 14px;border-bottom:1px solid var(--muted)}  
.sheet .grid{display:grid;grid-template-columns:1fr 1fr;gap:12px;padding:12px 14px}  
.sheet .row{display:flex;gap:10px;align-items:center}  
.sheet small{color:var(--text-dim)}  
@media(max-width: 640px){ .sheet .grid{grid-template-columns:1fr} }  
  
/* Debug panel */  
.dbg{position:fixed;right:16px;bottom:16px;z-index:40;width:min(520px,96vw);max-height:60vh;overflow:auto;border:1px solid var(--border);background:#0b1324;border-radius:14px;box-shadow:var(--shadow);display:none}  
.dbg header{display:flex;justify-content:space-between;align-items:center;padding:8px 10px;border-bottom:1px solid var(--muted)}  
.dbg pre{margin:0;padding:10px;white-space:pre-wrap}  
  
/* Safe areas */  
@supports(padding:max(0px)){  
  .navbar{padding-bottom: max(0px, env(safe-area-inset-bottom));}  
}  
</style>  
</head>  
<body>  
  <div class="appbar">  
    <div class="container row">  
      <div class="brand"><div class="logo"></div><strong>BadChat</strong></div>  
      <div class="badges">  
        <span class="badge">Phase: <span id="phaseLabel">Kennenlernen</span></span>  
        <span class="badge">Subphase: <span id="subphaseLabel">aufwärmen</span></span>  
        <span class="badge">Trust: <span id="trustLabel">0</span></span>  
      </div>  
    </div>  
  </div>  
  
  <nav class="navbar" id="nav">  
    <button data-view="chat" class="active"><span class="ic">💬</span><div class="lbl">Chat</div></button>  
    <button data-view="media"><span class="ic">🖼️</span><div class="lbl">Medien</div></button>  
    <button data-view="mems"><span class="ic">🗂️</span><div class="lbl">Erinnern.</div></button>  
    <button data-view="more"><span class="ic">☰</span><div class="lbl">Mehr</div></button>  
  </nav>  
  
  <main class="container">  
    <div class="grid">  
      <!-- Chat column -->  
      <section class="card" id="view-chat">  
        <header>  
          <div class="row" style="gap:8px">  
            <button class="btn ghost iconbtn" id="dbgToggle"><span>🧪</span><span>Debug</span></button>  
            <button class="btn ghost iconbtn" id="charEditFab"><span>🧩</span><span>Charakter</span></button>  
          </div>  
          <div class="row" style="gap:8px">  
            <button class="btn ghost iconbtn" id="genSync"><span>🔗</span><span>Sync</span></button>  
            <button class="btn ghost iconbtn" id="importSync"><span>⬇️</span><span>Einfügen</span></button>  
            <button class="btn primary iconbtn" id="openExport"><span>📦</span><span>Export</span></button>  
          </div>  
        </header>  
        <div class="body" style="padding:0">  
          <div id="messages" class="chat"></div>  
          <div class="composer">  
            <input id="chatFile" type="file" accept="image/*" class="btn" style="max-width:200px"/>  
            <input id="text" type="text" placeholder="Nachricht… z. B. #szene natur"/>  
            <button class="btn primary" id="send">Senden</button>  
          </div>  
        </div>  
      </section>  
  
      <!-- Right column -->  
      <aside class="card" id="view-media">  
        <header>  
          <strong>Medien</strong>  
          <div class="row" style="gap:8px"><button class="btn ghost" id="addPhoto">+ Foto</button></div>  
        </header>  
        <div class="body"><div class="gallery" id="gallery"></div></div>  
        <header><strong>Neue Erinnerung</strong></header>  
        <div class="body">  
          <div class="row" style="gap:8px; margin-bottom:8px">  
            <input id="memTitle" type="text" placeholder="Titel"/>  
            <button class="btn" id="makeMemory">Speichern</button>  
          </div>  
          <textarea id="memText" placeholder="Erinnerungstext… (Hashtags #tag möglich)"></textarea>  
        </div>  
      </aside>  
    </div>  
  </main>  
  
  <!-- More panel (sheet) -->  
  <div class="modal" id="moreModal">  
    <div class="sheet">  
      <header>  
        <strong>Mehr</strong>  
        <button class="btn" id="moreClose">Schließen</button>  
      </header>  
      <div class="grid">  
        <div>  
          <h3>Sync</h3>  
          <div class="row" style="gap:8px">  
            <button class="btn" id="genSync2">🔗 Sync-Code</button>  
            <button class="btn" id="importSync2">⬇️ Einfügen</button>  
          </div>  
        </div>  
        <div>  
          <h3>Export / Import</h3>  
          <div class="row" style="gap:8px">  
            <button class="btn" id="btnExportJSON">Export JSON</button>  
            <button class="btn" id="btnExportHTML">Export HTML Galerie</button>  
            <button class="btn" id="btnImport">Import JSON</button>  
          </div>  
        </div>  
        <div>  
          <h3>UI‑Tuning</h3>  
          <div class="row" style="gap:8px;flex-wrap:wrap">  
            <button class="btn" id="openUi">⚙️ Öffnen</button>  
            <small>Stelle Größe/Rundungen/Bottom‑Nav live ein.</small>  
          </div>  
        </div>  
      </div>  
    </div>  
  </div>  
  
  <!-- UI‑Tuning modal -->  
  <div class="modal" id="uiModal">  
    <div class="sheet">  
      <header>  
        <strong>UI‑Tuning</strong>  
        <button class="btn" id="uiClose">Schließen</button>  
      </header>  
      <div class="grid">  
        <div>  
          <label>Basis‑Schriftgröße  
            <input id="uiFont" type="range" min="13" max="19" step="1"/>  
          </label>  
          <small>Aktuell: <span id="uiFontVal"></span> px</small>  
        </div>  
        <div>  
          <label>Touch‑Zielhöhe  
            <input id="uiTouch" type="range" min="44" max="68" step="2"/>  
          </label>  
          <small>Aktuell: <span id="uiTouchVal"></span> px</small>  
        </div>  
        <div>  
          <label>Bottom‑Nav Höhe  
            <input id="uiNav" type="range" min="48" max="76" step="2"/>  
          </label>  
          <small>Aktuell: <span id="uiNavVal"></span> px</small>  
        </div>  
        <div>  
          <label>Chatblasen‑Rundung  
            <input id="uiBubble" type="range" min="8" max="22" step="1"/>  
          </label>  
          <small>Aktuell: <span id="uiBubbleVal"></span> px</small>  
        </div>  
        <div>  
          <label>Navbar‑Labels  
            <select id="uiNavLabels">  
              <option value="on">Icon + Text</option>  
              <option value="off">Nur Icons</option>  
            </select>  
          </label>  
        </div>  
        <div>  
          <button class="btn" id="uiReset">Zurücksetzen</button>  
          <small>Setzt auf Standardwerte zurück.</small>  
        </div>  
      </div>  
    </div>  
  </div>  
  
  <!-- Character editor -->  
  <div class="modal" id="charModal">  
    <div class="sheet">  
      <header>  
        <strong>Charakter‑Einstellungen</strong>  
        <div class="row"><span class="badge">Phase: <span id="phaseMeta">?</span></span><span class="badge">Subphase: <span id="subphaseMeta">?</span></span></div>  
        <button class="btn" id="charClose">Schließen</button>  
      </header>  
      <div class="grid">  
        <div><label>Name<input id="chName" type="text" placeholder="Name"/></label></div>  
        <div><label>Max. Sensibilität  
          <select id="chMaxSens"><option>low</option><option selected>medium</option><option>high</option></select>  
        </label></div>  
        <div class="row" style="grid-column:1/3"><label style="width:100%">Persona  
          <textarea id="chPersona" rows="2" placeholder="Ich‑Perspektive, Charakterton…"></textarea></label></div>  
        <div><label>Interessen (Komma‑getrennt)<input id="chInterests" type="text" placeholder="natur, reisen"/></label></div>  
        <div><label>max Bilder/Nachricht<input type="range" min="1" max="4" step="1" id="trMulti"/></label><small>Aktuell: <span id="trMultiVal">3</span></small></div>  
        <div><label>Relevanz‑Schwelle<input type="range" min="0" max="10" step="1" id="trRel"/></label><small>Aktuell: <span id="trRelVal">5</span></small></div>  
        <div><label>Proaktivität<input type="range" min="0" max="10" step="1" id="trPro"/></label><small>Aktuell: <span id="trProVal">5</span></small></div>  
        <div><label>Verbosity<input type="range" min="1" max="3" step="1" id="trVerb"/></label><small>Aktuell: <span id="trVerbVal">2</span></small></div>  
      </div>  
    </div>  
  </div>  
  
  <!-- Debug overlay -->  
  <div class="dbg" id="dbgPanel">  
    <header><strong>Debug</strong><button class="btn" id="dbgClose">Schließen</button></header>  
    <pre id="dbgPre">(leer)</pre>  
  </div>  
  
<script>  
// ===== Helpers & Store =====  
window.VERSION = "bc-responsive-ui-1.1";  
const store={save(s){try{localStorage.setItem('badchat_state',JSON.stringify(s));}catch{}},load(){try{return JSON.parse(localStorage.getItem('badchat_state')||'null')||null}catch{return null}}};  
const uiStore={save(s){try{localStorage.setItem('badchat_ui',JSON.stringify(s));}catch{}},load(){try{return JSON.parse(localStorage.getItem('badchat_ui')||'null')||null}catch{return null}}};  
const $=(sel,ctx=document)=>ctx.querySelector(sel); const $$=(sel,ctx=document)=>[...ctx.querySelectorAll(sel)];  
function clamp(n,min,max){return Math.max(min,Math.min(max,n))} function pick(a){return a[Math.floor(Math.random()*a.length)]}  
function toast(m){const t=document.createElement('div');t.textContent=m;t.style.cssText='position:fixed;left:50%;transform:translateX(-50%);bottom:calc(var(--nav-h) + 12px);background:#0f2244;border:1px solid var(--muted);padding:10px 12px;border-radius:10px;z-index:50';document.body.appendChild(t);setTimeout(()=>t.remove(),1800)}  
  
// ===== State =====  
let state=store.load()||{character:{name:"Aurora",persona:"Ich bin warmherzig und neugierig.",maxSensitivity:"medium",traits:{multiImageLimit:3,relevanceThreshold:5,proactivity:6,verbosity:2}},interests:["natur"],phase:"Kennenlernen",subphase:"aufwärmen",subphaseScore:20,trust:1,interest:20,photos:[],memories:[]};  
  
// ===== Tag Helpers =====  
function normalizeTag(t){return String(t||'').toLowerCase().trim()} function expandTags(ts){return [...new Set((ts||[]).map(normalizeTag))]}  
function computeSensitivity(tags){const t=expandTags(tags);if(t.includes('selfie')||t.includes('person'))return'medium';if(t.includes('nacht'))return'medium';return'low'}  
function minSensitivity(a,b){const o=['low','medium','high'];return o[Math.min(o.indexOf(a),o.indexOf(b))]||'low'}  
function allowedBySensitivity(s,m){const o=['low','medium','high'];return o.indexOf(s)<=o.indexOf(m)}  
function relevanceScore(item,query){const A=new Set((item||[]).map(normalizeTag)),B=new Set((query||[]).map(normalizeTag));if(!B.size)return 5;let inter=0;B.forEach(t=>inter+=A.has(t)?1:0);return inter?(5+5*Math.min(1,inter/Math.max(1,B.size))):0}  
  
// ===== Phase / Trust =====  
const PHASE_RULES={"Kennenlernen":{thresholds:{trustMin:0,trustMax:3,interestMin:0,interestMax:40,closenessMin:0,closenessMax:35},hysteresis:0.5,maxSensitivity:"low",maxImages:1},"Vertrauen aufbauen":{thresholds:{trustMin:3,trustMax:6,interestMin:30,interestMax:65,closenessMin:30,closenessMax:60},hysteresis:0.7,maxSensitivity:"medium",maxImages:2},"Freundschaft":{thresholds:{trustMin:5.5,trustMax:7.5,interestMin:55,interestMax:80,closenessMin:55,closenessMax:80},hysteresis:0.8,maxSensitivity:"medium",maxImages:3},"Vertraut":{thresholds:{trustMin:7,trustMax:9,interestMin:65,interestMax:90,closenessMin:70,closenessMax:90},hysteresis:1.0,maxSensitivity:"medium",maxImages:3},"Partnerschaft":{thresholds:{trustMin:8.5,trustMax:10,interestMin:75,interestMax:100,closenessMin:80,closenessMax:100},hysteresis:1.2,maxSensitivity:"high",maxImages:4}};  
function getPhaseConfig(n){return PHASE_RULES[n]||PHASE_RULES['Kennenlernen']} function bandGap(v,min,max){if(v<min)return v-min; if(v>max)return v-max; return 0}  
function computeCloseness(){state.subphaseScore=clamp(Math.round((state.trust||0)*8+(state.interest||0)*0.3),0,100)}  
function chooseSubphase(ph){const s=state.subphaseScore||0;const cfg=getPhaseConfig(ph);const mid=(cfg.thresholds.closenessMin+cfg.thresholds.closenessMax)/2;return s<mid?'aufwärmen':'vertraut'}  
function nextPhaseByMetrics(cur){const ORDER=['Kennenlernen','Vertrauen aufbauen','Freundschaft','Vertraut','Partnerschaft'];const t=state.trust||0,i=state.interest||0,c=state.subphaseScore||0;const idx=Math.max(0,ORDER.indexOf(cur));const cfg=getPhaseConfig(cur);const h=cfg.hysteresis||0.5;const hi=(t>=(cfg.thresholds.trustMax+h))&&(i>=(cfg.thresholds.interestMax+h*10))&&(c>=(cfg.thresholds.closenessMax+h*10));const lo=(t<(cfg.thresholds.trustMin-h))||(i<(cfg.thresholds.interestMin-h*10))||(c<(cfg.thresholds.closenessMin-h*10));if(hi&&idx<ORDER.length-1)return ORDER[idx+1]; if(lo&&idx>0)return ORDER[idx-1]; let best=cur,bestGap=Infinity;for(const name of ORDER){const cf=getPhaseConfig(name);const gap=Math.abs(bandGap(t,cf.thresholds.trustMin,cf.thresholds.trustMax))+Math.abs(bandGap(i,cf.thresholds.interestMin,cf.thresholds.interestMax))+Math.abs(bandGap(c,cf.thresholds.closenessMin,cf.thresholds.closenessMax));if(gap<bestGap){best=name;bestGap=gap}} return best}  
function reevaluatePhase(){computeCloseness();const before=state.phase;const after=nextPhaseByMetrics(before);if(after!==before){state.phase=after;state._lastPhaseChange=Date.now();state.phaseReason=${before} → ${after};toast('Phase ➜ '+after);post('ai',🔄 Ich denke, wir sind jetzt in **${after}**. Wenn du magst: „Warum Phase?“)} state.subphase=chooseSubphase(state.phase);$('#phaseLabel').textContent=state.phase;$('#subphaseLabel').textContent=state.subphase;store.save(state)}  
function logTrust(d){state.trust=clamp((state.trust||0)+d,0,10);$('#trustLabel').textContent=String(state.trust);state.interest=clamp((state.interest||0)+Math.round(d*2),0,100);state.subphaseScore=clamp((state.subphaseScore||0)+Math.round(d*2),0,100);store.save(state);reevaluatePhase()}  
  
// ===== Chat =====  
const $msg=$('#messages'); function renderMessage(role,text,images){const li=document.createElement('div');li.className='msg '+role;const b=document.createElement('div');b.className='bubble';b.innerHTML=String(text||'').replace(/\n/g,'<br/>');if(images&&images.length){const wrap=document.createElement('div');wrap.className='imgs';images.forEach(src=>{const im=new Image();im.src=src;wrap.appendChild(im)});b.appendChild(wrap)} li.appendChild(b);$msg.appendChild(li);$msg.scrollTop=$msg.scrollHeight;return li} function post(role,t,imgs){return renderMessage(role,t,imgs)}  
  
// ===== Fotos =====  
function addPhotoObject(name,dataUrl,tags,trust=0,by='user'){const p={name,dataUrl,tags:expandTags(tags),trust,by,sensitivity:computeSensitivity(tags)};state.photos.push(p);renderGallery();store.save(state)}  
function renderGallery(){const g=$('#gallery');g.innerHTML='';state.photos.forEach(p=>{const img=new Image();img.src=p.dataUrl;img.title=${p.name}\n#${(p.tags||[]).join(' #')};g.appendChild(img)})}  
function selectPhotosForChat(query){const ch=state.character,pr=PHASE_RULES[state.phase]||{};const maxSens=minSensitivity(ch.maxSensitivity,pr.maxSensitivity||'high');const maxImgs=Math.max(1,Math.min(ch.traits.multiImageLimit||3,pr.maxImages||3));const relThresh=(ch.traits.relevanceThreshold||5)/2;const rows=(state.photos||[]).map(p=>{const sens=p.sensitivity||computeSensitivity(p.tags);const score=relevanceScore(p.tags,query);const allowed=allowedBySensitivity(sens,maxSens)&&score>=relThresh&&(state.trust||0)>=(p.trust||0);return {name:p.name,score,allowed}});return rows.filter(r=>r.allowed).sort((a,b)=>b.score-a.score).slice(0,maxImgs).map(r=>state.photos.find(p=>p.name===r.name))}  
  
// ===== Memories =====  
function addMemory(obj){const m={id:'m'+Math.random().toString(36).slice(2),title:obj.title||'Notiz',text:obj.text||'',tags:expandTags(obj.tags||[]),trust:obj.trust||0,importance:obj.importance||1,_ts:Date.now()};(m.text.split(/\s+/).filter(t=>t.startsWith('#')).map(t=>normalizeTag(t.slice(1)))).forEach(t=>m.tags.push(t));m.tags=[...new Set(m.tags)];state.memories.push(m);store.save(state);toast('Erinnerung gespeichert');return m}  
  
// ===== Quick‑Sync & Export =====  
(function(){const b64=s=>btoa(unescape(encodeURIComponent(s)));const unb64=s=>decodeURIComponent(escape(atob(s)));function makeSync(){return b64(JSON.stringify(state))} function importSync(code){const data=JSON.parse(unb64(String(code||'').trim()));Object.assign(state,data);store.save(state);renderGallery();$('#phaseLabel').textContent=state.phase;$('#trustLabel').textContent=String(state.trust);post('ai','Sync importiert.')} $('#genSync')?.addEventListener('click',()=>{const c=makeSync();navigator.clipboard?.writeText(c);toast('Sync‑Code kopiert')}); $('#importSync')?.addEventListener('click',()=>{const c=prompt('Sync‑Code einfügen:');if(c)importSync(c)}); $('#genSync2')?.addEventListener('click',()=>{const c=makeSync();navigator.clipboard?.writeText(c);toast('Sync‑Code kopiert')}); $('#importSync2')?.addEventListener('click',()=>{const c=prompt('Sync‑Code einfügen:');if(c)importSync(c)}); $('#openExport')?.addEventListener('click',()=>$('#moreModal').classList.add('open')); $('#moreClose')?.addEventListener('click',()=>$('#moreModal').classList.remove('open')); function dl(name,blob){const a=document.createElement('a');a.href=URL.createObjectURL(blob);a.download=name;document.body.appendChild(a);a.click();setTimeout(()=>{URL.revokeObjectURL(a.href);a.remove()},1000)} $('#btnExportJSON')?.addEventListener('click',()=>{const payload={version:window.VERSION,exportedAt:new Date().toISOString(),state};dl('badchat_export.json',new Blob([JSON.stringify(payload,null,2)],{type:'application/json'}))}); $('#btnExportHTML')?.addEventListener('click',()=>{const html=['<!doctype html><meta charset="utf-8"><title>BadChat Export</title><style>body{background:#0b1324;color:#e7ecf4;font:14px system-ui}img{max-width:180px;border:1px solid #2a3550;border-radius:8px}</style><h1>BadChat Export</h1>'];html.push('<h2>Fotos</h2>');html.push((state.photos||[]).map(p=><figure><img src="${p.dataUrl}"><figcaption>${p.name} — #${(p.tags||[]).join(' #')}</figcaption></figure>).join(''));html.push('<h2>Erinnerungen</h2>');html.push((state.memories||[]).map(m=><div><strong>${m.title}</strong><br><small>${new Date(m._ts||Date.now()).toLocaleString()}</small><p>${m.text}</p><small>#${(m.tags||[]).join(' #')}</small></div>).join(''));dl('badchat_gallery.html',new Blob([html.join('')],{type:'text/html'}))}); $('#btnImport')?.addEventListener('click',async()=>{const inp=document.createElement('input');inp.type='file';inp.accept='.json,application/json';inp.onchange=async()=>{const text=await inp.files[0].text();const data=JSON.parse(text);const mode=prompt('Import‑Modus: "merge" oder "overwrite"?','merge');if(!mode)return; if(mode==='overwrite'){state=data.state||state}else{const pIndex=new Map((state.photos||[]).map(p=>[p.name,p]));(data.state?.photos||[]).forEach(p=>{if(!pIndex.has(p.name))state.photos.push(p)});const mIndex=new Map((state.memories||[]).map(m=>[m.id,m]));(data.state?.memories||[]).forEach(m=>{if(!mIndex.has(m.id))state.memories.push(m)})} store.save(state);renderGallery();post('ai','Import abgeschlossen.')};inp.click()})})();  
  
// ===== Character Editor =====  
(function(){const modal=$('#charModal');$('#charEditFab')?.addEventListener('click',()=>{fill();modal.classList.add('open')});$('#charClose')?.addEventListener('click',()=>modal.classList.remove('open'));function bindRange(id,val){const el=$('#'+id),out=$('#'+id+'Val');el.value=val;if(out)out.textContent=val} function fill(){const c=state.character||{};const t=c.traits||{};$('#phaseMeta').textContent=state.phase;$('#subphaseMeta').textContent=state.subphase;$('#chName').value=c.name||'';$('#chPersona').value=c.persona||'';$('#chMaxSens').value=c.maxSensitivity||'medium';$('#chInterests').value=(state.interests||[]).join(', ');bindRange('trMulti',t.multiImageLimit??3);bindRange('trRel',t.relevanceThreshold??5);bindRange('trPro',t.proactivity??5);bindRange('trVerb',t.verbosity??2)} ['trMulti','trRel','trPro','trVerb'].forEach(id=>$('#'+id)?.addEventListener('input',e=>{$('#'+id+'Val')?.textContent=e.target.value})); $('#charModal')?.addEventListener('change',()=>{const c=state.character;const t=c.traits;c.name=$('#chName').value||c.name;c.persona=$('#chPersona').value||'';c.maxSensitivity=$('#chMaxSens').value||'medium';const interests=($('#chInterests').value||'').split(',').map(s=>normalizeTag(s.trim())).filter(Boolean);if(interests.length)state.interests=[...new Set(interests)];t.multiImageLimit=parseInt($('#trMulti').value,10);t.relevanceThreshold=parseInt($('#trRel').value,10);t.proactivity=parseInt($('#trPro').value,10);t.verbosity=parseInt($('#trVerb').value,10);store.save(state)})})();  
  
// ===== Debug =====  
(function(){const btn=$('#dbgToggle');const panel=$('#dbgPanel');const pre=$('#dbgPre');function snapshot(){return{version:window.VERSION,phase:state.phase,subphase:state.subphase,trust:state.trust,interest:state.interest,photos:(state.photos||[]).length,memories:(state.memories||[]).length,lastPhase:state._lastPhaseChange||null}} function refresh(){pre.textContent=JSON.stringify(snapshot(),null,2)} btn?.addEventListener('click',()=>{panel.style.display=panel.style.display==='block'?'none':'block';refresh()});$('#dbgClose')?.addEventListener('click',()=>panel.style.display='none');new MutationObserver(()=>{if(panel.style.display==='block')refresh()}).observe($('#messages'),{childList:true})})();  
  
// ===== Composer =====  
let _lastUserMsgTs=Date.now(); $('#send')?.addEventListener('click',()=>{const txt=$('#text').value.trim();if(!txt)return;renderMessage('me',txt);_lastUserMsgTs=Date.now();if(txt.toLowerCase()==='warum phase?'){post('ai',state.phaseReason||'Phasenwechsel basierend auf Trust/Interesse/Nähe.');$('#text').value='';return} if(txt.startsWith('#szene')||txt.includes('szene zu')||/erzähl(e)? eine szene/i.test(txt)){/* handled below */} else {const imgs=selectPhotosForChat(expandTags(txt.split(/\s+/).filter(x=>x.startsWith('#')).map(t=>t.slice(1))));post('ai','Erzähle mir mehr 🙂',(imgs||[]).map(p=>p.dataUrl));logTrust(+0.1)} $('#text').value=''});  
  
// ===== Upload & Gallery =====  
$('#chatFile')?.addEventListener('change',async e=>{const f=e.target.files?.[0];if(!f)return;const url=URL.createObjectURL(f);const name=f.name.replace(/\s+/g,'_');const nm=name.toLowerCase();const tags=[];if(/wald|park|tree|baum|gras|wiese|wander|hike/.test(nm))tags.push('natur');if(/see|meer|lake|ocean|strand|beach|fluss/.test(nm))tags.push('wasser');if(/sky|himmel|wolke/.test(nm))tags.push('himmel');if(/city|stadt|urban|street|skyline|building|architektur/.test(nm))tags.push('stadt');if(/food|essen|pizza|pasta|burger|kuchen|lunch|dinner|frühstück/.test(nm))tags.push('essen');const dataUrl=await new Promise(res=>{const img=new Image();img.onload=()=>{const max=720;const r=Math.min(1,max/Math.max(img.width,img.height));const c=document.createElement('canvas');c.width=Math.round(img.width*r);c.height=Math.round(img.height*r);c.getContext('2d').drawImage(img,0,0,c.width,c.height);res(c.toDataURL('image/jpeg',0.9))};img.src=url});addPhotoObject(name,dataUrl,tags,0,'user');post('ai',Danke für **${name}**! ${tags.length?'Erkannte Tags: #'+tags.join(' #'):'Ich kann Tags vorschlagen, wenn du magst.'})}); $('#addPhoto')?.addEventListener('click',()=>$('#chatFile').click());  
  
// ===== Memories =====  
$('#makeMemory')?.addEventListener('click',()=>{const title=($('#memTitle').value||'Notiz').trim();const text=($('#memText').value||'').trim();if(!text&&!title){toast('Bitte Titel oder Text eingeben.');return} addMemory({title,text,tags:[]});$('#memTitle').value='';$('#memText').value=''});  
  
// ===== Scene Generator =====  
(function(){function norm(s){return String(s||'').toLowerCase().trim()} function parseSceneQuery(text){const t=norm(text);if(t.includes('#szene')){const tail=t.split('#szene')[1]||'';const words=tail.split(/[^\p{L}0-9]+/u).map(norm).filter(Boolean);return words[0]||null} if(t.includes('szene zu')){return t.split('szene zu').pop().trim().split(/\s+/)[0]||null} if(t.includes('erzähle eine szene')||t.includes('erzähl eine szene')||t.includes('erzähl mir eine szene')){return null} return undefined} function anyMemory(){return (state.memories||[])} function memoriesByTag(tag){const t=norm(tag);return (state.memories||[]).filter(m=>(m.tags||[]).map(norm).includes(t))} function sceneFromMemory(mem){const mood=state.mood?.val||0;const T=[{chk:v=>v<-0.6,lead:['Es fühlte sich schwer an,'],sense:['die Luft war kühl'],close:['aber ich blieb dran.']},{chk:v=>v<-0.2,lead:['Ich war nachdenklich,'],sense:['das Licht lag flach'],close:['und ich hörte genauer hin.']},{chk:v=>v<0.2,lead:['Ganz bei mir,'],sense:['die Details traten klar hervor'],close:['ohne Eile.']},{chk:v=>v<0.6,lead:['Mit einem kleinen Lächeln,'],sense:['die Luft roch frisch'],close:['und ich genoss es.']},{chk:()=>true,lead:['Voller Wärme,'],sense:['die Farben wirkten intensiver'],close:['und ich wollte den Moment festhalten.']}];const tone=T.find(x=>x.chk(mood))||T[2];const lead=pick(tone.lead),sense=pick(tone.sense),close=pick(tone.close);const body=(mem.text||'').replace(/\s+/g,' ').slice(0,220);const tagLine=(mem.tags&&mem.tags.length)?('#'+mem.tags.slice(0,3).join(' #')):'';return Eine kleine Szene aus meiner Sicht:\n\n${lead} ${sense}, ${close} ${body? body : (mem.title? 'Es ging um **'+mem.title+'**.' : '')} ${tagLine}} function composeAndPostScene(tag){let mem=null;if(tag){const list=memoriesByTag(tag);mem=list.length?pick(list):null} if(!mem){const pool=anyMemory();mem=pool.length?pick(pool):null} if(!mem){post('ai','Ich habe noch keine passende Erinnerung gespeichert – magst du mir kurz etwas dazu erzählen?');return} const txt=sceneFromMemory(mem);let images=[];try{const imgs=selectPhotosForChat(mem.tags||[]);images=(imgs||[]).slice(0,Math.min(2,state.character?.traits?.multiImageLimit||2)).map(p=>p.dataUrl).filter(Boolean)}catch{} post('ai',txt,images.length?images:undefined)} new MutationObserver(()=>{const msgs=[...$('#messages').querySelectorAll('.msg.me')];if(!msgs.length)return;const txt=msgs.at(-1).innerText||'';const q=parseSceneQuery(txt);if(q!==undefined)composeAndPostScene(q)}).observe($('#messages'),{childList:true})})();  
  
// ===== Proaktive Pings =====  
function canPropose(){const pro=state.character?.traits?.proactivity??5;if(pro<=2)return false;const idle=45000*(8/(pro+3));if(Date.now()-(_lastUserMsgTs||0)<idle)return false;state._proposals=(state._proposals||[]).filter(x=>x>Date.now()-3600e3);return state._proposals.length<4}  
function propose(){const t=["Ich bin noch da 🙂 Wollen wir eine kleine Szene probieren? Schreib z. B. #szene natur","Soll ich dir etwas aus meinen Erinnerungen erzählen?","Magst du mir ein neues Foto schicken? Ich kann Tags vorschlagen."];post('ai',pick(t));(state._proposals||=[]).push(Date.now());logTrust(+0.1)} setInterval(()=>{if(canPropose())propose()},15000);  
  
// ===== Bottom‑Nav Routing =====  
function setView(v){$('#nav .active')?.classList.remove('active');$(#nav button[data-view="${v}"])?.classList.add('active');if(v==='more'){ $('#moreModal').classList.add('open'); return } if(v==='chat'){ $('#messages').scrollTop=$('#messages').scrollHeight }} $$('#nav button').forEach(b=>b.addEventListener('click',()=>setView(b.dataset.view)));  
  
// ===== UI‑Tuning (dynamic) =====  
(function(){const ui=uiStore.load()||{};function apply(u){const r=document.documentElement.style;if(u.font)r.setProperty('--font',u.font+'px');if(u.touch)r.setProperty('--touch',u.touch+'px');if(u.nav)r.setProperty('--nav-h',u.nav+'px');if(u.bubble)r.setProperty('--bubble-r',u.bubble+'px');const nav=$('#nav');if(nav){if(u.navLabels==='off')nav.classList.add('compact');else nav.classList.remove('compact')} uiStore.save(u)} // initialize  
  const cur={font:parseInt(getComputedStyle(document.documentElement).getPropertyValue('--font'))||15,touch:parseInt(getComputedStyle(document.documentElement).getPropertyValue('--touch'))||52,nav:parseInt(getComputedStyle(document.documentElement).getPropertyValue('--nav-h'))||56,bubble:parseInt(getComputedStyle(document.documentElement).getPropertyValue('--bubble-r'))||14,navLabels:($('#nav').classList.contains('compact')?'off':'on')}; Object.assign(cur, ui);  
  apply(cur);  
  // bind UI modal  
  $('#openUi')?.addEventListener('click',()=>{ $('#uiModal').classList.add('open'); fill() });  
  $('#uiClose')?.addEventListener('click',()=> $('#uiModal').classList.remove('open'));  
  $('#uiReset')?.addEventListener('click',()=>{const d={font:15,touch:52,nav:56,bubble:14,navLabels:'on'};apply(d);fill();toast('UI zurückgesetzt')});  
  function fill(){ $('#uiFont').value=cur.font; $('#uiFontVal').textContent=cur.font; $('#uiTouch').value=cur.touch; $('#uiTouchVal').textContent=cur.touch; $('#uiNav').value=cur.nav; $('#uiNavVal').textContent=cur.nav; $('#uiBubble').value=cur.bubble; $('#uiBubbleVal').textContent=cur.bubble; $('#uiNavLabels').value=cur.navLabels }  
  ['uiFont','uiTouch','uiNav','uiBubble'].forEach(id=> $('#'+id)?.addEventListener('input',e=>{ const map={uiFont:'font',uiTouch:'touch',uiNav:'nav',uiBubble:'bubble'}; cur[map[id]]=parseInt(e.target.value,10); apply(cur); fill() }));  
  $('#uiNavLabels')?.addEventListener('change',e=>{ cur.navLabels=e.target.value; apply(cur) });  
})();  
  
// ===== Init =====  
renderGallery(); reevaluatePhase(); post('ai','Hallo! Ich bin bereit. Schicke mir gern Text oder ein Foto. (Tipp: #szene natur)');  
</script>  
</body>  
</html>  
<!-- SHA256: fd5f2857c3057b3d | lines: 510 | source: /mnt/data/badchat_full.html --><!doctype html>  
  
<html lang="de">  
<head>  
<meta charset="utf-8"/>  
<meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover"/>  
<title>BadChat – Ultimate</title>  
<style>  
/* HINWEIS: Diese Version ist die vollständige konsolidierte Single-File-Variante  
   aus der letzten "badchat_full.html". Sie enthält: Chat, Foto-Upload, Galerie,  
   Erinnerungen, Charakter-Editor, Phasen/Trust/Interesse/Closeness,  
   Quick-Sync, Export/Import, Debug-Overlay, Proaktivität, Szene-Generator. */  
:root{  
  --bg:#0b1324; --panel:#0e1a2f; --muted:#2a3550; --text:#e7ecf4; --accent:#82b1ff;  
}  
*{box-sizing:border-box}  
body{margin:0;background:#0b1324;color:var(--text);font:15px/1.45 system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial}  
.container{max-width:1100px;margin:0 auto;padding:0 12px}  
.appbar{position:sticky;top:0;z-index:10;background:#0d1830;border-bottom:1px solid var(--muted)}  
.appbar .row{display:flex;align-items:center;justify-content:space-between;padding:10px 8px}  
.badge{border:1px solid var(--muted);border-radius:999px;padding:3px 8px}  
.card{border:1px solid var(--muted);border-radius:14px;background:#0f1a2d;box-shadow:0 8px 20px rgba(0,0,0,.35)}  
.card header{display:flex;justify-content:space-between;align-items:center;padding:10px;border-bottom:1px solid var(--muted)}  
.card .body{padding:12px}  
.btn{border:1px solid var(--muted);background:#122447;color:var(--text);padding:10px 12px;border-radius:10px;cursor:pointer}  
.btn.primary{background:#4e79db;border-color:transparent}  
.chat{display:flex;flex-direction:column;min-height:60vh;max-height:70vh;overflow:auto}  
.msg{display:flex;gap:8px;align-items:flex-start;margin:8px 12px}  
.msg .bubble{max-width:86%;padding:10px 12px;border:1px solid var(--muted);border-radius:12px;background:#102242}  
.msg.me{justify-content:flex-end}  
.msg.me .bubble{background:#142a50}  
.msg .imgs{display:flex;flex-wrap:wrap;gap:8px;margin-top:6px}  
.msg .imgs img{width:132px;height:96px;object-fit:cover;border-radius:10px;border:1px solid var(--muted)}  
.composer{display:flex;gap:8px;padding:10px;border-top:1px solid var(--muted)}  
.gallery{display:grid;grid-template-columns:repeat(auto-fill,minmax(110px,1fr));gap:8px}  
.gallery img{width:100%;height:100px;object-fit:cover;border-radius:10px;border:1px solid var(--muted)}  
.modal{position:fixed;inset:0;background:rgba(0,0,0,.55);display:none;align-items:center;justify-content:center;z-index:1000}  
.modal.open{display:flex}  
.sheet{width:min(820px,96vw);max-height:90vh;overflow:auto;background:#0b1324;border:1px solid var(--muted);border-radius:16px}  
.sheet header{display:flex;justify-content:space-between;align-items:center;padding:10px;border-bottom:1px solid var(--muted)}  
.sheet .grid{display:grid;grid-template-columns:1fr 1fr;gap:12px;padding:12px}  
@media(max-width:640px){.sheet .grid{grid-template-columns:1fr}}  
.dbg{position:fixed;right:16px;bottom:16px;z-index:1200;width:min(520px,96vw);max-height:60vh;overflow:auto;border:1px solid var(--muted);background:#0b1324;border-radius:14px;box-shadow:0 10px 30px rgba(0,0,0,.35);display:none}  
.dbg header{display:flex;justify-content:space-between;align-items:center;padding:8px 10px;border-bottom:1px solid var(--muted)}  
.dbg pre{margin:0;padding:10px;white-space:pre-wrap}  
</style>  
</head>  
<body>  
  <div class="appbar">  
    <div class="container row">  
      <div style="display:flex;align-items:center;gap:10px"><strong>BadChat</strong></div>  
      <div style="display:flex;gap:8px;flex-wrap:wrap">  
        <span class="badge">Phase: <span id="phaseLabel">Kennenlernen</span></span>  
        <span class="badge">Subphase: <span id="subphaseLabel">aufwärmen</span></span>  
        <span class="badge">Trust: <span id="trustLabel">0</span></span>  
      </div>  
    </div>  
  </div>  <main class="container" style="padding:12px 0 24px 0">  
    <section class="card">  
      <header>  
        <div style="display:flex;gap:8px;align-items:center">  
          <button class="btn" id="dbgToggle">🧪 Debug</button>  
          <button class="btn" id="charEditFab">🧩 Charakter</button>  
        </div>  
        <div style="display:flex;gap:8px;align-items:center">  
          <button class="btn" id="genSync">🔗 Sync</button>  
          <button class="btn" id="importSync">⬇️ Einfügen</button>  
          <button class="btn primary" id="openExport">📦 Export</button>  
        </div>  
      </header>  
      <div class="body" style="padding:0">  
        <div id="messages" class="chat"></div>  
        <div class="composer">  
          <input id="chatFile" type="file" accept="image/*" class="btn" style="max-width:200px"/>  
          <input id="text" type="text" placeholder="Nachricht… z. B. #szene natur" style="flex:1;min-height:48px;border:1px solid var(--muted);background:#0c1830;color:var(--text);border-radius:10px;padding:10px"/>  
          <button class="btn primary" id="send">Senden</button>  
        </div>  
      </div>  
    </section><div style="display:grid;grid-template-columns:1fr 1fr;gap:12px;margin-top:12px">  
  <section class="card">  
    <header><strong>Medien</strong><button class="btn" id="addPhoto">+ Foto</button></header>  
    <div class="body"><div class="gallery" id="gallery"></div></div>  
  </section>  
  <section class="card">  
    <header><strong>Neue Erinnerung</strong></header>  
    <div class="body">  
      <div style="display:flex;gap:8px;margin-bottom:8px"><input id="memTitle" type="text" placeholder="Titel" style="flex:1;min-height:48px;border:1px solid var(--muted);background:#0c1830;color:var(--text);border-radius:10px;padding:10px"/><button class="btn" id="makeMemory">Speichern</button></div>  
      <textarea id="memText" placeholder="Erinnerungstext… (Hashtags #tag möglich)" style="width:100%;min-height:110px;border:1px solid var(--muted);background:#0c1830;color:var(--text);border-radius:10px;padding:10px"></textarea>  
    </div>  
  </section>  
</div>  
  
  </main>  <!-- Export/Import Modal -->  <div class="modal" id="moreModal">  
    <div class="sheet">  
      <header><strong>Export / Import</strong><button class="btn" id="moreClose">Schließen</button></header>  
      <div class="grid">  
        <div>  
          <h3>Sync</h3>  
          <div style="display:flex;gap:8px"><button class="btn" id="genSync2">🔗 Sync-Code</button><button class="btn" id="importSync2">⬇️ Einfügen</button></div>  
        </div>  
        <div>  
          <h3>Export</h3>  
          <div style="display:flex;gap:8px;flex-wrap:wrap"><button class="btn" id="btnExportJSON">Export JSON</button><button class="btn" id="btnExportHTML">Export HTML Galerie</button><button class="btn" id="btnImport">Import JSON</button></div>  
        </div>  
      </div>  
    </div>  
  </div>  <!-- Character editor -->  <div class="modal" id="charModal">  
    <div class="sheet">  
      <header><strong>Charakter-Einstellungen</strong><div style="display:flex;gap:8px"><span class="badge">Phase: <span id="phaseMeta">?</span></span><span class="badge">Subphase: <span id="subphaseMeta">?</span></span></div><button class="btn" id="charClose">Schließen</button></header>  
      <div class="grid">  
        <div><label>Name<input id="chName" type="text" placeholder="Name" style="width:100%;padding:10px;border:1px solid var(--muted);background:#0c1830;color:var(--text);border-radius:10px"/></label></div>  
        <div><label>Max. Sensibilität<select id="chMaxSens" style="width:100%;padding:10px;border:1px solid var(--muted);background:#0c1830;color:var(--text);border-radius:10px"><option>low</option><option selected>medium</option><option>high</option></select></label></div>  
        <div style="grid-column:1/3"><label>Persona<textarea id="chPersona" rows="2" style="width:100%;padding:10px;border:1px solid var(--muted);background:#0c1830;color:var(--text);border-radius:10px" placeholder="Ich-Perspektive, Charakterton…"></textarea></label></div>  
        <div><label>Interessen<input id="chInterests" type="text" placeholder="natur, reisen" style="width:100%;padding:10px;border:1px solid var(--muted);background:#0c1830;color:var(--text);border-radius:10px"/></label></div>  
        <div><label>max Bilder/Nachricht<input type="range" min="1" max="4" step="1" id="trMulti"/></label><small>Aktuell: <span id="trMultiVal">3</span></small></div>  
        <div><label>Relevanz-Schwelle<input type="range" min="0" max="10" step="1" id="trRel"/></label><small>Aktuell: <span id="trRelVal">5</span></small></div>  
        <div><label>Proaktivität<input type="range" min="0" max="10" step="1" id="trPro"/></label><small>Aktuell: <span id="trProVal">5</span></small></div>  
        <div><label>Verbosity<input type="range" min="1" max="3" step="1" id="trVerb"/></label><small>Aktuell: <span id="trVerbVal">2</span></small></div>  
      </div>  
    </div>  
  </div>  <!-- Debug overlay -->  <div class="dbg" id="dbgPanel"><header><strong>Debug</strong><button class="btn" id="dbgClose">Schließen</button></header><pre id="dbgPre">(leer)</pre></div><script>  
// ====== Core State & Utils ======  
window.VERSION = "bc-ultimate-1.0";  
const store={save(s){try{localStorage.setItem('badchat_state',JSON.stringify(s))}catch{}},load(){try{return JSON.parse(localStorage.getItem('badchat_state')||'null')||null}catch{return null}}};  
const $=(s,c=document)=>c.querySelector(s); const $$=(s,c=document)=>[...c.querySelectorAll(s)];  
function clamp(n,min,max){return Math.max(min,Math.min(max,n))}  
function pick(a){return a[Math.floor(Math.random()*a.length)]}  
function normalizeTag(t){return String(t||'').toLowerCase().trim()}  
function toast(msg){const t=document.createElement('div');t.textContent=msg;t.style.cssText='position:fixed;left:50%;transform:translateX(-50%);bottom:72px;background:#0f2244;border:1px solid var(--muted);padding:10px 12px;border-radius:10px;z-index:1500';document.body.appendChild(t);setTimeout(()=>t.remove(),1800)}  
  
let state=store.load()||{character:{name:"Aurora",persona:"Ich bin warmherzig und neugierig.",maxSensitivity:"medium",traits:{multiImageLimit:3,relevanceThreshold:5,proactivity:6,verbosity:2}},interests:["natur"],phase:"Kennenlernen",subphase:"aufwärmen",subphaseScore:20,trust:1,interest:20,photos:[],memories:[]};  
  
// ====== Tag Helpers ======  
function expandTags(ts){return [...new Set((ts||[]).map(normalizeTag))]}  
function computeSensitivity(tags){const t=expandTags(tags);if(t.includes('selfie')||t.includes('person'))return'medium';if(t.includes('nacht'))return'medium';return'low'}  
function minSensitivity(a,b){const o=['low','medium','high'];return o[Math.min(o.indexOf(a),o.indexOf(b))]||'low'}  
function allowedBySensitivity(s,m){const o=['low','medium','high'];return o.indexOf(s)<=o.indexOf(m)}  
function relevanceScore(item,query){const A=new Set((item||[]).map(normalizeTag)),B=new Set((query||[]).map(normalizeTag));if(!B.size)return 5;let inter=0;B.forEach(t=>inter+=A.has(t)?1:0);return inter?(5+5*Math.min(1,inter/Math.max(1,B.size))):0}  
  
// ====== Phase/Trust ======  
const PHASE_RULES={"Kennenlernen":{thresholds:{trustMin:0,trustMax:3,interestMin:0,interestMax:40,closenessMin:0,closenessMax:35},hysteresis:0.5,maxSensitivity:"low",maxImages:1},"Vertrauen aufbauen":{thresholds:{trustMin:3,trustMax:6,interestMin:30,interestMax:65,closenessMin:30,closenessMax:60},hysteresis:0.7,maxSensitivity:"medium",maxImages:2},"Freundschaft":{thresholds:{trustMin:5.5,trustMax:7.5,interestMin:55,interestMax:80,closenessMin:55,closenessMax:80},hysteresis:0.8,maxSensitivity:"medium",maxImages:3},"Vertraut":{thresholds:{trustMin:7,trustMax:9,interestMin:65,interestMax:90,closenessMin:70,closenessMax:90},hysteresis:1.0,maxSensitivity:"medium",maxImages:3},"Partnerschaft":{thresholds:{trustMin:8.5,trustMax:10,interestMin:75,interestMax:100,closenessMin:80,closenessMax:100},hysteresis:1.2,maxSensitivity:"high",maxImages:4}};  
function getPhaseConfig(n){return PHASE_RULES[n]||PHASE_RULES['Kennenlernen']}  
function bandGap(v,min,max){if(v<min)return v-min; if(v>max)return v-max; return 0}  
function computeCloseness(){state.subphaseScore=clamp(Math.round((state.trust||0)*8+(state.interest||0)*0.3),0,100)}  
function chooseSubphase(ph){const s=state.subphaseScore||0;const cfg=getPhaseConfig(ph);const mid=(cfg.thresholds.closenessMin+cfg.thresholds.closenessMax)/2;return s<mid?'aufwärmen':'vertraut'}  
function nextPhaseByMetrics(cur){const ORDER=['Kennenlernen','Vertrauen aufbauen','Freundschaft','Vertraut','Partnerschaft'];const t=state.trust||0,i=state.interest||0,c=state.subphaseScore||0;const idx=Math.max(0,ORDER.indexOf(cur));const cfg=getPhaseConfig(cur);const h=cfg.hysteresis||0.5;const hi=(t>=(cfg.thresholds.trustMax+h))&&(i>=(cfg.thresholds.interestMax+h*10))&&(c>=(cfg.thresholds.closenessMax+h*10));const lo=(t<(cfg.thresholds.trustMin-h))||(i<(cfg.thresholds.interestMin-h*10))||(c<(cfg.thresholds.closenessMin-h*10));if(hi&&idx<ORDER.length-1)return ORDER[idx+1]; if(lo&&idx>0)return ORDER[idx-1]; let best=cur,bestGap=Infinity;for(const name of ORDER){const cf=getPhaseConfig(name);const gap=Math.abs(bandGap(t,cf.thresholds.trustMin,cf.thresholds.trustMax))+Math.abs(bandGap(i,cf.thresholds.interestMin,cf.thresholds.interestMax))+Math.abs(bandGap(c,cf.thresholds.closenessMin,cf.thresholds.closenessMax));if(gap<bestGap){best=name;bestGap=gap}} return best}  
function reevaluatePhase(){computeCloseness();const before=state.phase;const after=nextPhaseByMetrics(before);if(after!==before){state.phase=after;state._lastPhaseChange=Date.now();state.phaseReason=${before} → ${after};toast('Phase ➜ '+after);post('ai',🔄 Ich denke, wir sind jetzt in **${after}**. Wenn du magst: „Warum Phase?“)} state.subphase=chooseSubphase(state.phase);$('#phaseLabel').textContent=state.phase;$('#subphaseLabel').textContent=state.subphase;store.save(state)}  
function logTrust(d){state.trust=clamp((state.trust||0)+d,0,10);$('#trustLabel').textContent=String(state.trust);state.interest=clamp((state.interest||0)+Math.round(d*2),0,100);state.subphaseScore=clamp((state.subphaseScore||0)+Math.round(d*2),0,100);store.save(state);reevaluatePhase()}  
  
// ====== Chat ======  
const $msg=$('#messages');  
function renderMessage(role,text,images){const li=document.createElement('div');li.className='msg '+role;const b=document.createElement('div');b.className='bubble';b.innerHTML=String(text||'').replace(/\n/g,'<br/>');if(images&&images.length){const wrap=document.createElement('div');wrap.className='imgs';images.forEach(src=>{const im=new Image();im.src=src;wrap.appendChild(im)});b.appendChild(wrap)} li.appendChild(b);$msg.appendChild(li);$msg.scrollTop=$msg.scrollHeight;return li}  
function post(role,t,imgs){return renderMessage(role,t,imgs)}  
  
// ====== Fotos ======  
function addPhotoObject(name,dataUrl,tags,trust=0,by='user'){const p={name,dataUrl,tags:expandTags(tags),trust,by,sensitivity:computeSensitivity(tags)};state.photos.push(p);renderGallery();store.save(state)}  
function renderGallery(){const g=$('#gallery');g.innerHTML='';state.photos.forEach(p=>{const img=new Image();img.src=p.dataUrl;img.title=${p.name}\n#${(p.tags||[]).join(' #')};g.appendChild(img)})}  
function selectPhotosForChat(query){const ch=state.character,pr=PHASE_RULES[state.phase]||{};const maxSens=minSensitivity(ch.maxSensitivity,pr.maxSensitivity||'high');const maxImgs=Math.max(1,Math.min(ch.traits.multiImageLimit||3,pr.maxImages||3));const relThresh=(ch.traits.relevanceThreshold||5)/2;const rows=(state.photos||[]).map(p=>{const sens=p.sensitivity||computeSensitivity(p.tags);const score=relevanceScore(p.tags,query);const allowed=allowedBySensitivity(sens,maxSens)&&score>=relThresh&&(state.trust||0)>=(p.trust||0);return {name:p.name,score,allowed}});return rows.filter(r=>r.allowed).sort((a,b)=>b.score-a.score).slice(0,maxImgs).map(r=>state.photos.find(p=>p.name===r.name))}  
  
// ====== Memories ======  
function addMemory(obj){const m={id:'m'+Math.random().toString(36).slice(2),title:obj.title||'Notiz',text:obj.text||'',tags:expandTags(obj.tags||[]),trust:obj.trust||0,importance:obj.importance||1,_ts:Date.now()};(m.text.split(/\s+/).filter(t=>t.startsWith('#')).map(t=>normalizeTag(t.slice(1)))).forEach(t=>m.tags.push(t));m.tags=[...new Set(m.tags)];state.memories.push(m);store.save(state);toast('Erinnerung gespeichert');return m}  
  
// ====== Quick-Sync & Export ======  
(function(){const b64=s=>btoa(unescape(encodeURIComponent(s)));const unb64=s=>decodeURIComponent(escape(atob(s)));function makeSync(){return b64(JSON.stringify(state))} function importSync(code){const data=JSON.parse(unb64(String(code||'').trim()));Object.assign(state,data);store.save(state);renderGallery();$('#phaseLabel').textContent=state.phase;$('#trustLabel').textContent=String(state.trust);post('ai','Sync importiert.')} $('#genSync')?.addEventListener('click',()=>{const c=makeSync();navigator.clipboard?.writeText(c);toast('Sync-Code kopiert')}); $('#importSync')?.addEventListener('click',()=>{const c=prompt('Sync-Code einfügen:');if(c)importSync(c)}); $('#openExport')?.addEventListener('click',()=>$('#moreModal').classList.add('open')); $('#moreClose')?.addEventListener('click',()=>$('#moreModal').classList.remove('open')); $('#genSync2')?.addEventListener('click',()=>{const c=makeSync();navigator.clipboard?.writeText(c);toast('Sync-Code kopiert')}); $('#importSync2')?.addEventListener('click',()=>{const c=prompt('Sync-Code einfügen:');if(c)importSync(c)}); function dl(name,blob){const a=document.createElement('a');a.href=URL.createObjectURL(blob);a.download=name;document.body.appendChild(a);a.click();setTimeout(()=>{URL.revokeObjectURL(a.href);a.remove()},1000)} $('#btnExportJSON')?.addEventListener('click',()=>{const payload={version:window.VERSION,exportedAt:new Date().toISOString(),state};dl('badchat_export.json',new Blob([JSON.stringify(payload,null,2)],{type:'application/json'}))}); $('#btnExportHTML')?.addEventListener('click',()=>{const html=['<!doctype html><meta charset="utf-8"><title>BadChat Export</title><style>body{background:#0b1324;color:#e7ecf4;font:14px system-ui}img{max-width:180px;border:1px solid #2a3550;border-radius:8px}</style><h1>BadChat Export</h1>'];html.push('<h2>Fotos</h2>');html.push((state.photos||[]).map(p=><figure><img src="${p.dataUrl}"><figcaption>${p.name} — #${(p.tags||[]).join(' #')}</figcaption></figure>).join(''));html.push('<h2>Erinnerungen</h2>');html.push((state.memories||[]).map(m=><div><strong>${m.title}</strong><br><small>${new Date(m._ts||Date.now()).toLocaleString()}</small><p>${m.text}</p><small>#${(m.tags||[]).join(' #')}</small></div>).join(''));dl('badchat_gallery.html',new Blob([html.join('')],{type:'text/html'}))}); $('#btnImport')?.addEventListener('click',async()=>{const inp=document.createElement('input');inp.type='file';inp.accept='.json,application/json';inp.onchange=async()=>{const text=await inp.files[0].text();const data=JSON.parse(text);const mode=prompt('Import-Modus: "merge" oder "overwrite"?','merge');if(!mode)return; if(mode==='overwrite'){state=data.state||state}else{const pIndex=new Map((state.photos||[]).map(p=>[p.name,p]));(data.state?.photos||[]).forEach(p=>{if(!pIndex.has(p.name))state.photos.push(p)});const mIndex=new Map((state.memories||[]).map(m=>[m.id,m]));(data.state?.memories||[]).forEach(m=>{if(!mIndex.has(m.id))state.memories.push(m)})} store.save(state);renderGallery();post('ai','Import abgeschlossen.')};inp.click()})})();// ====== Character Editor ====== (function(){const modal=$('#charModal');$('#charEditFab')?.addEventListener('click',()=>{fill();modal.classList.add('open')});$('#charClose')?.addEventListener('click',()=>modal.classList.remove('open'));function bindRange(id,val){const el=$('#'+id),out=$('#'+id+'Val');el.value=val;if(out)out.textContent=val} function fill(){const c=state.character||{};const t=c.traits||{};$('#phaseMeta').textContent=state.phase;$('#subphaseMeta').textContent=state.subphase;$('#chName').value=c.name||'';$('#chPersona').value=c.persona||'';$('#chMaxSens').value=c.maxSensitivity||'medium';$('#chInterests').value=(state.interests||[]).join(', ');bindRange('trMulti',t.multiImageLimit??3);bindRange('trRel',t.relevanceThreshold??5);bindRange('trPro',t.proactivity??5);bindRange('trVerb',t.verbosity??2)} ['trMulti','trRel','trPro','trVerb'].forEach(id=>$('#'+id)?.addEventListener('input',e=>{$('#'+id+'Val')?.textContent=e.target.value})); $('#charModal')?.addEventListener('change',()=>{const c=state.character;const t=c.traits;c.name=$('#chName').value||c.name;c.persona=$('#chPersona').value||'';c.maxSensitivity=$('#chMaxSens').value||'medium';const interests=($('#chInterests').value||'').split(',').map(s=>normalizeTag(s.trim())).filter(Boolean);if(interests.length)state.interests=[...new Set(interests)];t.multiImageLimit=parseInt($('#trMulti').value,10);t.relevanceThreshold=parseInt($('#trRel').value,10);t.proactivity=parseInt($('#trPro').value,10);t.verbosity=parseInt($('#trVerb').value,10);store.save(state)})})();  
  
// ====== Debug ====== (function(){const btn=$('#dbgToggle');const panel=$('#dbgPanel');const pre=$('#dbgPre');function snapshot(){return{version:window.VERSION,phase:state.phase,subphase:state.subphase,trust:state.trust,interest:state.interest,photos:(state.photos||[]).length,memories:(state.memories||[]).length,lastPhase:state._lastPhaseChange||null}} function refresh(){pre.textContent=JSON.stringify(snapshot(),null,2)} btn?.addEventListener('click',()=>{panel.style.display=panel.style.display==='block'?'none':'block';refresh()});$('#dbgClose')?.addEventListener('click',()=>panel.style.display='none');new MutationObserver(()=>{if(panel.style.display==='block')refresh()}).observe($('#messages'),{childList:true})})();  
  
// ====== Composer ====== let _lastUserMsgTs=Date.now(); $('#send')?.addEventListener('click',()=>{const txt=$('#text').value.trim();if(!txt)return;renderMessage('me',txt);_lastUserMsgTs=Date.now();if(txt.toLowerCase()==='warum phase?'){post('ai',state.phaseReason||'Phasenwechsel basierend auf Trust/Interesse/Nähe.');$('#text').value='';return} if(txt.startsWith('#szene')||txt.includes('szene zu')||/erzähl(e)? eine szene/i.test(txt)){/* handled below */} else {const imgs=selectPhotosForChat(expandTags(txt.split(/\s+/).filter(x=>x.startsWith('#')).map(t=>t.slice(1))));post('ai','Erzähle mir mehr 🙂',(imgs||[]).map(p=>p.dataUrl));logTrust(+0.1)} $('#text').value=''});  
  
// ====== Upload & Gallery ====== $('#chatFile')?.addEventListener('change',async e=>{const f=e.target.files?.[0];if(!f)return;const url=URL.createObjectURL(f);const name=f.name.replace(/\s+/g,'_');const nm=name.toLowerCase();const tags=[];if(/wald|park|tree|baum|gras|wiese|wander|hike/.test(nm))tags.push('natur');if(/see|meer|lake|ocean|strand|beach|fluss/.test(nm))tags.push('wasser');if(/sky|himmel|wolke/.test(nm))tags.push('himmel');if(/city|stadt|urban|street|skyline|building|architektur/.test(nm))tags.push('stadt');if(/food|essen|pizza|pasta|burger|kuchen|lunch|dinner|frühstück/.test(nm))tags.push('essen');const dataUrl=await new Promise(res=>{const img=new Image();img.onload=()=>{const max=720;const r=Math.min(1,max/Math.max(img.width,img.height));const c=document.createElement('canvas');c.width=Math.round(img.widthr);c.height=Math.round(img.heightr);c.getContext('2d').drawImage(img,0,0,c.width,c.height);res(c.toDataURL('image/jpeg',0.9))};img.src=url});addPhotoObject(name,dataUrl,tags,0,'user');post('ai',Danke für **${name}**! ${tags.length?'Erkannte Tags: #'+tags.join(' #'):'Ich kann Tags vorschlagen, wenn du magst.'})}); $('#addPhoto')?.addEventListener('click',()=>$('#chatFile').click());  
  
// ====== Memories UI ====== $('#makeMemory')?.addEventListener('click',()=>{const title=($('#memTitle').value||'Notiz').trim();const text=($('#memText').value||'').trim();if(!text&&!title){toast('Bitte Titel oder Text eingeben.');return} addMemory({title,text,tags:[]});$('#memTitle').value='';$('#memText').value=''});  
  
// ====== Scene Generator ====== (function(){function norm(s){return String(s||'').toLowerCase().trim()} function parseSceneQuery(text){const t=norm(text);if(t.includes('#szene')){const tail=t.split('#szene')[1]||'';const words=tail.split(/[^\p{L}0-9]+/u).map(norm).filter(Boolean);return words[0]||null} if(t.includes('szene zu')){return t.split('szene zu').pop().trim().split(/\s+/)[0]||null} if(t.includes('erzähle eine szene')||t.includes('erzähl eine szene')||t.includes('erzähl mir eine szene')){return null} return undefined} function anyMemory(){return (state.memories||[])} function memoriesByTag(tag){const t=norm(tag);return (state.memories||[]).filter(m=>(m.tags||[]).map(norm).includes(t))} function sceneFromMemory(mem){const mood=state.mood?.val||0;const T=[{chk:v=>v<-0.6,lead:['Es fühlte sich schwer an,'],sense:['die Luft war kühl'],close:['aber ich blieb dran.']},{chk:v=>v<-0.2,lead:['Ich war nachdenklich,'],sense:['das Licht lag flach'],close:['und ich hörte genauer hin.']},{chk:v=>v<0.2,lead:['Ganz bei mir,'],sense:['die Details traten klar hervor'],close:['ohne Eile.']},{chk:v=>v<0.6,lead:['Mit einem kleinen Lächeln,'],sense:['die Luft roch frisch'],close:['und ich genoss es.']},{chk:()=>true,lead:['Voller Wärme,'],sense:['die Farben wirkten intensiver'],close:['und ich wollte den Moment festhalten.']}];const tone=T.find(x=>x.chk(mood))||T[2];const lead=pick(tone.lead),sense=pick(tone.sense),close=pick(tone.close);const body=(mem.text||'').replace(/\s+/g,' ').slice(0,220);const tagLine=(mem.tags&&mem.tags.length)?('#'+mem.tags.slice(0,3).join(' #')):'';return Eine kleine Szene aus meiner Sicht:\n\n${lead} ${sense}, ${close} ${body? body : (mem.title? 'Es ging um **'+mem.title+'**.' : '')} ${tagLine}} function composeAndPostScene(tag){let mem=null;if(tag){const list=memoriesByTag(tag);mem=list.length?pick(list):null} if(!mem){const pool=anyMemory();mem=pool.length?pick(pool):null} if(!mem){post('ai','Ich habe noch keine passende Erinnerung gespeichert – magst du mir kurz etwas dazu erzählen?');return} const txt=sceneFromMemory(mem);let images=[];try{const imgs=selectPhotosForChat(mem.tags||[]);images=(imgs||[]).slice(0,Math.min(2,state.character?.traits?.multiImageLimit||2)).map(p=>p.dataUrl).filter(Boolean)}catch{} post('ai',txt,images.length?images:undefined)} new MutationObserver(()=>{const msgs=[...$('#messages').querySelectorAll('.msg.me')];if(!msgs.length)return;const txt=msgs.at(-1).innerText||'';const q=parseSceneQuery(txt);if(q!==undefined)composeAndPostScene(q)}).observe($('#messages'),{childList:true})})();  
  
// ====== Proaktive Pings ====== function canPropose(){const pro=state.character?.traits?.proactivity??5;if(pro<=2)return false;const idle=45000*(8/(pro+3));if(Date.now()-(_lastUserMsgTs||0)<idle)return false;state._proposals=(state._proposals||[]).filter(x=>x>Date.now()-3600e3);return state._proposals.length<4} function propose(){const t=["Ich bin noch da 🙂 Wollen wir eine kleine Szene probieren? Schreib z. B. #szene natur","Soll ich dir etwas aus meinen Erinnerungen erzählen?","Magst du mir ein neues Foto schicken? Ich kann Tags vorschlagen."];post('ai',pick(t));(state._proposals||=[]).push(Date.now());logTrust(+0.1)} setInterval(()=>{if(canPropose())propose()},15000);  
  
// ====== Debug Toggle ====== (function(){const btn=$('#dbgToggle');const panel=$('#dbgPanel');const pre=$('#dbgPre');function snapshot(){return{version:window.VERSION,phase:state.phase,subphase:state.subphase,trust:state.trust,interest:state.interest,photos:(state.photos||[]).length,memories:(state.memories||[]).length,lastPhase:state._lastPhaseChange||null}} function refresh(){pre.textContent=JSON.stringify(snapshot(),null,2)} btn?.addEventListener('click',()=>{panel.style.display=panel.style.display==='block'?'none':'block';refresh()});$('#dbgClose')?.addEventListener('click',()=>panel.style.display='none')})();  
  
// ====== Init ====== renderGallery(); reevaluatePhase(); post('ai','Hallo! Ich bin bereit. Schicke mir gern Text oder ein Foto. (Tipp: #szene natur)'); </script>  
  
</body>  
</html>


